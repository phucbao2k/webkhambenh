BÔI ĐEN VÀ CTRL+ENTER trong dbeaver ĐỂ CHẠY CÁC CÂU LỆNH CỤ THỂ


Hàm .destroy() chỉ thực hiện được khi đứng trước nó là 1 object của Sequelize.

Đối với các function(hàm) dùng để xử lý(handle) sự kiện(evenet) onChange, onClick, on... các kiểu, thì ta nên dùng arrow function khi 
thực hiện gán lệnh cho onClick, onChange...

-Props là các biến, data được truyền từ component cha và có thể truy cập được ở cả các component con.

-State được khởi tạo và chỉnh sửa và chỉ có thể truy cập bởi chính bản thân component chứa nó.
 -Điểm khác nhau lớn nhất giữa props và state đó là props không thể thay đổi,
-  còn state có thể thay đổi do đó hiệu năng của props tốt hơn state.


... (there dots): là copy và paste trong ReactJs

với hàm map trong JS, ta không thể dùng lệnh break;

alert không giúp sinh ra 1 object;

để truyền fire events từ con sang cha, ta dùng props
 để truyền fire events từ cha sang con, ta dùng ref
 nếu  phải thao tác vs database, ta có thể dùng emitter(áp dụng cho cả bên cha lẫn con), cơ chế hoạt động của emitter khá giống chat real-time

 với emitter thì bên nào muốn nhận fire event, thì ta dùng emitter.on(), còn bên nào gửi fire event, thì dùng emitter.emit(),

 React.Fragments giúp ta viết code ngắn hơn mà vẫn render đúng thứ thự của html/css. Link: https://freetuts.net/fragments-trong-reactjs-2433.html

 Redux chạy xong xong với React, giống như local storage, lưu trữ mọi biến và giúp quản lý state cho React, nhờ đó, nhiều component chỉ cần gọi
  state đã lưu từ redux mà không cần thiết phải gọi lại API.

  đổi ngôn ngữ thì sang điều chỉnh lại file appReducer.js

  muốn xác định đang có logic bug ở file nào, hãy vào file web.js đầu tiên

  với prj này, sau khi thay đổi thông tin của người dùng, ta cần logout ra bên ngoài rồi đăng nhập lại để redux persit load lại

  muốn tìm path hoặc đặt thêm path cần thao tác, đến file System.js và đặt path khác

  axios là 1 thư viện lấy và gửi thông tin từ phía client về server

  muốn fire 1 actions của redux(hay là gọi 1 action của redux, ta phải bọc dispatch vào trong hàm đó).

  componentDidMount chạy sau khi render thành công, sau đó nó sẽ ghi đè lên props qua componentDidUpdate (cụ thể là this.props);

  hàm componentDidUpdate( prevProps,prevState, snapshot) luôn luôn chạy khi app chạy thành công, muốn hàm đó chạy thì ta phải
  đặt điều kiện so sánh trước và sau của các props rồi thực hiện hành động ta muốn.

   VD:
   
   componentDidUpdate( prevProps,prevState, snapshot){
    
    if(prevProps.genderRedux !== this.props.genderRedux
      
          ){
        this.setState({
            genderArr: this.props.genderRedux,
          
        })
    }
    if(prevProps.positionRedux !== this.props.positionRedux){
      this.setState({
        positionArr: this.props.positionRedux,
      })
    }
    if(prevProps.roleIdRedux !== this.props.roleIdRedux){
      this.setState({
        roleIdArr: this.props.roleIdRedux,
      })
    }
}


trong 1 object {} thì không thể có dấu ()

Luồng chạy của JS:
Đầu tiên sẽ chạy vào constructor, sau đó chạy vào hàm render(), sau đó chạy vào hàm
componentDidMount, sau đó sẽ chạy sang file chứa các action đã fire, sau đó chạy đến hàm chứa
dispatch(type: actionTypes....)  ở file đó và chạy các câu lệnh phía dưới,
sau đó nhảy vào file Redux,
 (riêng câu lệnh dispatch nếu không có gì ở phía dưới thì nhảy vào switch/case file Reducer),

 sau đó chạy vào componentDidUpdate trong file redux
lệnh  if (prevProps. !== this.props.) sẽ chạy khi props cha thay đổi

 Muốn thao tác với redux, việc đầu tiên là định nghĩa tên của action đó trong actionTypes, sau đó export
 ở các file khác như appActions/ adminActions/ userActions.

 Tiếp tới, viết các hàm để dispatch() các action vừa viết đó(bắt buộc).

 Khi muốn thực thi 1 hàm ở redux trên phía react, ta phải fire tên của funtion đó ra, 
 tên function đó thường được người dùng tự định nghĩa ở hàm mapStateToProps() với các
 câu lệnh nhỏ, với bên trái là tên người dùng tự định nghĩa, bên phải là function đã được định nghĩa bên redux.


 mapStateToProps() là lấy state của redux(Thường nằm trong file Reducer) rồi bơm vào props của reactjs
 mapDispatchToProps() là lấy câu lệnh của redux(Thường nằm trong file Action) rồi bơm vào props của reactjs


khi gán data, bên nào có this.state thì bên đó không phải là tên cột mặc định của database

Việc dùng promise để chắc chắn code luôn ra được kết quả(trong cả trường hợp đúng lẫn sai)

trong import, .. tức là nhảy ra thư mục ở bên ngoài.

actions mà ta thấy trong file Reducer chính là những câu lệnh có trong dispatch({}) của file actions
vd: 

  dispatch({
        type: actionTypes.FETCH_TOP_DOCTORS_SUCCESS,
        dataDoctors: res.data
    })

---trong hàm mapStateToProps(), phần admin/app/user... trong các câu lệnh phía dưới chính là phần
đại diện cho các file adminReducer/userReducer/appReducer...

để render động từ database khi có update, ta phải đặt constructor với các state mà ta muốn hiển thị

muốn tạo 1 route mới(kiểu như phân trang mới trong reactJS, thì nhớ đến class chứa nội dung mà ta muốn xếp, để thêm link và name ),
 sau đó chạy đến file App để nhập route, path, component mà ta muốn đặt (nhớ phải import class đó),
rồi sau đó có thể hoặc không export const path thêm ở file constant.js

muốn tạo 1 API mới, kết hợp với reactJS, xem bài 67.

Mô tả về cách viết các quan hệ trong sequelize:

A.hasOne(B), thì khóa ngoại chính là khóa chính của bảng B 
A.belongsTo(B), thì khóa ngoại chính là khóa chính của bảng A 
Muốn tạo quan hệ nhiều nhiều, ta nên tạo 1 bảng mới chứa các thông tin chung của 2 bảng rồi làm 
nên các mối quan hệ 1 nhiều. VD: https://tanducits.com/thu-thuat/tong-quan-ve-moi-quan-he-relationships-giua-cac-bang-trong-access


Khi viết một hàm mà muốn thao tác với object thông qua ID của object, ta phải truyền id đó vào
bằng câu lệnh (req.query.id)

withRouter ở trong thư viện 'react-router', mục đích để chuyển trang, ví dụ như onclick to href 
trong html css, muốn phần trong reactjs nào có chuyển trang, thì viết vào trong class js đó

Những câu lệnh nằm trên hàm return sẽ có khả năng áp dụng toàn bộ vào hàm return phía sau, tùy ý đồ của chúng ta

khi muốn show hay hiện 1 thứ gì đó ở link mới, chỉ cần định nghĩa isShowHeader, isShowBanner... hay gì đó rồi set giá trị true false cho từng
nơi


ĐỊNH NGHĨA VỀ THIS.PROPS.MATCH.PARAMS. 
A match object contains information about how a <Route path> matched the URL.


để lấy thông tin doctor(ở phần logic database), lần lượt ta xem qua các class sau: web.js, doctorController.js, doctorService.js(NodeJs)
 và DetailDoctor.js, UserService.js, OutStandingDoctor.js(React)

 Còn ở phần tạo route, sẽ nằm trong file constant.js, App.js.
  Lưu ý: Route path ở file App.js và api ở userService.js có thể thay đổi linh hoạt tùy nơi 

  raw= false tức là ta đang định danh về sequelize object hoặc object thuộc hệ csdl tương đương, còn raw =true sẽ định nghĩa về kiểu 
  javascript object, mục đích đặt raw = false là để tránh hiện tượng .save(), .create(), .... is not a function... 
  (tức là sequelize không nhận ra function trên)


  khi tạo 1 hàm onChange, ta phải bắt buộc lưu state cho nó luôn, thì khi kết thúc, component đó mới nhận ra sự thay đổi của state trước
  và sau


Mấy câu điều kiện như trên:
 if (prevProps.allDoctors !== this.props.allDoctors) {
            
        }

Là để check xem khi API đã trả về dữ liệu rồi thì làm gì...

lodash là 1 thư viện giúp ta thao tác với object


map() dùng để lặp và duyệt các phần tử trong mảng

bulkCreate() thường dùng để import hoặc tạo cùng lúc một lượng lớn dữ liệu(từ cả file lẫn server)
-theo doc, bulk định nghĩa là(creating, updating and destroying multiple rows at once)

require dotenv là đề xử lý được các câu lệnh trong file .env(giống như import thư viện)
process.env là để xử lý câu lệnh trong file .env(giống như 1 hàm nằm trong thư viện)


req.query là lấy giá trị của 1 cột(kiểu id, firstName, lastName), chủ yếu dùng trong method GET, với đường link có tham số
req.body là lấy toàn bộ giá trị cột trong bảng, chủ yếu dùng trong method PUT, với đường link ko có tham số

với điều kiện where khi findAll() hoặc findOne():
vế trái là key trong db, vế phải là key ta tự định nghĩa

Kiểu dữ liệu TIMESTAMP trong moment có thể để ở cả dạng số và chữ, tùy người dùng định nghĩa, tuy nhiên nên để kiểu số, 
để dễ convert ngày/tháng/năm, tháng/năm/ngày, tháng/ngày/năm...


*MẸO:
a = '5'; b = +a;
=> b= 5. 
ĐÂY là cách convert từ string sang số

this.props.match && this.props.match.params && this.props.match.params.id: 
---nếu props này match với database ở trong api, và match vs db có tham số, và match vs tham số tồn tại ở db đó(id)


KHI CONSOLE CỦA ReactJs BÁO biến undefined với biến được gọi(lấy từ redux), thì ta sang redux xem console log check
bên đó biến đấy có bị undefined hay không, nếu có check syntax và logic cả hai bên 


//CÁCH DEBUG:
VÌ js là ngôn ngữ đơn luồng, mọi thứ sẽ được thực hiện tuần tự, nên khi debug chúng ta sẽ phải đặt bug
ở đầu mỗi hàm(lần lượt từ trên xuống dưới, muốn kiểm tra đang ở file nào thì vào source để inspect rồi vào App.js để lấy Route path)

//attributes trong nodejs để lấy hoặc loại bỏ giá trị các trường trong db

Khi include nhiều giá trị trong 1 db, thì ta phải dùng raw =false, nest =true

raw=false để dữ liệu trả về là 1 object javascript, nest là để lồng các attributes đó lại vs nhau thành 1 mảng


VIDEO 82: Customize modal reactjs
https://www.youtube.com/watch?v=iO5IjzFUCNk&list=PLncHg6Kn2JT6E38Z3kit9Hnif1xC_9VqI&index=99


let { language } = this.props; dùng để lấy props ngôn ngữ của redux

NẾU chúng ta xác định một component nào đó của react sẽ được sử dụng ở nhiều nơi, chúng ta hãy viết riêng component đó ra thành 1 class
riêng rồi import vào các component cần, điều này tránh được việc phải viết nhiều logic js


MUỐN đổi từ TIMESTAMP sang human date, ta có thể dùng unix,
 và ta phải chia cho 1000 vì biến chứa giá trị đơn vị thời gian của js(dataTime.date), được tính theo milisecond,
 còn unix lại tính theo second
 VD:  moment.unix(+dataTime.date / 1000).format('dddd -DD/MM/YYYY')


 VỚI express js, các controller xử lý service(các service xử lý api) sẽ đi kèm với res, req.
 Chúng ta phải thêm từ khóa req, req vào arrow function thì hàm controller mới xử lý được.


 CÁC biến(data, idInput, inputId) có trong file service(doctorService, patientService...) của nodejs
  được gán giá trị từ phía người dùng(reactjs) và kết nối qua axios.


  VỚI event.target.value, nó truy xuất giá trị của tất cả những đầu vào được gọi,
  bất kỳ thứ gì chèn vào đầu vào đều có thể được truy cập thông qua event.target.value


  VỚI hàm onclick, onClick={() => this.abcxyz()} sẽ là thực hiện hàm bên trong class đó, còn onClick={abcxyz} 
  là thực hiện hàm được lấy từ lớp cha

  KHI debug nhớ open file với /static/


  CTRL+P để tìm nhanh file

  HỌC THÊM VỀ SEQUELIZE----------------------------------------------------------------


  VỚI SEQUELIZE , muốn thực thi 1 hàm save()... thì phải đặt save() ở sau cùng. VD:
    appointment.statusId = 'S3';
                    await appointment.save()


this.props.  có thể là redux hoặc có thể định nghĩa sẵn từ props cha 
HỌC THÊM VỀ PACKAGE QUERY-STRING

this.setState() là hàm dùng để re-render state.

*khi muốn lặp qua các phần tử trong 1 array[] trong 1 framework front-end, ta nên dùng map() chứ ko dùng for/for-each(),
vì for/for-each() sẽ thay đôi dữ liệu phần tử trong array[] đó


*với props, chúng ta chỉ có thể truyền dữ liệu từ cha xuống con, không thể từ con lên cha



*    khi làm việc với api ở hook hoặc class, ta nên làm với async/await, và ném vào trong khối lệnh try/catch. sau đó chỉ cần đặt tên 1 biến
  đại diện cho các giá trị trả về của api, (vd: res, result,...),
  và muốn lấy cụ thể data ở phần nào chỉ 
  cần thêm tiền tố . vào trước mục đó, vd: res.data, res.header, res.config...


  KHI TẠO RELATIONSHIPS GIỮA CÁC COLLUMS (TRONG SQL):
   CỘT NÀO CỦA BẢNG NÀO CÓ GIÁ TRỊ THUỘC VỀ CỘT KHÁC CỦA BẢNG KHÁC,
  KIỂU QUAN HỆ "A BELONGSTO B", TỨC LÀ GIÁ TRỊ CỘT A PHẢI THUỘC MỘT TRONG NHỮNG GIÁ TRỊ CỦA CỘT B,
  (TƯƠNG TỰ "statusId", "priceId", "provinceId",... BELONGSTO "keymap" TRONG BẢNG "Allcode").

  THÌ "statusId", "priceId", "provinceId",... ĐƯỢC GỌI LÀ "foreignKey".

  CÒN "keyMap" TRONG BẢNG "Allcode" ĐƯỢC GỌI LÀ "referenceKey". 