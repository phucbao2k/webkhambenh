[{"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\index.js":"1","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\redux.js":"2","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\serviceWorker.js":"3","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\hoc\\IntlProviderWrapper.js":"4","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\App.js":"5","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\hoc\\authentication.js":"6","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\auth\\Login.js":"7","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\Home.js":"8","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Header\\Header.js":"9","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\System.js":"10","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\ConfirmModal.js":"11","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\CustomToast.js":"12","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\reducers\\rootReducer.js":"13","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\actions\\actionTypes.js":"14","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\index.js":"15","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\Navigator.js":"16","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Header\\menuApp.js":"17","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\CustomScrollbars.js":"18","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\reducers\\appReducer.js":"19","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\reducers\\userReducer.js":"20","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\UserManage.js":"21","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\actions\\index.js":"22","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\KeyCodeUtils.js":"23","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\LanguageUtils.js":"24","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\constant.js":"25","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\CommonUtils.js":"26","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\ToastUtil.js":"27","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\actions\\userActions.js":"28","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\actions\\appActions.js":"29","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\services\\index.js":"30","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\services\\userService.js":"31","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\axios.js":"32","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\config.js":"33","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\ModalUser.js":"34","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\emitter.js":"35","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\ModalEditUser.js":"36","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\HomePage.js":"37","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\HomeHeader.js":"38","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\Section\\Specialty.js":"39","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\Section\\MedicalFacility.js":"40","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\Section\\OutStandingDoctor.js":"41","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\Section\\HandBook.js":"42","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\Section\\About.js":"43","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\HomeFooter.js":"44","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\UserRedux.js":"45","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\actions\\adminActions.js":"46","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\reducers\\adminReducer.js":"47","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\TableManageUser.js":"48","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\ManageDoctor.js":"49","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\DetailDoctor.js":"50","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\Doctor.js":"51","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\Input\\DatePicker.js":"52","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\DoctorSchedule.js":"53","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\DoctorExtraInfor.js":"54","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\Modal\\BookingModal.js":"55","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\ProfileDoctor.js":"56","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\Input\\index.js":"57","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\Input\\InputSuggest.js":"58","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\VerifyEmail.js":"59","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\auth\\Register.js":"60","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Specialty\\ManageSpecialty.js":"61","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Specialty\\DetailSpecialty.js":"62","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Clinic\\ManageClinic.js":"63","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Clinic\\DetailClinic.js":"64","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\ManagePatient.js":"65","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\RemedyModal.js":"66","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\Patient.js":"67","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Patient\\Manage_Patient.js":"68","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\RemedyPatientModal.js":"69","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Admin\\ManagePatients.js":"70","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\RemedyAdminModal.js":"71","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\Admin.js":"72","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\TableManageClinic.js":"73","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\TableManageSpecialty.js":"74","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Handbook\\ManageHandbook.js":"75","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\TableManageHandbook.js":"76","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Handbook\\DetailHandbook.js":"77","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Admin\\TableManagePatients.js":"78","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\CancelModal.js":"79","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Patient\\CancelPatientModal.js":"80","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\TableManageBookings.js":"81","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Patient\\TableManageBooking.js":"82","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\DoctorManageSchedule.js":"83","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\ManageSchedule.js":"84","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\BookingManager.js":"85","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\BookingManager\\Manage_Booking.js":"86","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\BookingManager\\TableManagePaidBooking.js":"87","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\BookingManager\\CancelBookingModal.js":"88","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\BookingManager\\RemedyModal.js":"89","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\ScheduleTable.js":"90","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\DoneTable.js":"91","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\ChangeStatusModal.js":"92","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\ReBookingModal.js":"93","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\BookingManager\\utils.js":"94","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\BookingManager\\SearchBooking.js":"95"},{"size":927,"mtime":1664208778832,"results":"96","hashOfConfig":"97"},{"size":1514,"mtime":1664208781732,"results":"98","hashOfConfig":"97"},{"size":5086,"mtime":1662132386672,"results":"99","hashOfConfig":"97"},{"size":1095,"mtime":1664208688993,"results":"100","hashOfConfig":"97"},{"size":4948,"mtime":1671313240269,"results":"101","hashOfConfig":"97"},{"size":789,"mtime":1664208685257,"results":"102","hashOfConfig":"97"},{"size":6123,"mtime":1670683937354,"results":"103","hashOfConfig":"97"},{"size":638,"mtime":1664208695692,"results":"104","hashOfConfig":"97"},{"size":4439,"mtime":1670757005469,"results":"105","hashOfConfig":"97"},{"size":2749,"mtime":1670399621988,"results":"106","hashOfConfig":"97"},{"size":3862,"mtime":1662132386648,"results":"107","hashOfConfig":"97"},{"size":2282,"mtime":1662132386652,"results":"108","hashOfConfig":"97"},{"size":968,"mtime":1664208734242,"results":"109","hashOfConfig":"97"},{"size":3953,"mtime":1671606407057,"results":"110","hashOfConfig":"97"},{"size":251,"mtime":1662693139881,"results":"111","hashOfConfig":"97"},{"size":10449,"mtime":1670592706837,"results":"112","hashOfConfig":"97"},{"size":3108,"mtime":1671632096946,"results":"113","hashOfConfig":"97"},{"size":3173,"mtime":1662132386651,"results":"114","hashOfConfig":"97"},{"size":1116,"mtime":1664208731010,"results":"115","hashOfConfig":"97"},{"size":830,"mtime":1664208737758,"results":"116","hashOfConfig":"97"},{"size":7011,"mtime":1671306546283,"results":"117","hashOfConfig":"97"},{"size":91,"mtime":1663152319961,"results":"118","hashOfConfig":"97"},{"size":683,"mtime":1664208765132,"results":"119","hashOfConfig":"97"},{"size":963,"mtime":1664208761374,"results":"120","hashOfConfig":"97"},{"size":880,"mtime":1671313272892,"results":"121","hashOfConfig":"97"},{"size":354,"mtime":1664208749772,"results":"122","hashOfConfig":"97"},{"size":3001,"mtime":1664208768110,"results":"123","hashOfConfig":"97"},{"size":414,"mtime":1664208725057,"results":"124","hashOfConfig":"97"},{"size":572,"mtime":1664208720368,"results":"125","hashOfConfig":"97"},{"size":114,"mtime":1662626361575,"results":"126","hashOfConfig":"97"},{"size":9042,"mtime":1671641681381,"results":"127","hashOfConfig":"97"},{"size":378,"mtime":1670395067263,"results":"128","hashOfConfig":"97"},{"size":445,"mtime":1662132386664,"results":"129","hashOfConfig":"130"},{"size":4752,"mtime":1664208656137,"results":"131","hashOfConfig":"97"},{"size":136,"mtime":1664208755382,"results":"132","hashOfConfig":"97"},{"size":5406,"mtime":1664208651205,"results":"133","hashOfConfig":"97"},{"size":2457,"mtime":1673887345797,"results":"134","hashOfConfig":"97"},{"size":9077,"mtime":1672195179819,"results":"135","hashOfConfig":"97"},{"size":4119,"mtime":1671557045651,"results":"136","hashOfConfig":"97"},{"size":4531,"mtime":1669741936599,"results":"137","hashOfConfig":"97"},{"size":5491,"mtime":1670342385837,"results":"138","hashOfConfig":"97"},{"size":4004,"mtime":1670342398264,"results":"139","hashOfConfig":"97"},{"size":1562,"mtime":1667477545692,"results":"140","hashOfConfig":"97"},{"size":3738,"mtime":1669391813726,"results":"141","hashOfConfig":"97"},{"size":17155,"mtime":1672120551271,"results":"142","hashOfConfig":"97"},{"size":28400,"mtime":1671606576384,"results":"143","hashOfConfig":"97"},{"size":5048,"mtime":1671606469785,"results":"144","hashOfConfig":"97"},{"size":4796,"mtime":1670394819744,"results":"145","hashOfConfig":"97"},{"size":23749,"mtime":1672194641904,"results":"146","hashOfConfig":"97"},{"size":5219,"mtime":1671624462695,"results":"147","hashOfConfig":"97"},{"size":2024,"mtime":1670393896638,"results":"148","hashOfConfig":"97"},{"size":5954,"mtime":1662132386655,"results":"149","hashOfConfig":"97"},{"size":8041,"mtime":1671642113713,"results":"150","hashOfConfig":"97"},{"size":7107,"mtime":1666691963655,"results":"151","hashOfConfig":"97"},{"size":17670,"mtime":1672115374629,"results":"152","hashOfConfig":"97"},{"size":6255,"mtime":1671641818080,"results":"153","hashOfConfig":"97"},{"size":112,"mtime":1662132386661,"results":"154","hashOfConfig":"97"},{"size":4358,"mtime":1662132386656,"results":"155","hashOfConfig":"97"},{"size":2607,"mtime":1668609056168,"results":"156","hashOfConfig":"97"},{"size":6676,"mtime":1672114248966,"results":"157","hashOfConfig":"97"},{"size":10971,"mtime":1672194571097,"results":"158","hashOfConfig":"97"},{"size":7000,"mtime":1670501435559,"results":"159","hashOfConfig":"97"},{"size":11731,"mtime":1672194613915,"results":"160","hashOfConfig":"97"},{"size":4819,"mtime":1670395107451,"results":"161","hashOfConfig":"97"},{"size":14558,"mtime":1670771822785,"results":"162","hashOfConfig":"97"},{"size":4333,"mtime":1671384138650,"results":"163","hashOfConfig":"97"},{"size":1859,"mtime":1670393879318,"results":"164","hashOfConfig":"97"},{"size":15546,"mtime":1671558784772,"results":"165","hashOfConfig":"97"},{"size":5217,"mtime":1671384146556,"results":"166","hashOfConfig":"97"},{"size":13061,"mtime":1672147188272,"results":"167","hashOfConfig":"97"},{"size":4570,"mtime":1672147612681,"results":"168","hashOfConfig":"97"},{"size":1993,"mtime":1670398400243,"results":"169","hashOfConfig":"97"},{"size":4429,"mtime":1669647523415,"results":"170","hashOfConfig":"97"},{"size":4346,"mtime":1669647642174,"results":"171","hashOfConfig":"97"},{"size":10905,"mtime":1672194594871,"results":"172","hashOfConfig":"97"},{"size":4343,"mtime":1669647588436,"results":"173","hashOfConfig":"97"},{"size":2392,"mtime":1667566804389,"results":"174","hashOfConfig":"97"},{"size":6902,"mtime":1671559879831,"results":"175","hashOfConfig":"97"},{"size":3055,"mtime":1671384093005,"results":"176","hashOfConfig":"97"},{"size":3062,"mtime":1671384185359,"results":"177","hashOfConfig":"97"},{"size":7107,"mtime":1670766877017,"results":"178","hashOfConfig":"97"},{"size":7324,"mtime":1671559304810,"results":"179","hashOfConfig":"97"},{"size":8520,"mtime":1670395150063,"results":"180","hashOfConfig":"97"},{"size":13515,"mtime":1671628835357,"results":"181","hashOfConfig":"97"},{"size":1860,"mtime":1670759527951,"results":"182","hashOfConfig":"97"},{"size":13361,"mtime":1672145731644,"results":"183","hashOfConfig":"97"},{"size":14301,"mtime":1671625982956,"results":"184","hashOfConfig":"97"},{"size":3048,"mtime":1671384069774,"results":"185","hashOfConfig":"97"},{"size":10804,"mtime":1672146116786,"results":"186","hashOfConfig":"97"},{"size":14765,"mtime":1670773930048,"results":"187","hashOfConfig":"97"},{"size":11766,"mtime":1672143320392,"results":"188","hashOfConfig":"97"},{"size":4042,"mtime":1671384103324,"results":"189","hashOfConfig":"97"},{"size":4035,"mtime":1671384120507,"results":"190","hashOfConfig":"97"},{"size":1353,"mtime":1670947883835,"results":"191","hashOfConfig":"97"},{"size":10869,"mtime":1671294311777,"results":"192","hashOfConfig":"97"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},"1vystd0",{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"195"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"195"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"195"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"195"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"722k2h",{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"269"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"269"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"195"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"195"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"195"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"195"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"195"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"195"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"195"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"195"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"195"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"195"},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"195"},{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"195"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370"},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"195"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"195"},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"195"},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"195"},{"filePath":"391","messages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"195"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"195"},{"filePath":"403","messages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"195"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"195"},{"filePath":"411","messages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"195"},{"filePath":"414","messages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"195"},{"filePath":"417","messages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"419"},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"419"},"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\index.js",[],["422","423"],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\redux.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\serviceWorker.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\hoc\\IntlProviderWrapper.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\App.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\hoc\\authentication.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\auth\\Login.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\Home.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Header\\Header.js",["424"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { LANGUAGES, USER_ROLE } from '../../utils';\r\nimport * as actions from \"../../store/actions\";\r\nimport Navigator from '../../components/Navigator';\r\nimport { adminMenu, doctorMenu, patientMenu, bookingManagerMenu } from './menuApp';\r\nimport './Header.scss';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport _ from 'lodash';\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            menuApp: [],\r\n            activeMenu: false\r\n        }\r\n\r\n        this.changeActiveMenu = this.changeActiveMenu.bind(this);\r\n    }\r\n    handleChangeLanguage = (language) => {\r\n        this.props.changeLanguageAppRedux(language);\r\n    }\r\n    changeActiveMenu = () => {\r\n        this.setState({\r\n            activeMenu: !this.state.activeMenu\r\n        });\r\n    }\r\n    componentDidMount() {\r\n        let { userInfo } = this.props;\r\n        let menu = [];\r\n        if (userInfo && !_.isEmpty(userInfo)) {\r\n            let role = userInfo.roleId;\r\n            if (role === USER_ROLE.ADMIN) {\r\n                menu = adminMenu;\r\n            }\r\n            if (role === USER_ROLE.DOCTOR) {\r\n                menu = doctorMenu;\r\n            }\r\n            if (role === USER_ROLE.PATIENT) {\r\n                menu = patientMenu;\r\n            }\r\n            if (role === USER_ROLE.ADMIN_BOOKING) {\r\n                menu = bookingManagerMenu;\r\n            }\r\n\r\n        }\r\n        this.setState({\r\n            menuApp: menu\r\n        })\r\n    }\r\n    render() {\r\n        const { processLogout, language, userInfo } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className={this.state.activeMenu == false ? 'left_menu' : 'left_menu active_menu'}>\r\n                    <div className='overlay' onClick={this.changeActiveMenu}></div>\r\n                    <div className='main-content main-content_header'>\r\n                        <Navigator menus={this.state.menuApp} mobile={true} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"header-container main__header\">\r\n                    {/* thanh navigator */}\r\n                    <div className=\"header-tabs-container d-flex\">\r\n                        <div className='d-flex align-items-center bar__btn' onClick={this.changeActiveMenu}>\r\n                            <i class=\"fa-solid fa-bars bar_icon\"></i>\r\n                        </div>\r\n                        <Navigator menus={this.state.menuApp} mobile={false} />\r\n                    </div>\r\n\r\n                    <div className=\"languages\">\r\n                        <span className=\"welcome\">\r\n                            <FormattedMessage id=\"homeheader.welcome\"></FormattedMessage>,\r\n                            {userInfo && userInfo.firstName && userInfo.lastName ? ' ' + userInfo.firstName + ' ' + userInfo.lastName : ' '} !\r\n                            {/* Khi có thông tin của userInfo với 2 biến đầy đủ như kia thì ta in ra, không thì trả về giá trị rỗng */}\r\n                        </span>\r\n                        <div className={language === LANGUAGES.VI ? 'language-vi active' : 'language-vi'}>\r\n                            <span onClick={() => this.handleChangeLanguage(LANGUAGES.VI)}>VN</span>\r\n                        </div>\r\n                        <div className={language === LANGUAGES.EN ? 'language-en active' : 'language-en'}>\r\n                            <span onClick={() => this.handleChangeLanguage(LANGUAGES.EN)}>EN</span>\r\n                        </div>\r\n                        {/* nút logout */}\r\n                        <div className=\"btn btn-logout\" onClick={processLogout}>\r\n                            <i className=\"fas fa-sign-out-alt\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n        userInfo: state.user.userInfo,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        processLogout: () => dispatch(actions.processLogout()),\r\n        changeLanguageAppRedux: (language) => dispatch(actions.changeLanguageApp(language)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\System.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\ConfirmModal.js",[],["425","426"],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\CustomToast.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\reducers\\rootReducer.js",["427"],"import { combineReducers } from 'redux';\r\nimport { connectRouter } from 'connected-react-router';\r\n\r\nimport appReducer from \"./appReducer\";\r\n\r\nimport userReducer from \"./userReducer\";\r\n\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { persistReducer } from 'redux-persist';\r\nimport adminReducer from './adminReducer';\r\n\r\nconst persistCommonConfig = {\r\n    storage: storage,\r\n    stateReconciler: autoMergeLevel2,\r\n};\r\n\r\nconst userPersistConfig = {\r\n    ...persistCommonConfig,\r\n    key: 'user',\r\n    whitelist: ['isLoggedIn', 'userInfo']\r\n};\r\nconst appPersistConfig = {\r\n    ...persistCommonConfig,\r\n    key: 'app',\r\n    whitelist: ['language']\r\n}\r\nexport default (history) => combineReducers({\r\n    router: connectRouter(history),\r\n    user: persistReducer(userPersistConfig, userReducer),\r\n    app: persistReducer(appPersistConfig, appReducer),\r\n    admin: adminReducer\r\n})","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\actions\\actionTypes.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\index.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\Navigator.js",["428","429"],"import React, { Component, Fragment } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './Navigator.scss';\r\n\r\nclass MenuGroup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeSubmenu: false,\r\n        }\r\n\r\n        this.changeActiveMenu = this.changeActiveMenu.bind(this);\r\n    }\r\n\r\n    changeActiveMenu = () => {\r\n        this.setState({\r\n            activeSubmenu: !this.state.activeSubmenu\r\n        });\r\n    }\r\n\r\n    componentDidMount() { }\r\n\r\n    render() {\r\n        const { name, children } = this.props;\r\n        if (this.props.mobile) {\r\n            return (\r\n                <li className=\"menu-group\">\r\n                    <div className=\"menu-group-name d-flex justify-content-between align-items-center\" onClick={this.changeActiveMenu}>\r\n                        <div><FormattedMessage id={name} /></div>\r\n                        <i className={this.state.activeSubmenu == false ? \"fa-solid fa-chevron-down\" : \"fa-solid fa-chevron-up\"}></i>\r\n                    </div>\r\n                    <ul className={this.state.activeSubmenu == false ? \"d-none\" : \"menu-list list-unstyled\"}>\r\n                        {children}\r\n                    </ul>\r\n                </li>\r\n            );\r\n        } else {\r\n            return (\r\n                <li className=\"menu-group\">\r\n                    <div className=\"menu-group-name\">\r\n                        <FormattedMessage id={name} />\r\n                    </div>\r\n                    <ul className=\"menu-list list-unstyled\">\r\n                        {children}\r\n                    </ul>\r\n                </li>\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\nclass Menu extends Component {\r\n\r\n    render() {\r\n        const { name, active, link, children, onClick, hasSubMenu, onLinkClick } = this.props;\r\n        return (\r\n            <li className={\"menu\" + (hasSubMenu ? \" has-sub-menu\" : \"\") + (\"\") + (active ? \" active\" : \"\")}>\r\n                {hasSubMenu ? (\r\n                    <Fragment>\r\n                        <span\r\n                            data-toggle=\"collapse\"\r\n                            className={\"menu-link collapsed\"}\r\n                            onClick={onClick}\r\n                            aria-expanded={\"false\"}\r\n                        >\r\n                            <FormattedMessage id={name} />\r\n                            <div className=\"icon-right\">\r\n                                <i className={\"fa-brands fa-windows\"} />\r\n                            </div>\r\n                        </span>\r\n                        <div>\r\n                            <ul className=\"sub-menu-list list-unstyled\">\r\n                                {children}\r\n                            </ul>\r\n                        </div>\r\n                    </Fragment>\r\n                ) : (\r\n                    <Link to={link} className=\"menu-link\" onClick={onLinkClick}>\r\n                        <FormattedMessage id={name} />\r\n                    </Link>\r\n                )}\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nclass SubMenu extends Component {\r\n\r\n    getItemClass = path => {\r\n        return this.props.location.pathname === path ? \"active\" : \"\";\r\n    };\r\n\r\n    render() {\r\n        const { name, link, onLinkClick } = this.props;\r\n        return (\r\n            <li className={\"sub-menu \" + this.getItemClass(link)}>\r\n                <Link to={link} className=\"sub-menu-link\" onClick={onLinkClick}>\r\n                    <FormattedMessage id={name} />\r\n                </Link>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nconst MenuGroupWithRouter = withRouter(MenuGroup);\r\nconst MenuWithRouter = withRouter(Menu);\r\nconst SubMenuWithRouter = withRouter(SubMenu);\r\n\r\nconst withRouterInnerRef = (WrappedComponent) => {\r\n\r\n    class InnerComponentWithRef extends React.Component {\r\n        render() {\r\n            const { forwardRef, ...rest } = this.props;\r\n            return <WrappedComponent {...rest} ref={forwardRef} />;\r\n        }\r\n    }\r\n\r\n    const ComponentWithRef = withRouter(InnerComponentWithRef, { withRef: true });\r\n\r\n    return React.forwardRef((props, ref) => {\r\n        return <ComponentWithRef {...props} forwardRef={ref} />;\r\n    });\r\n};\r\n\r\nclass Navigator extends Component {\r\n    state = {\r\n        expandedMenu: {}\r\n    };\r\n\r\n    toggle = (groupIndex, menuIndex) => {\r\n        const expandedMenu = {};\r\n        const needExpand = !(this.state.expandedMenu[groupIndex + '_' + menuIndex] === true);\r\n        if (needExpand) {\r\n            expandedMenu[groupIndex + '_' + menuIndex] = true;\r\n        }\r\n\r\n        this.setState({\r\n            expandedMenu: expandedMenu\r\n        });\r\n    };\r\n\r\n    isMenuHasSubMenuActive = (location, subMenus, link) => {\r\n        if (subMenus) {\r\n            if (subMenus.length === 0) {\r\n                return false;\r\n            }\r\n\r\n            const currentPath = location.pathname;\r\n            for (let i = 0; i < subMenus.length; i++) {\r\n                const subMenu = subMenus[i];\r\n                if (subMenu.link === currentPath) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (link) {\r\n            return this.props.location.pathname === link;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    checkActiveMenu = () => {\r\n        const { menus, location } = this.props;\r\n        outerLoop:\r\n        for (let i = 0; i < menus.length; i++) {\r\n            const group = menus[i];\r\n            if (group.menus && group.menus.length > 0) {\r\n                for (let j = 0; j < group.menus.length; j++) {\r\n                    const menu = group.menus[j];\r\n                    if (menu.subMenus && menu.subMenus.length > 0) {\r\n                        if (this.isMenuHasSubMenuActive(location, menu.subMenus, null)) {\r\n                            const key = i + '_' + j;\r\n                            this.setState({\r\n                                expandedMenu: {\r\n                                    [key]: true\r\n                                }\r\n                            });\r\n                            break outerLoop;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.checkActiveMenu();\r\n    };\r\n\r\n    // componentWillReceiveProps(nextProps, prevState) {\r\n    //     const { location, setAccountMenuPath, setSettingMenuPath } = this.props;\r\n    //     const { location: nextLocation } = nextProps;\r\n    //     if (location !== nextLocation) {\r\n    //         let pathname = nextLocation && nextLocation.pathname;\r\n    //         if ((pathname.startsWith('/account/') || pathname.startsWith('/fds/account/'))) {\r\n    //             setAccountMenuPath(pathname);\r\n    //         }\r\n    //         if (pathname.startsWith('/settings/')) {\r\n    //             setSettingMenuPath(pathname);\r\n    //         };\r\n    //     };\r\n    // };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { location } = this.props;\r\n        const { location: prevLocation } = prevProps;\r\n        if (location !== prevLocation) {\r\n            this.checkActiveMenu();\r\n        };\r\n    };\r\n\r\n    render() {\r\n        const { menus, location, onLinkClick, mobile } = this.props;\r\n\r\n        return (\r\n            <Fragment>\r\n                <ul className=\"navigator-menu list-unstyled\">\r\n                    {\r\n                        menus.map((group, groupIndex) => {\r\n                            return (\r\n                                <Fragment key={groupIndex}>\r\n                                    <MenuGroupWithRouter name={group.name} mobile={mobile}>\r\n                                        {group.menus ? (\r\n                                            group.menus.map((menu, menuIndex) => {\r\n                                                const isMenuHasSubMenuActive = this.isMenuHasSubMenuActive(location, menu.subMenus, menu.link);\r\n                                                const isSubMenuOpen = this.state.expandedMenu[groupIndex + '_' + menuIndex] === true;\r\n                                                return (\r\n                                                    <MenuWithRouter\r\n                                                        key={menuIndex}\r\n                                                        active={isMenuHasSubMenuActive}\r\n                                                        name={menu.name}\r\n                                                        link={menu.link}\r\n                                                        hasSubMenu={menu.subMenus}\r\n                                                        isOpen={isSubMenuOpen}\r\n                                                        onClick={() => this.toggle(groupIndex, menuIndex)}\r\n                                                        onLinkClick={onLinkClick}\r\n                                                    >\r\n                                                        {menu.subMenus && menu.subMenus.map((subMenu, subMenuIndex) => (\r\n                                                            <SubMenuWithRouter\r\n                                                                key={subMenuIndex}\r\n                                                                name={subMenu.name}\r\n                                                                link={subMenu.link}\r\n                                                                onClick={this.closeOtherExpand}\r\n                                                                onLinkClick={onLinkClick}\r\n                                                            />\r\n                                                        ))}\r\n                                                    </MenuWithRouter>\r\n                                                );\r\n                                            })\r\n                                        ) : null}\r\n                                    </MenuGroupWithRouter>\r\n                                </Fragment>\r\n                            );\r\n                        })\r\n                    }\r\n                </ul>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default withRouterInnerRef(connect(mapStateToProps, mapDispatchToProps)(Navigator));\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Header\\menuApp.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\CustomScrollbars.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\reducers\\appReducer.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\reducers\\userReducer.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\UserManage.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\actions\\index.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\KeyCodeUtils.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\LanguageUtils.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\constant.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\CommonUtils.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\ToastUtil.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\actions\\userActions.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\actions\\appActions.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\services\\index.js",[],["430","431"],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\services\\userService.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\axios.js",["432"],"import axios from 'axios';\r\n\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: process.env.REACT_APP_BACKEND_URL,\r\n    // withCredentials: true\r\n});\r\n\r\n\r\ninstance.interceptors.response.use(\r\n    (response) => {\r\n        // Thrown error for request with OK status code\r\n        const { data } = response;\r\n        return response.data;\r\n\r\n    }\r\n);\r\n\r\nexport default instance;\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\config.js",["433"],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\ModalUser.js",["434"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './UserManage.scss';\r\nimport { emitter } from '../../utils/emitter';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nclass ModalUser extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: ' ',\r\n            address: ''\r\n        }\r\n        this.listenToEmitter();\r\n    }\r\n    listenToEmitter() {\r\n        emitter.on('EVENT_CLEAR_MODAL_DATA', () => {\r\n            this.setState({\r\n                email: '',\r\n                password: '',\r\n                firstName: '',\r\n                lastName: ' ',\r\n                address: ''\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n    toggle = () => {\r\n        this.props.toggleFromParent();\r\n    }\r\n    handleOnChangeInput = (event, id) => {\r\n        let copyState = { ...this.state };\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState\r\n        });\r\n    }\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrInput = ['email', 'password', 'firstName', 'lastName', 'address'];\r\n        for (let i = 0; i < arrInput.length; i++) {\r\n            if (!this.state[arrInput[i]]) {\r\n                isValid = false;\r\n                alert('Missing parameter: ' + arrInput[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    }\r\n    handleAddNewUser = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === true) {\r\n            //gọi api để tạo modal\r\n            this.props.createNewUser(this.state, 'DONE!');\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal\r\n                isOpen={this.props.isOpen}\r\n                toggle={() => { this.toggle() }}\r\n                className={'modal-user-container'}\r\n                size=\"lg\">\r\n                <ModalHeader toggle={() => { this.toggle() }}>ADD NEW USER:</ModalHeader>\r\n                <ModalBody>\r\n\r\n                    <div className=\"modal-user-body\">\r\n                        <div className=\"input-container \">\r\n                            <label>Email</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"email\") }}\r\n                                value={this.state.email}></input>\r\n                        </div>\r\n                        <div className=\"input-container \">\r\n                            <label>Password</label>\r\n                            <input type=\"password\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"password\") }}\r\n                                value={this.state.password}\r\n                            ></input>\r\n                        </div>\r\n                        <div className=\"input-container \">\r\n                            <label>First Name</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"firstName\") }}\r\n                                value={this.state.firstName}></input>\r\n                        </div>\r\n                        <div className=\"input-container \">\r\n                            <label>Last Name</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"lastName\") }}\r\n                                value={this.state.lastName}></input>\r\n                        </div>\r\n                        <div className=\"input-container max-width-input\">\r\n                            <label>Address</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"address\") }}\r\n                                value={this.state.address}></input>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" className=\"px-3\" onClick={() => { this.handleAddNewUser() }}>Add new user</Button>\r\n                    <Button color=\"secondary\" className=\"px-3\" onClick={() => { this.toggle() }}>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalUser);\r\n\r\n\r\n\r\n\r\n",["435","436"],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\emitter.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\ModalEditUser.js",["437","438"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './UserManage.scss';\r\nimport { emitter } from '../../utils/emitter';\r\nimport _ from 'lodash';\r\n\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nclass ModalEditUser extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: '',\r\n            email: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: ' ',\r\n            address: ''\r\n        }\r\n\r\n    }\r\n    listenToEmitter() {\r\n        emitter.on('EVENT_CLEAR_MODAL_DATA', () => {\r\n            this.setState({\r\n                id: '',\r\n                email: '',\r\n                password: '',\r\n                firstName: '',\r\n                lastName: ' ',\r\n                address: ''\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        let user = this.props.currentUser;\r\n        if (user && !_.isEmpty(user)) {\r\n            {\r\n                this.setState({\r\n                    id: user.id,\r\n                    email: user.email,\r\n                    password: 'hardcode',\r\n                    firstName: user.firstName,\r\n                    lastName: user.lastName,\r\n                    address: user.address\r\n                })\r\n            }\r\n        }\r\n    }\r\n    toggle = () => {\r\n        this.props.toggleFromParent();\r\n    }\r\n    handleOnChangeInput = (event, id) => {\r\n        let copyState = { ...this.state };\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState\r\n        });\r\n    }\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrInput = ['email', 'password', 'firstName', 'lastName', 'address'];\r\n        for (let i = 0; i < arrInput.length; i++) {\r\n            if (!this.state[arrInput[i]]) {\r\n                isValid = false;\r\n                alert('Missing parameter: ' + arrInput[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    }\r\n    handleSaveUser = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === true) {\r\n            //gọi api để tạo modal\r\n            this.props.editUser(this.state);\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal\r\n                isOpen={this.props.isOpen}\r\n                toggle={() => { this.toggle() }}\r\n                className={'modal-user-container'}\r\n                size=\"lg\">\r\n                <ModalHeader toggle={() => { this.toggle() }}>EDIT USER:</ModalHeader>\r\n                <ModalBody>\r\n\r\n                    <div className=\"modal-user-body\">\r\n                        <div className=\"input-container \">\r\n                            <label>Email</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"email\") }}\r\n                                value={this.state.email}\r\n                                disabled>\r\n                            </input>\r\n                        </div>\r\n                        <div className=\"input-container \">\r\n                            <label>Password</label>\r\n                            <input type=\"password\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"password\") }}\r\n                                value={this.state.password}\r\n                                disabled\r\n                            ></input>\r\n                        </div>\r\n                        <div className=\"input-container \">\r\n                            <label>First Name</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"firstName\") }}\r\n                                value={this.state.firstName}></input>\r\n                        </div>\r\n                        <div className=\"input-container \">\r\n                            <label>Last Name</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"lastName\") }}\r\n                                value={this.state.lastName}></input>\r\n                        </div>\r\n                        <div className=\"input-container max-width-input\">\r\n                            <label>Address</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"address\") }}\r\n                                value={this.state.address}></input>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" className=\"px-3\" onClick={() => { this.handleSaveUser() }}>Save Changes</Button>\r\n                    <Button color=\"secondary\" className=\"px-3\" onClick={() => { this.toggle() }}>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalEditUser);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\HomePage.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\HomeHeader.js",["439","440","441"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './HomeHeader.scss';\r\nimport { LANGUAGES } from '../../utils';\r\nimport * as actions from \"../../store/actions\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { withRouter } from 'react-router';\r\nimport logo from '../../assets/seed.jpg';\r\nimport './reponsive-header.scss';\r\nclass HomeHeader extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { activeMenu: false };\r\n        this.changeActiveMenu = this.changeActiveMenu.bind(this);\r\n    }\r\n    changeLanguage = (language) => {\r\n        this.props.changeLanguageAppRedux(language);\r\n    }\r\n    returnToHome = () => {\r\n        if (this.props.history) {\r\n            this.props.history.push(`/home`)\r\n        }\r\n    }\r\n    goToLogin = () => {\r\n        if (this.props.history) {\r\n            this.props.history.push(`/login`)\r\n        }\r\n    }\r\ngoToClinic = () => {\r\n    const element = document.getElementById(\"clinic\");\r\n    element.scrollIntoView({ behavior: 'smooth' });\r\n}\r\ngoToSpecialty = () => {\r\n    const element = document.getElementById(\"specialty\");\r\n    element.scrollIntoView({ behavior: 'smooth' });\r\n}\r\ngoToTopDoctor=() => {\r\n    const element = document.getElementById(\"top-doctor\");\r\n    element.scrollIntoView({ behavior: 'smooth' });\r\n}\r\ngoToHandBook = ()=> {\r\n    const element = document.getElementById(\"handbook\");\r\n    element.scrollIntoView({ behavior: 'smooth' });\r\n}\r\n    changeActiveMenu = () => {\r\n        this.setState({\r\n            activeMenu: !this.state.activeMenu\r\n        });\r\n    }\r\n    componentDidMount() {\r\n        let { userInfo } = this.props;\r\n       \r\n    }\r\n    render() {\r\n        let language = this.props.language;\r\n        console.log(\"check language: \", language);\r\n        const {  userInfo } = this.props;\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <div className={this.state.activeMenu == false ? 'left_menu' : 'left_menu active_menu'}>\r\n                    <div className='overlay' onClick={this.changeActiveMenu}></div>\r\n                    \r\n                    <div className='container main-content'>\r\n                       \r\n                        <div className='menu__item' onClick={() => this.goToSpecialty()}>\r\n                           \r\n                                <div className='pointer'><b><FormattedMessage id=\"homeheader.speciality\" /></b></div>\r\n                                <div className=\"sub-title\"> <FormattedMessage id=\"homeheader.select-speciality\" /></div>\r\n                            </div>\r\n                        <div className='menu__item' onClick={() => this.goToClinic()}>\r\n                          \r\n                                <div className='pointer'><b><FormattedMessage id=\"homeheader.health-facility\" /></b></div>\r\n                                <div className=\"sub-title\"> <FormattedMessage id=\"homeheader.select-room\" /></div>\r\n                            </div>\r\n                        <div className='menu__item' onClick={() => this.goToTopDoctor()}>\r\n                           \r\n                            <div className='pointer'><b><FormattedMessage id=\"homeheader.doctor\" /></b></div>\r\n                            <div className=\"sub-title\"> <FormattedMessage id=\"homeheader.select-doctor\" /></div>\r\n                        </div>\r\n                        <div className='menu__item' onClick={() => this.goToHandBook()}>\r\n                          \r\n                            <div className='pointer'><b><FormattedMessage id=\"homeheader.handbook\" /></b></div>\r\n                            <div className=\"sub-title\"> <FormattedMessage id=\"homeheader.solution\" /></div>\r\n                        </div>\r\n                        <div className=''>\r\n                            <div className='menu__item pointer' onClick={() => this.goToLogin()}>\r\n                                <FormattedMessage id=\"homeheader.manage-account\"></FormattedMessage>\r\n                               \r\n                                {userInfo && userInfo.firstName && userInfo.lastName ? ' ' + userInfo.firstName + ' ' + userInfo.lastName : ' '} !\r\n                            </div>\r\n                         \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='w-ful bg-white'>\r\n                    <div className='container p-0  mx-auto'>\r\n                        <div className='row p-0 m-0'>\r\n                            <div className='col-12 p-0 py-2'>\r\n                                <div className='d-flex justify-content-between align-items-center menu__header'>\r\n                                    <div className='menu__item logo'>\r\n                                        <i className=\"fa-solid fa-bars-staggered\" onClick={this.changeActiveMenu} /><img className=\"header-logo\" src={logo} onClick={() => this.returnToHome()}></img>\r\n                                    </div>\r\n                                    <div className='menu__item hide__item ' onClick={() => this.goToSpecialty()}>\r\n                                        <div><b><FormattedMessage id=\"homeheader.speciality\" /></b></div>\r\n                                        <div className=\"sub-title\"> <FormattedMessage id=\"homeheader.select-speciality\" /></div>\r\n                                    </div>\r\n                                    <div className='menu__item hide__item' onClick={() => this.goToClinic()}>\r\n                                        <div><b><FormattedMessage id=\"homeheader.health-facility\" /></b></div>\r\n                                        <div className=\"sub-title\"> <FormattedMessage id=\"homeheader.select-room\" /></div>\r\n                                    </div>\r\n                                    <div className='menu__item hide__item' onClick={() => this.goToTopDoctor()}>\r\n                                        <div><b><FormattedMessage id=\"homeheader.doctor\" /></b></div>\r\n                                        <div className=\"sub-title\"> <FormattedMessage id=\"homeheader.select-doctor\" /></div>\r\n                                    </div>\r\n                                    <div className='menu__item hide__item' onClick={() => this.goToHandBook()}>\r\n                                        <div><b><FormattedMessage id=\"homeheader.handbook\" /></b></div>\r\n                                        <div className=\"sub-title\"> <FormattedMessage id=\"homeheader.solution\" /></div>\r\n                                    </div>\r\n                                    <div className='d-flex justify-content-between align-items-center menu__sup'>\r\n                                        <div className='menu__item hide__576' onClick={() => this.goToLogin()}>\r\n                                             <FormattedMessage id=\"homeheader.manage-account\"></FormattedMessage>\r\n                                            {userInfo && userInfo.firstName && userInfo.lastName ? ' ' + userInfo.firstName + ' ' + userInfo.lastName : ' '} !\r\n                                        </div>\r\n                                        <div className='menu__item '>\r\n                                            <div className={language === LANGUAGES.VI ? 'language-vi active' : 'language-vi'}>\r\n                                                <span onClick={() => this.changeLanguage(LANGUAGES.VI)}>VN</span>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className='menu__item'>\r\n                                            <div className={language === LANGUAGES.EN ? 'language-en active' : 'language-en'}>\r\n                                                <span onClick={() => this.changeLanguage(LANGUAGES.EN)}>EN\r\n                                                </span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                    <div className=\"home-header-banner\">\r\n                        <div className=\"content-up\">\r\n                            <div className=\"title1\"><FormattedMessage id=\"banner.title1\" /></div>\r\n                            <div className=\"title2\"><FormattedMessage id=\"banner.title2\" /></div> \r\n                        </div>\r\n                    </div>\r\n            </React.Fragment>\r\n\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n        userInfo: state.user.userInfo\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        processLogout: () => dispatch(actions.processLogout()),\r\n        changeLanguageAppRedux: (language) => dispatch(actions.changeLanguageApp(language)),\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(HomeHeader));","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\Section\\Specialty.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\Section\\MedicalFacility.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\Section\\OutStandingDoctor.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\Section\\HandBook.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\Section\\About.js",[],["442","443"],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\HomeFooter.js",["444"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport './HomeFooter.scss';\r\nimport logo from '../../assets/logovsh.png';\r\n\r\nclass HomeFooter extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"section-share home-footer h-auto bg-white w-full\">\r\n                    <div className='d-flex justify-content-between main__footer max-1300 mx-auto'>\r\n                        <div className='text-left ft_1'>\r\n                            <div className='logo'>\r\n                                <img className=\"header-logo\" src={logo} onClick={() => this.returnToHome()}></img>\r\n                            </div>\r\n                            <div className='py-2'>\r\n                                <b><FormattedMessage id=\"home-footer.iab\" /></b>\r\n                            </div>\r\n                            <div className='pb-2'>\r\n                                <FormattedMessage id=\"home-footer.address\" />\r\n                            </div>\r\n                            <div className='pb-2'>\r\n                                <FormattedMessage id=\"home-footer.bussiness\" />\r\n                            </div>\r\n                        </div>\r\n                        {/* <div className='text-left ft_2'>\r\n                            <p className='text-primary'>Liên hệ hợp tác</p>\r\n                            <p className='text-primary'>Gói chuyển đổi số doanh nghiệp</p>\r\n                            <p className='text-primary'>Tuyển dụng</p>\r\n                            <p className='text-primary'>Câu hỏi thường gặp</p>\r\n                            <p className='text-primary'>Điều khoản sử dụng</p>\r\n                            <p className='text-primary'>Chính sách Bảo mật</p>\r\n                            <p className='text-primary'>Quy chế hoạt động</p>\r\n                        </div> */}\r\n                        <div className='ft_3'>\r\n                            <div className='text-left'>\r\n                                <p className='mb-1'><b><FormattedMessage id=\"home-footer.co-operation\" /></b></p>\r\n                                <p><FormattedMessage id=\"home-footer.work-together\" /></p>\r\n                            </div>\r\n                            <div className='text-left'>\r\n                                <p className='mb-1'><b><FormattedMessage id=\"home-footer.catch-trend\" /></b></p>\r\n                                <p><FormattedMessage id=\"home-footer.treatment-trend\" /></p>\r\n                            </div>\r\n                            <div className='text-left'>\r\n                                <p className='mb-1'><b><FormattedMessage id=\"home-footer.customer\" /></b></p>\r\n                                <p><FormattedMessage id=\"home-footer.priority\" /></p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='max-1300 mx-auto text-center my-4'>\r\n                    <p className='mb-0 copy'>&copy; 2022 Team Tạ Bảo Phúc-<FormattedMessage id=\"home-footer.more-info\" />\r\n                        <a href=\"https://www.youtube.com/c/H%E1%BB%8FiD%C3%A2nIT\">&#8594;Click here &#8592;\r\n                        </a>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeFooter);","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\UserRedux.js",["445"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { LANGUAGES, CRUD_ACTIONS, CommonUtils } from '../../utils';\r\nimport './UserRedux.scss';\r\nimport TableManageUser from './TableManageUser';\r\nimport * as actions from '../../store/actions';\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css'; // This only needs to be imported once in your app\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\nclass UserRedux extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      genderArr: [],\r\n      positionArr: [],\r\n      roleIdArr: [],\r\n      isOpen: false,\r\n      previewImgURL: '',\r\n      errors: [],\r\n      email: '',\r\n      password: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      phoneNumber: '',\r\n      address: '',\r\n      gender: '',\r\n      position: '',\r\n      role: '',\r\n      avatar: '',\r\n      action: '',\r\n      userEditId: '',\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n\r\n    this.props.getGenderStart();\r\n    this.props.getPositionStart();\r\n    this.props.getRoleIdStart();\r\n  }\r\n  // isValidEmail = (email) => {\r\n  //   return /\\S+@\\S+\\.\\S+/.test(email);\r\n  // }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.genderRedux !== this.props.genderRedux\r\n\r\n    ) {\r\n      let arrGenders = this.props.genderRedux;\r\n      this.setState({\r\n        genderArr: arrGenders,\r\n        gender: arrGenders && arrGenders.length ? arrGenders[0].keyMap : ''\r\n\r\n      })\r\n    }\r\n    if (prevProps.positionRedux !== this.props.positionRedux) {\r\n      let arrPositions = this.props.positionRedux;\r\n      this.setState({\r\n        positionArr: arrPositions,\r\n        position: arrPositions && arrPositions.length > 0 ? arrPositions[0].keyMap : '',\r\n      })\r\n    }\r\n    if (prevProps.roleIdRedux !== this.props.roleIdRedux) {\r\n      let arrRoles = this.props.roleIdRedux;\r\n      this.setState({\r\n        roleIdArr: arrRoles,\r\n        role: arrRoles && arrRoles.length > 0 ? arrRoles[0].keyMap : ''\r\n      })\r\n    }\r\n    if (prevProps.listUsers !== this.props.listUsers) {\r\n      let arrGenders = this.props.genderRedux;\r\n      let arrRoles = this.props.roleIdRedux;\r\n      let arrPositions = this.props.positionRedux;\r\n      this.setState({\r\n        email: '',\r\n        password: '',\r\n        firstName: '',\r\n        lastName: '',\r\n        phoneNumber: '',\r\n        address: '',\r\n        gender: arrGenders && arrGenders.length > 0 ? arrGenders[0].keyMap : '',\r\n        position: arrPositions && arrPositions.length > 0 ? arrPositions[0].keyMap : '',\r\n        role: arrRoles && arrRoles.length > 0 ? arrRoles[0].keyMap : '',\r\n        avatar: '',\r\n        action: CRUD_ACTIONS.CREATE,\r\n        previewImgURL: ''\r\n      })\r\n    }\r\n  }\r\n  handleOnChangeImage = async (event) => {\r\n    let data = event.target.files;\r\n    let file = data[0];\r\n    if (file) {\r\n      let base64 = await CommonUtils.getBase64(file);\r\n      let objectUrl = URL.createObjectURL(file);\r\n      this.setState({\r\n        previewImgURL: objectUrl,\r\n        avatar: base64,\r\n      })\r\n    }\r\n  }\r\n  openPreviewImage = () => {\r\n    if (!this.state.previewImgURL) return;\r\n    this.setState({\r\n      isOpen: true\r\n    })\r\n  }\r\n  handleSubmit() {\r\n\r\n\r\n    //VALIDATE\r\n    var errors = [];\r\n    if (this.state.firstName === \"\") {\r\n      toast.error(\"Invalid first name input\");\r\n      errors.push(\"firstName\");\r\n    }\r\n    if (this.state.lastName === \"\") {\r\n      toast.error(\"Invalid last name input\");\r\n      errors.push(\"lastName\");\r\n    }\r\n    if (this.state.password === \"\") {\r\n      toast.error(\"Invalid password input\");\r\n      errors.push(\"password\");\r\n    }\r\n    if (this.state.phoneNumber === \"\" && this.state.phoneNumber.length > 11) {\r\n      toast.error(\"Invalid phone number input\");\r\n      errors.push(\"phoneNumber\");\r\n    }\r\n    if (this.state.address === \"\") {\r\n      toast.error(\"Invalid address input\");\r\n      errors.push(\"address\");\r\n    }\r\n\r\n    //email\r\n    const expression = /\\S+@\\S+\\.\\S+/;\r\n    var validEmail = expression.test(String(this.state.email).toLowerCase());\r\n\r\n    if (!validEmail) {\r\n      toast.error(\"Invalid email\");\r\n      errors.push(\"email\");\r\n    }\r\n\r\n    this.setState({\r\n      errors: errors\r\n    });\r\n\r\n    for (let i = 0; i < errors.length; i++) {\r\n      if (i > 0) {\r\n        toast.error(\"Error! Please enter valid \")\r\n        break;\r\n      }\r\n    }\r\n    return errors.length;\r\n  }\r\n  handleSaveUser = () => {\r\n    let errors = [];\r\n    \r\n    errors.length = this.handleSubmit();\r\n    if (errors.length > 0) return;\r\n    let { action } = this.state;\r\n    if (action === CRUD_ACTIONS.CREATE) {\r\n      this.props.createNewUser({\r\n        email: this.state.email,\r\n        password: this.state.password,\r\n        firstName: this.state.firstName,\r\n        lastName: this.state.lastName,\r\n        address: this.state.address,\r\n        phoneNumber: this.state.phoneNumber,\r\n        gender: this.state.gender,\r\n        roleId: this.state.role,\r\n        positionId: this.state.position,\r\n        avatar: this.state.avatar\r\n      })\r\n    }\r\n\r\n   \r\n   \r\n    if (action === CRUD_ACTIONS.EDIT) {\r\n      let errors = [];\r\n      errors.length = this.handleSubmit();\r\n      if (errors.length > 0) return;\r\n      this.props.editUserRedux({\r\n        id: this.state.userEditId,\r\n        email: this.state.email,\r\n        password: this.state.password,\r\n        firstName: this.state.firstName,\r\n        lastName: this.state.lastName,\r\n        address: this.state.address,\r\n        phoneNumber: this.state.phoneNumber,\r\n        gender: this.state.gender,\r\n        roleId: this.state.role,\r\n        positionId: this.state.position,\r\n        avatar: this.state.avatar\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n  // checkValidateInput = () => {\r\n  //   let isValid = true;\r\n  //   let arrCheck = ['email', 'password', 'firstName', 'lastName', 'address', 'phoneNumber']\r\n  //   for (let i = 0; i < arrCheck.length; i++) {\r\n  //     if (!this.state[arrCheck[i]]) {\r\n  //       isValid = false;\r\n  //       alert('This input is required: ' + arrCheck[i]);\r\n  //       break;\r\n  //     }\r\n  //   }\r\n  //   return isValid;\r\n  // }\r\n  onChangeInput = (event, id) => {\r\n    let copyState = { ...this.state }\r\n    copyState[id] = event.target.value;\r\n    this.setState({\r\n      ...copyState,\r\n    })\r\n  }\r\n\r\n  handleEditUserFromParent = (user) => {\r\n    let imageBase64 = '';\r\n    if (user.image) {\r\n      imageBase64 = new Buffer(user.image, 'base64').toString('binary');\r\n      //Buffer cung cấp cách xử lý dữ liệu dạng nhị phân, \r\n      //câu lệnh trên xử lý dữ liệu BLOB (được mã hóa là base64) sang dữ liệu binary \r\n    }\r\n    this.setState({\r\n      email: user.email,\r\n      password: '????????????????????????????????????????',\r\n      firstName: user.firstName,\r\n      lastName: user.lastName,\r\n      phoneNumber: user.phoneNumber,\r\n      address: user.address,\r\n      gender: user.gender,\r\n      role: user.roleId,\r\n      position: user.positionId,\r\n      avatar: '',\r\n      previewImgURL: imageBase64,\r\n      action: CRUD_ACTIONS.EDIT,\r\n      userEditId: user.id\r\n    })\r\n  }\r\n  render() {\r\n    let genders = this.state.genderArr;\r\n    let positions = this.state.positionArr;\r\n    let roleIds = this.state.roleIdArr;\r\n    let isGetGenders = this.props.isLoadingGenders;\r\n    let language = this.props.language;\r\n    let { email, password, firstName, lastName, phoneNumber, address, gender, position, role\r\n      , avatar } = this.state;\r\n    //đây là cách viết của ES7\r\n    return (\r\n\r\n      <div className=\"user-redux-container\" >\r\n        <div className=\"title\">\r\n          <FormattedMessage id=\"create-user.title\" />\r\n        </div>\r\n        <div className=\"user-redux-body\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                {isGetGenders === true ? 'Loading...' : ''}\r\n              </div>\r\n              <div className=\"col-md-3 mb-3\">\r\n                <label htmlFor=\"validationServerUsername\"> <FormattedMessage id=\"create-user.email\" /></label>\r\n                <div className=\"input-group\">\r\n                  <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text\" id=\"inputGroupPrepend3\">@</span>\r\n                  </div>\r\n                  <input type=\"email\" className=\"form-control\" id=\"validationServerUsername\" placeholder=\"...\" aria-describedby=\"inputGroupPrepend3\" required\r\n                    value={email}\r\n                    onChange={(event) => { this.onChangeInput(event, 'email') }}\r\n                    disabled={this.state.action === CRUD_ACTIONS.EDIT ? true : false} />\r\n\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-3 mb-3\">\r\n                <label htmlFor=\"validationServerUsername\"> <FormattedMessage id=\"create-user.password\" /></label>\r\n                <div className=\"input-group\">\r\n\r\n                  <input type=\"password\" className=\"form-control \" id=\"validationServerUsername\" placeholder=\"...\"\r\n                    aria-describedby=\"inputGroupPrepend3\" required\r\n                    value={password}\r\n                    onChange={(event) => { this.onChangeInput(event, 'password') }}\r\n                    disabled={this.state.action === CRUD_ACTIONS.EDIT ? true : false} />\r\n\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-3 mb-3\">\r\n                <label htmlFor=\"validationServer01\"> <FormattedMessage id=\"create-user.firstname\" /></label>\r\n                <input type=\"text\" className=\"form-control \" id=\"validationServer01\" placeholder=\"...\" required\r\n                  value={firstName}\r\n                  onChange={(event) => { this.onChangeInput(event, 'firstName') }} />\r\n\r\n              </div>\r\n              <div className=\"col-md-3 mb-3\">\r\n                <label htmlFor=\"validationServer02\"> <FormattedMessage id=\"create-user.lastname\" /></label>\r\n                <input type=\"text\" className=\"form-control \" id=\"validationServer02\" placeholder=\"...\" required\r\n                  value={lastName}\r\n                  onChange={(event) => { this.onChangeInput(event, 'lastName') }} />\r\n\r\n              </div>\r\n\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"form-group col-md-3 mb-3\">\r\n                <label htmlFor=\"validationServerUsername\"> <FormattedMessage id=\"create-user.roleid\" /></label>\r\n                <select id=\"inputState\" className=\"form-control\"\r\n                  //thêm dữ liệu vào option chọn roleId qua valueEn, valueVi đã lấy được từ redux...\r\n                  onChange={(event) => { this.onChangeInput(event, 'role') }}\r\n                  value={role}>\r\n                  {roleIds && roleIds.length > 0 && roleIds.map((item, index) => {\r\n                    return (\r\n                      <option key={index} value={item.keyMap}>\r\n                        {language === LANGUAGES.VI ? item.valueVi : item.valueEn}</option>\r\n                    )\r\n                  })\r\n                  }\r\n                </select>\r\n              </div>\r\n              <div className=\"form-group col-md-3 mb-3\">\r\n                <label htmlFor=\"validationServerUsername\"> <FormattedMessage id=\"create-user.position\" /></label>\r\n\r\n                <select id=\"inputState\" className=\"form-control\"\r\n                  onChange={(event) => { this.onChangeInput(event, 'position') }}\r\n                  value={position}>\r\n                  {positions && positions.length > 0 && positions.map((item, index) => {\r\n                    return (\r\n                      <option key={index} value={item.keyMap}>\r\n                        {language === LANGUAGES.VI ? item.valueVi : item.valueEn}</option>\r\n                    )\r\n                  })\r\n                  }\r\n                </select>\r\n\r\n              </div>\r\n              <div className=\"form-group col-md-3 mb-3\">\r\n                <label htmlFor=\"validationServer01\"> <FormattedMessage id=\"create-user.gender\" /></label>\r\n\r\n                <select id=\"inputState\" className=\"form-control\"\r\n                  onChange={(event) => { this.onChangeInput(event, 'gender') }}\r\n                  value={gender}>\r\n                  {genders && genders.length > 0 && genders.map((item, index) => {\r\n                    return (\r\n                      <option key={index} value={item.keyMap}>\r\n                        {language === LANGUAGES.VI ? item.valueVi : item.valueEn}</option>\r\n                    )\r\n                  })\r\n                  }\r\n\r\n                </select>\r\n\r\n              </div>\r\n              <div className=\"col-md-3 mb-3\">\r\n                <label htmlFor=\"validationServer04\"> <FormattedMessage id=\"create-user.phonenumber\" /></label>\r\n                <input type=\"number\" maxLength=\"11\" className=\"form-control \" id=\"validationServer04\" placeholder=\"...\" required\r\n                  value={phoneNumber}\r\n                  onChange={(event) => { this.onChangeInput(event, 'phoneNumber') }}\r\n                  disabled={this.state.action === CRUD_ACTIONS.EDIT ? true : false} />\r\n\r\n              </div>\r\n\r\n\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-9 mb-3\">\r\n                <label htmlFor=\"validationServer03\"> <FormattedMessage id=\"create-user.address\" /></label>\r\n                <input type=\"text\" className=\"form-control \" id=\"validationServer03\" placeholder=\"...\" required\r\n                  value={address}\r\n                  onChange={(event) => { this.onChangeInput(event, 'address') }} />\r\n\r\n              </div>\r\n              <div className=\"col-md-3 mb-3\">\r\n                <label htmlFor=\"validationServer02\"> <FormattedMessage id=\"create-user.image\" /></label>\r\n                <div className=\"preview-img-container\">\r\n                  <input id=\"previewImg\" type=\"file\" hidden\r\n                    onChange={(event) => this.handleOnChangeImage(event)} />\r\n                  <label className=\"label-upload\" htmlFor=\"previewImg\">Upload<i className=\"fa-solid fa-upload\"></i></label>\r\n                  <div className=\"preview-image\" style={{ backgroundImage: `url(${this.state.previewImgURL})` }}\r\n                    onClick={() => this.openPreviewImage()}\r\n                  >\r\n\r\n                  </div>\r\n                </div>\r\n\r\n\r\n              </div>\r\n\r\n            </div>\r\n\r\n\r\n            <div className=\"form-group\">\r\n              <div className=\"form-check\">\r\n                <input className=\"form-check-input is-invalid\" type=\"checkbox\" value=\"\" id=\"invalidCheck3\" required />\r\n                <label className=\"form-check-label\" htmlFor=\"invalidCheck3\">\r\n                  <FormattedMessage id=\"create-user.agree\" />\r\n                </label>\r\n                <div className=\"invalid-feedback\">\r\n                  <FormattedMessage id=\"create-user.confirm\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-12 my-3\">\r\n              <button className={this.state.action === CRUD_ACTIONS.EDIT ? \"btn btn-warning\" : \"btn btn-primary\"} type=\"submit\"\r\n                onClick={() => this.handleSaveUser()}>\r\n                {this.state.action === CRUD_ACTIONS.EDIT ?\r\n                  <FormattedMessage id=\"manage-user.edit\"></FormattedMessage>\r\n                  : <FormattedMessage id=\"manage-user.save\"></FormattedMessage>}\r\n                {/* <FormattedMessage id=\"create-user.submit\"/> */}\r\n              </button>\r\n            </div>\r\n            <div className=\"col-12 mb-5\">\r\n              <TableManageUser\r\n                handleEditUserFromParentKey={this.handleEditUserFromParent}\r\n                action={this.state.action} />\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n        {this.state.isOpen === true &&\r\n          <Lightbox\r\n            mainSrc={this.state.previewImgURL}\r\n            onCloseRequest={() => this.setState({ isOpen: false })} />}\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    language: state.app.language,\r\n    genderRedux: state.admin.genders,\r\n    positionRedux: state.admin.positions,\r\n    roleIdRedux: state.admin.roleIds,\r\n    isLoadingGenders: state.admin.loadingGenders,\r\n    listUsers: state.admin.users\r\n  };\r\n};\r\n//những cái biến state ở trên hàm mapStateToProps được khai báo trùng với các biến ở trên file này, không cần khai báo ở file\r\n//khác và có thể sử dụng ở file khác, vế trái là ta tự khai báo\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getGenderStart: () => dispatch(actions.fetchGenderStart()),\r\n    getPositionStart: () => dispatch(actions.fetchPositionStart()),\r\n    getRoleIdStart: () => dispatch(actions.fetchRoleIdStart()),\r\n    createNewUser: (data) => dispatch(actions.createNewUser(data)),\r\n    fetchUserRedux: () => dispatch(actions.fetchAllUsersStart()),\r\n    editUserRedux: (data) => dispatch(actions.editUser(data))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserRedux);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\actions\\adminActions.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\reducers\\adminReducer.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\TableManageUser.js",["446"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './TableManageUser.scss';\r\nimport * as actions from \"../../store/actions\";\r\nimport MarkdownIt from 'markdown-it';\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\nconst mdParser = new MarkdownIt();\r\n\r\n\r\n// nếu muốn import 1 function thì ta dùng dấu ngoặc nhọn\r\nclass TableManageUser extends Component {\r\n    // PROPS stands for properties and is being used for passing data from one component to another.\r\n    // But the important part here is that data with props are being passed in a uni-directional flow. ( one way from parent to child)\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            usersRedux: []\r\n        }\r\n    }\r\n    //để lưu giá trị của 1 biến components, ta dùng state\r\n    //Component là một block code độc lập để phân chia các UI (giao diện người dùng) thành các phân nhỏ riêng lẻ để dễ dàng quản lý và tái sử dụng.\r\n    componentDidMount() {\r\n        this.props.fetchUserRedux();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.listUsers !== this.props.listUsers) {\r\n            this.setState({\r\n                usersRedux: this.props.listUsers,\r\n            })\r\n        }\r\n    }\r\n\r\n    handleDeleteUser = (user) => {\r\n        this.props.deleteUserRedux(user.id);\r\n    }\r\n\r\n    handleEditUser = (user) => {\r\n        this.props.handleEditUserFromParentKey(user)\r\n    }\r\n    render() {\r\n\r\n\r\n        //khi muốn render ra 1 thứ gì đó trong react, chúng ta phải có hàm return, và trong đó bắt buộc là 1 khối\r\n        let arrUsers = this.state.usersRedux;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"users-container\">\r\n\r\n\r\n\r\n\r\n                    <div className=\"users-table mt-3 mx-1\">\r\n                        <div className=\"title text-center\">Manage Users</div>\r\n                        <table id=\"TableManageUser\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>Email</th>\r\n                                    <th><FormattedMessage id=\"create-user.firstname\" /></th>\r\n                                    <th><FormattedMessage id=\"create-user.lastname\" /></th>\r\n                                    <th><FormattedMessage id=\"menu.admin.address\" /></th>\r\n                                    <th><FormattedMessage id=\"create-user.roleid\" /></th>\r\n                                    <th>Actions</th>\r\n                                </tr>\r\n                                {arrUsers && arrUsers.length > 0 && arrUsers.map((item, index) => {\r\n                                    // để duyệt 1 vòng lặp, ta có thể dùng function map(), bắt buộc phải return ra 1 thứ gì đó\r\n                                    // thì function map() mới hoạt động được\r\n                                    return (\r\n                                        <tr key={index}>\r\n                                            <td>{item.email}</td>\r\n                                            <td>{item.firstName}</td>\r\n                                            <td>{item.lastName}</td>\r\n                                            <td>{item.address}</td>\r\n                                            <td>{item.roleId}</td>\r\n                                            <td>\r\n                                                <button className=\"btn-edit\"\r\n                                                    onClick={() => this.handleEditUser(item)}><i className=\"fa-solid fa-pencil\"></i></button>\r\n                                                <button className=\"btn-delete\" onClick={() => this.handleDeleteUser(item)}><i className=\"fa-solid fa-trash\"></i></button>\r\n                                                {/* item là 1 object lưu trữ tất cả thông tin của người dùng */}\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                            </tbody>\r\n\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n               \r\n            </React.Fragment>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        listUsers: state.admin.users\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchUserRedux: () => dispatch(actions.fetchAllUsersStart()),\r\n        deleteUserRedux: (id) => dispatch(actions.deleteUser(id)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableManageUser);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\ManageDoctor.js",["447","448","449","450","451"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { CRUD_ACTIONS, LANGUAGES } from '../../utils';\r\nimport './ManageDoctor.scss';\r\nimport * as actions from \"../../store/actions\";\r\n//import actions ở trên để lấy data\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\nimport Select from 'react-select';\r\nimport { getDetailInforDoctor } from '../../services/userService';\r\nimport { toast } from 'react-toastify';\r\nconst mdParser = new MarkdownIt();\r\n// nếu muốn import 1 function thì ta dùng dấu ngoặc nhọn\r\nclass ManageDoctor extends Component {\r\n    // PROPS stands for properties and is being used for passing data from one component to another.\r\n    // But the important part here is that data with props are being passed in a uni-directional flow. ( one way from parent to child)\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //Lưu vào bảng markdown\r\n            contentMarkdown: '',\r\n            contentHTML: '',\r\n            //tạo hai biến content này để lưu giá trị kiểu text và lưu gia trị kiểu html\r\n            selectedDoctor: '',\r\n            description: '',\r\n            listDoctors: [],\r\n            hasOldData: false,\r\n\r\n            //lưu vào bảng doctor_infor\r\n            listPrice: [],\r\n            listPayment: [],\r\n            listProvince: [],\r\n            listClinic: [],\r\n            listSpecialty: [],\r\n            selectedPrice: '',\r\n            selectedPayment: '',\r\n            selectProvince: '',\r\n            selectedClinic: '',\r\n            selectedSpecialty: '',\r\n            nameClinic: '',\r\n            addressClinic: '',\r\n            note: '',\r\n            clinicId: '',\r\n            specialtyId: '',\r\n            phoneNumber: '',\r\n\r\n        }\r\n    }\r\n    //để lưu giá trị của 1 biến components, ta dùng state\r\n    //Component là một block code độc lập để phân chia các UI (giao diện người dùng) thành các phân nhỏ riêng lẻ để dễ dàng quản lý và tái sử dụng.\r\n\r\n    componentDidMount() {\r\n        this.props.fetchAllDoctors()\r\n        //tất cả dữ liệu lấy được từ fetchAllDoctors, getAllRequiredDoctorInfor sẽ được ghi vào props cha, cụ thể là this.props;\r\n        this.props.getAllRequiredDoctorInfor();\r\n    }\r\n    buildDataInputSelect = (inputData, type) => {\r\n        console.log(\"check input data\", inputData)\r\n        //inputData đã được lấy từ componentDidMount(), cụ thể là this.props; \r\n        let result = [];\r\n        let { language } = this.props;\r\n        if (inputData && inputData.length > 0) {\r\n            if (type === 'USERS') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    let labelEn = `${item.lastName} ${item.firstName} `;\r\n                    let labelVi = `${item.firstName} ${item.lastName}`;\r\n                    object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                    object.value = item.id;\r\n                    result.push(object);\r\n                })\r\n            }\r\n            if (type === 'PRICE') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    let labelEn = `${item.valueEn} USD`;\r\n                    let labelVi = `${item.valueVi}`;\r\n                    object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                    object.value = item.keyMap;\r\n                    result.push(object);\r\n                })\r\n            }\r\n            if (type === 'PAYMENT' || type === 'PROVINCE') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    let labelEn = `${item.valueEn}`;\r\n                    let labelVi = ` ${item.valueVi}`;\r\n                    object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                    object.value = item.keyMap;\r\n                    result.push(object);\r\n                })\r\n            }\r\n            if (type === 'SPECIALTY') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    object.label = item.name;\r\n                    object.value = item.id;\r\n                    result.push(object);\r\n                })\r\n            }\r\n            if (type === 'CLINIC') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    object.label = item.name;\r\n                    object.value = item.id;\r\n                    result.push(object);\r\n                })\r\n            }\r\n\r\n        }\r\n        return result;\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.allDoctors !== this.props.allDoctors) {\r\n            //allDoctors đã được lấy từ file AdminReducer\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors, 'USERS')\r\n            this.setState({\r\n                listDoctors: dataSelect\r\n            })\r\n        }\r\n        if (prevProps.allRequiredDoctorInfor !== this.props.allRequiredDoctorInfor) {\r\n            let { resPayment, resPrice, resProvince, resSpecialty, resClinic } = this.props.allRequiredDoctorInfor;\r\n            let dataSelectPrice = this.buildDataInputSelect(resPrice, 'PRICE');\r\n            let dataSelectPayment = this.buildDataInputSelect(resPayment, 'PAYMENT');\r\n            let dataSelectProvince = this.buildDataInputSelect(resProvince, 'PROVINCE');\r\n            let dataSelectSpecialty = this.buildDataInputSelect(resSpecialty, 'SPECIALTY');\r\n            let dataSelectClinic = this.buildDataInputSelect(resClinic, 'CLINIC');\r\n            console.log('bao phuc check data new: ', dataSelectPrice, dataSelectPayment, dataSelectProvince,\r\n                dataSelectSpecialty, dataSelectClinic);\r\n            this.setState({\r\n                listPrice: dataSelectPrice,\r\n                listPayment: dataSelectPayment,\r\n                listProvince: dataSelectProvince,\r\n                listSpecialty: dataSelectSpecialty,\r\n                listClinic: dataSelectClinic\r\n            })\r\n        }\r\n        if (prevProps.language !== this.props.language) {\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors, 'USERS');\r\n            let { resPrice, resPayment, resProvince, resSpecialty, resClinic } = this.props.allRequiredDoctorInfor;\r\n            let dataSelectPrice = this.buildDataInputSelect(resPrice, 'PRICE');\r\n            let dataSelectPayment = this.buildDataInputSelect(resPayment, 'PAYMENT');\r\n            let dataSelectProvince = this.buildDataInputSelect(resProvince, 'PROVINCE');\r\n            let dataSelectSpecialty = this.buildDataInputSelect(resSpecialty, 'SPECIALTY');\r\n            let dataSelectClinic = this.buildDataInputSelect(resClinic, 'CLINIC');\r\n            this.setState({\r\n                listDoctors: dataSelect,\r\n                listProvince: dataSelectProvince,\r\n                listPrice: dataSelectPrice,\r\n                listPayment: dataSelectPayment,\r\n                listSpecialty: dataSelectSpecialty,\r\n                listClinic: dataSelectClinic\r\n\r\n            })\r\n\r\n        }\r\n    }\r\n    handleEditorChange = ({ html, text }) => {\r\n        this.setState({\r\n            contentMarkdown: text,\r\n            contentHTML: html,\r\n        })\r\n    }\r\n    handleSubmit() {\r\n\r\n\r\n        //VALIDATE\r\n        var errors = [];\r\n        if (this.state.contentHTML === \"\") {\r\n            toast.error(\"Invalid info content input\");\r\n            errors.push(\"contentHTML\");\r\n        }\r\n        if (this.state.contentMarkdown === \"\") {\r\n            toast.error(\"Invalid info mardown input\");\r\n            errors.push(\"contentMarkdown\");\r\n        }\r\n        if (this.state.description === \"\") {\r\n            toast.error(\"Invalid description input\");\r\n            errors.push(\"description\");\r\n        }\r\n        if (this.state.phoneNumber === \"\" && this.state.phoneNumber.length > 11) {\r\n            toast.error(\"Invalid phone number input\");\r\n            errors.push(\"phoneNumber\");\r\n        }\r\n        if (this.state.addressClinic === \"\") {\r\n            toast.error(\"Invalid address clinic input\");\r\n            errors.push(\"addressClinic\");\r\n        }\r\n        if (this.state.nameClinic === \"\") {\r\n            toast.error(\"Invalid name clinic input\");\r\n            errors.push(\"nameClinic\");\r\n        }\r\n        if (this.state.selectedDoctor === \"\") {\r\n            toast.error(\"Invalid doctor input\");\r\n            errors.push(\"selectedDoctor\");\r\n        }\r\n        if (this.state.selectedPayment === \"\") {\r\n            toast.error(\"Invalid payment input\");\r\n            errors.push(\"selectedPayment\");\r\n        }\r\n        if (this.state.selectedPrice === \"\") {\r\n            toast.error(\"Invalid price input\");\r\n            errors.push(\"selectedPrice\");\r\n        }\r\n        if (this.state.selectedSpecialty === \"\") {\r\n            toast.error(\"Invalid specialty input\");\r\n            errors.push(\"selectedSpecialty\");\r\n        }\r\n        if (this.state.selectProvince === \"\") {\r\n            toast.error(\"Invalid province input\");\r\n            errors.push(\"selectProvince\");\r\n        }\r\n        if (this.state.selectedClinic === \"\") {\r\n            toast.error(\"Invalid clinic input\");\r\n            errors.push(\"selectedClinic\");\r\n        }\r\n        //email\r\n\r\n\r\n        this.setState({\r\n            errors: errors\r\n        });\r\n\r\n        for (let i = 0; i < errors.length; i++) {\r\n            if (i > 0) {\r\n                toast.error(\"Error! Please enter valid \")\r\n                break;\r\n            }\r\n        }\r\n        return errors.length;\r\n    }\r\n    handleSaveContentMarkdown = () => {\r\n        let errors = [];\r\n\r\n        errors.length = this.handleSubmit();\r\n        if (errors.length > 0) return;\r\n        let { hasOldData } = this.state;\r\n        this.props.saveDetailDoctor({\r\n            contentHTML: this.state.contentHTML,\r\n            contentMarkdown: this.state.contentMarkdown,\r\n            description: this.state.description,\r\n            doctorId: this.state.selectedDoctor.value,\r\n            action: hasOldData === true ? CRUD_ACTIONS.EDIT : CRUD_ACTIONS.CREATE,\r\n            selectedPrice: this.state.selectedPrice.value,\r\n            selectedPayment: this.state.selectedPayment.value,\r\n            selectProvince: this.state.selectProvince.value,\r\n            nameClinic: this.state.nameClinic,\r\n            addressClinic: this.state.addressClinic,\r\n            note: this.state.note,\r\n            clinicId: this.state.selectedClinic.value,\r\n            specialtyId: this.state.selectedSpecialty.value,\r\n            phoneNumber: this.state.phoneNumber\r\n            //doctorId: this.state.selectedDoctor.value dùng để gán giá trị item.id cho doctorId rồi lưu vào db\r\n        })\r\n    }\r\n    handleChangeSelect = async (selectedDoctor) => {\r\n        this.setState({ selectedDoctor }, () =>\r\n            console.log(`Doctor selected:`, this.state.selectedDoctor)\r\n        );\r\n        let { listPayment, listPrice, listProvince, listSpecialty, listClinic } = this.state;\r\n        let res = await getDetailInforDoctor(selectedDoctor.value);\r\n        if (res && res.errCode === 0 && res.data && res.data.Markdown) {\r\n            let markdown = res.data.Markdown;\r\n            let addressClinic = '', nameClinic = '', note = '', paymentId = '',\r\n                priceId = '', provinceId = '', selectedPayment = '', selectedPrice = '',\r\n                selectProvince = '', selectedSpecialty = '', specialtyId = '',\r\n                clinicId = '', selectedClinic = '', phoneNumber = '';\r\n            if (res.data.Doctor_Infor) {\r\n                addressClinic = res.data.Doctor_Infor.addressClinic;\r\n                nameClinic = res.data.Doctor_Infor.nameClinic;\r\n                note = res.data.Doctor_Infor.note;\r\n                phoneNumber = res.data.Doctor_Infor.phoneNumber;\r\n                paymentId = res.data.Doctor_Infor.paymentId;\r\n                priceId = res.data.Doctor_Infor.priceId;\r\n                provinceId = res.data.Doctor_Infor.provinceId;\r\n                specialtyId = res.data.Doctor_Infor.specialtyId;\r\n                clinicId = res.data.Doctor_Infor.clinicId;\r\n                selectedPayment = listPayment.find(item => {\r\n                    return item && item.value === paymentId\r\n                })\r\n                selectedPrice = listPrice.find(item => {\r\n                    return item && item.value === priceId\r\n                })\r\n                selectProvince = listProvince.find(item => {\r\n                    return item && item.value === provinceId\r\n                })\r\n                selectedSpecialty = listSpecialty.find(item => {\r\n                    return item && item.value === specialtyId\r\n                })\r\n                selectedClinic = listClinic.find(item => {\r\n                    return item && item.value === clinicId\r\n                })\r\n            }\r\n            this.setState({\r\n                contentHTML: markdown.contentHTML,\r\n                contentMarkdown: markdown.contentMarkdown,\r\n                description: markdown.description,\r\n                hasOldData: true,\r\n                addressClinic: addressClinic,\r\n                nameClinic: nameClinic,\r\n                note: note,\r\n                selectedPayment: selectedPayment,\r\n                selectedPrice: selectedPrice,\r\n                selectProvince: selectProvince,\r\n                selectedSpecialty: selectedSpecialty,\r\n                selectedClinic: selectedClinic,\r\n                phoneNumber: phoneNumber,\r\n            })\r\n            //để lấy thông tin từ bảng markdown rồi in ra màn hình, ta có thể gọi api như trên, rồi dùng hàm setState\r\n        } else {\r\n            this.setState({\r\n                contentHTML: '',\r\n                contentMarkdown: '',\r\n                description: '',\r\n                hasOldData: false,\r\n                addressClinic: '',\r\n                nameClinic: '',\r\n                note: '',\r\n                selectedPayment: '',\r\n                selectedPrice: '',\r\n                selectProvince: '',\r\n                selectedSpecialty: '',\r\n                selectedClinic: '',\r\n                phoneNumber: '',\r\n            })\r\n        }\r\n\r\n    };\r\n    handleChangeSelectDoctorInfor = async (selectedDoctor, name) => {\r\n        let stateName = name.name;\r\n        let stateCopy = { ...this.state };\r\n        stateCopy[stateName] = selectedDoctor;\r\n        this.setState({\r\n            ...stateCopy\r\n        })\r\n    }\r\n    handleOnChangeText = (event, id) => {\r\n        let stateCopy = { ...this.state };\r\n        stateCopy[id] = event.target.value;\r\n        this.setState({\r\n            ...stateCopy\r\n        })\r\n    }\r\n    //thêm id vào để tái tận dụng cho các state khác nhau, chỉ việc thay id = tên state chúng ta muốn ở các component là dùng được.\r\n    render() {\r\n\r\n        let { hasOldData } = this.state;\r\n        //khi muốn render ra 1 thứ gì đó trong react, chúng ta phải có hàm return, và trong đó bắt buộc là 1 khối\r\n\r\n        return (\r\n            <div className='manage-doctor-container'>\r\n                <div className=\"users-container\">\r\n                    <div className=\"users-table mt-3 mx-1\">\r\n                        <div className=\"title text-center\">\r\n                            <FormattedMessage id=\"admin.manage-doctor.title\" />\r\n                        </div>\r\n                        <div className=\" more-info\">\r\n                            <div className=\"content-left form-group\">\r\n\r\n                                <label><FormattedMessage id=\"admin.manage-doctor.select-doctor\" /></label>\r\n                                <Select\r\n                                    value={this.state.selectedDoctor}\r\n                                    onChange={this.handleChangeSelect}\r\n                                    options={this.state.listDoctors}\r\n                                    placeholder={<FormattedMessage id=\"admin.manage-doctor.select-doctor\" />}\r\n                                />\r\n                            </div>\r\n                            <div className=\"content-right\">\r\n                                <label><FormattedMessage id=\"admin.manage-doctor.intro\" /></label>\r\n                                <textarea className=\"form-control\" rows=\"4\"\r\n                                    onChange={(event) => this.handleOnChangeText(event, 'description')}\r\n                                    value={this.state.description}>\r\n                                    ...\r\n                                </textarea>\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className=\" more-infor-extra row\">\r\n                            <div className=\"col-4 form-group\">\r\n                                <label>Phone Number</label>\r\n                                <input type=\"number\" maxLength=\"11\" className=\"form-control\"\r\n                                    onChange={(event) => this.handleOnChangeText(event, 'phoneNumber')}\r\n                                    value={this.state.phoneNumber}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-4 form-group\">\r\n                                <label><FormattedMessage id=\"admin.manage-doctor.price\" /></label>\r\n                                <Select\r\n                                    value={this.state.selectedPrice}\r\n                                    onChange={this.handleChangeSelectDoctorInfor}\r\n                                    options={this.state.listPrice}\r\n                                    placeholder={<FormattedMessage id=\"admin.manage-doctor.price\" />}\r\n                                    name=\"selectedPrice\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-4 form-group\">\r\n                                <label><FormattedMessage id=\"admin.manage-doctor.payment\" /></label>\r\n                                <Select\r\n                                    value={this.state.selectedPayment}\r\n                                    onChange={this.handleChangeSelectDoctorInfor}\r\n                                    options={this.state.listPayment}\r\n                                    placeholder={<FormattedMessage id=\"admin.manage-doctor.payment\" />}\r\n                                    name=\"selectedPayment\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-4 form-group\">\r\n                                <label><FormattedMessage id=\"admin.manage-doctor.province\" /></label>\r\n                                <Select\r\n                                    value={this.state.selectProvince}\r\n                                    onChange={this.handleChangeSelectDoctorInfor}\r\n                                    options={this.state.listProvince}\r\n                                    placeholder={<FormattedMessage id=\"admin.manage-doctor.province\" />}\r\n                                    name=\"selectProvince\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-4 form-group\">\r\n                                <label><FormattedMessage id=\"admin.manage-doctor.nameClinic\" /></label>\r\n                                <input className=\"form-control\"\r\n                                    onChange={(event) => this.handleOnChangeText(event, 'nameClinic')}\r\n                                    value={this.state.nameClinic}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-4 form-group\">\r\n                                <label><FormattedMessage id=\"admin.manage-doctor.addressClinic\" /></label>\r\n                                <input className=\"form-control\"\r\n                                    onChange={(event) => this.handleOnChangeText(event, 'addressClinic')}\r\n                                    value={this.state.addressClinic}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-4 form-group\">\r\n                                <label><FormattedMessage id=\"admin.manage-doctor.select-clinic\" /></label>\r\n                                <Select\r\n                                    value={this.state.selectedClinic}\r\n                                    onChange={this.handleChangeSelectDoctorInfor}\r\n                                    options={this.state.listClinic}\r\n                                    placeholder={<FormattedMessage id=\"admin.manage-doctor.select-clinic\" />}\r\n                                    name=\"selectedClinic\"\r\n                                />\r\n\r\n                            </div>\r\n\r\n                            <div className=\"col-4 form-group\">\r\n                                <label><FormattedMessage id=\"admin.manage-doctor.specialty\" /></label>\r\n                                <Select\r\n                                    value={this.state.selectedSpecialty}\r\n                                    onChange={this.handleChangeSelectDoctorInfor}\r\n                                    options={this.state.listSpecialty}\r\n                                    placeholder={<FormattedMessage id=\"admin.manage-doctor.specialty\" />}\r\n                                    name=\"selectedSpecialty\"\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"col-4 form-group\">\r\n                                <label><FormattedMessage id=\"admin.manage-doctor.note\" /></label>\r\n                                <input className=\"form-control\"\r\n                                    onChange={(event) => this.handleOnChangeText(event, 'note')}\r\n                                    value={this.state.note}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n                    <div className=\"container-fluid manage-doctor-editor\">\r\n                        <MdEditor style={{ height: '300px' }} renderHTML={text => mdParser.render(text)}\r\n                            onChange={this.handleEditorChange}\r\n                            value={this.state.contentMarkdown} />\r\n                    </div>\r\n                </div>\r\n\r\n                <button\r\n                    onClick={() => this.handleSaveContentMarkdown()}\r\n                    className={hasOldData === true ? \"save-content-doctor\" : \"create-content-doctor\"}>\r\n                    {hasOldData === true ?\r\n                        <span>\r\n                            <FormattedMessage id=\"admin.manage-doctor.save\" />\r\n                        </span> : <span><FormattedMessage id=\"admin.manage-doctor.add\" /></span>}</button>\r\n            </div>\r\n\r\n\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        allDoctors: state.admin.allDoctors,\r\n        allRequiredDoctorInfor: state.admin.allRequiredDoctorInfor,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchAllDoctors: () => dispatch(actions.fetchAllDoctors()),\r\n        getAllRequiredDoctorInfor: () => dispatch(actions.getRequiredDoctorInfor()),\r\n        saveDetailDoctor: (data) => dispatch(actions.saveDetailDoctor(data))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageDoctor);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\DetailDoctor.js",["452","453"],"import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport HomeHeader from '../../HomePage/HomeHeader';\r\nimport './DetailDoctor.scss';\r\nimport { getDetailInforDoctor } from '../../../services/userService';\r\nimport { LANGUAGES } from '../../../utils';\r\nimport DoctorSchedule from './DoctorSchedule';\r\nimport DoctorExtraInfor from './DoctorExtraInfor';\r\nimport _ from 'lodash';\r\n// import LikeAndShare from '../SocialPlugin/LikeAndShare';\r\n// import Comment from '../SocialPlugin/Comment';\r\nclass DetailDoctor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            detailDoctor: {},\r\n            currentDoctorId: -1,\r\n            detailPrice: {},\r\n            priceId: ''\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            //nếu props này match với database ở trong api, và match vs db có tham số, và match vs tham số tồn tại ở db đó(id)\r\n            let id = this.props.match.params.id;\r\n            this.setState({\r\n                currentDoctorId: id\r\n            })\r\n            let res = await getDetailInforDoctor(id);\r\n\r\n            if (res && res.errCode === 0) {\r\n                let priceId = ''\r\n               let  detailPrice = res.data;\r\n if (detailPrice && detailPrice.Doctor_Infor && detailPrice.Doctor_Infor.priceId) {\r\n            priceId = detailPrice.Doctor_Infor.priceId;\r\n        }\r\n                this.setState({\r\n                    detailDoctor: res.data,\r\n priceId: detailPrice.Doctor_Infor.priceId,\r\n                })\r\n                console.log(res.data);\r\n                \r\n            }\r\n           \r\n        }\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n    }\r\n    render() {\r\n        console.log('baophuc2k check detail doctor: ', this.state)\r\n        let { language } = this.props;\r\n        let { detailDoctor } = this.state;\r\n        let nameVi = '', nameEn = '';\r\n        if (detailDoctor && detailDoctor.positionData) {\r\n            nameVi = `${detailDoctor.positionData.valueVi}, ${detailDoctor.firstName} ${detailDoctor.lastName}`;\r\n            nameEn = `${detailDoctor.positionData.valueEn}, ${detailDoctor.lastName} ${detailDoctor.firstName}`\r\n        }\r\n        // if (detailDoctor && detailDoctor.Doctor_Infor && detailDoctor.Doctor_Infor.priceId) {\r\n        //     price = detailDoctor.Doctor_Infor.priceId;\r\n        // }\r\n        console.log('check lang', language);\r\n// let currentURL = process.env.REACT_APP_IS_LOCALHOST == true\r\n// ? \"https://eric-restaurant-bot-tv.herokuapp.com/\" :window.location.href;\r\n        return (\r\n            <>\r\n                <HomeHeader\r\n                    isShowBanner={false} />\r\n                <div className=\"container doctor-detail-container\">\r\n                    <div className=\"intro-doctor\">\r\n                        <div className=\" content-left\"\r\n                            style={{ backgroundImage: `url(${detailDoctor && detailDoctor.image ? detailDoctor.image : ''})` }}>\r\n\r\n                        </div>\r\n                        <div className=\"content-right\">\r\n                            <div className=\"up\">\r\n                                {language === LANGUAGES.VI ? nameVi : nameEn}\r\n                            </div>\r\n                            <div className=\"down\">\r\n                                {detailDoctor && detailDoctor.Markdown\r\n                                    && detailDoctor.Markdown.description &&\r\n                                    <span>\r\n                                        {detailDoctor.Markdown.description}\r\n                                    </span>}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"container schedule-doctor\">\r\n                        <div className=\"content-left\">\r\n                            <DoctorSchedule\r\n                                doctorIdFromParent={this.state.currentDoctorId}\r\n                                priceIdFromParent={this.state.priceId}\r\n                            />\r\n                        </div>\r\n                        <div className=\"content-right\">\r\n                            <DoctorExtraInfor doctorIdFromParent={this.state.currentDoctorId} />\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"container detail-infor-doctor\">\r\n                        {detailDoctor && detailDoctor.Markdown && detailDoctor.Markdown.contentHTML\r\n                            &&\r\n                            <div dangerouslySetInnerHTML={{ __html: detailDoctor.Markdown.contentHTML }}>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div className=\"comment-doctor\">\r\n\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailDoctor);","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\Doctor.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\Input\\DatePicker.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\DoctorSchedule.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\DoctorExtraInfor.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\Modal\\BookingModal.js",["454","455","456","457"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './BookingModal.scss';\r\nimport { Modal } from 'reactstrap';\r\nimport ProfileDoctor from '../ProfileDoctor';\r\nimport _ from 'lodash';\r\nimport { LANGUAGES, CommonUtils } from '../../../../utils';\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css';\r\nimport moment from 'moment';\r\nimport { toast } from \"react-toastify\";\r\nimport { postPatientBookAppointment} from \"../../../../services/userService\";\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\nclass BookingModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fullName: '',\r\n            phoneNumber: '',\r\n            email: '',\r\n            address: '',\r\n            plantName: '',\r\n            specialtyName: '',\r\n            // selectedGender: '',\r\n            doctorId: '',\r\n            // genders: '',\r\n            timeType: '',\r\n            previewImgURL: '',\r\n            image: '',\r\n            isOpen: false,\r\n            birthday: '',\r\n            reasons: '',\r\n           priceId: '',\r\n           errors: []\r\n        }\r\n\r\n\r\n    }\r\n    //doctorId, timeType được lấy từ dataTime trong profile doctor\r\n\r\n\r\n    async componentDidMount() {\r\n       \r\n    }\r\n  \r\n    // buildDataGender = (data) => {\r\n    //     let result = [];\r\n    //     let language = this.props.language;\r\n    //     if (data && data.length > 0) {\r\n    //         data.map(item => {\r\n    //             let object = {};\r\n    //             object.label = language === LANGUAGES.VI ? item.valueVi : item.valueEn;\r\n    //             object.value = item.keyMap;\r\n    //             result.push(object);\r\n    //         })\r\n    //     }\r\n    //     return result;\r\n    // }\r\n \r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n            // this.setState({\r\n            //     genders: this.buildDataGender(this.props.genders)\r\n            // })\r\n          \r\n        }\r\n       \r\n\r\n        //dataTime được lấy từ api getprofiledoctorbyid trong class Profiledoctor\r\n        if (this.props.dataTime !== prevProps.dataTime) { \r\n           if (this.props.dataTime && !_.isEmpty(this.props.dataTime)) {\r\n                let doctorId = this.props.dataTime.doctorId;\r\n                let timeType = this.props.dataTime.timeType;\r\n             let priceId = this.props.dataTime.priceId;\r\n                this.setState({\r\n                    doctorId: doctorId,\r\n                    timeType: timeType,\r\npriceId: priceId\r\n                })\r\n            }\r\n           \r\n        }\r\n      \r\n        \r\n    }\r\n    // VỚI event.target.value, nó truy xuất giá trị của tất cả những đầu vào được gọi,\r\n // bất kỳ thứ gì chèn vào đầu vào đều có thể được truy cập thông qua event.target.value\r\n    handleOnChangeInput = (event, id) => {\r\n        let valueInput = event.target.value;\r\n        let stateCopy = { ...this.state };\r\n        stateCopy[id] = valueInput;\r\n        this.setState({\r\n            ...stateCopy\r\n        })\r\n    }\r\n    handleOnChangeDatePicker = (date) => {\r\n        this.setState({\r\n            birthday: date[0]\r\n        })\r\n    }\r\n    handleOnChangeDatePickers =(birthdays) =>{\r\n        this.setState({\r\n            birthdays: birthdays[0]\r\n        })\r\n    }\r\n    handleOnChangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            let objectUrl = URL.createObjectURL(file);\r\n            this.setState({\r\n                previewImgURL: objectUrl,\r\n                image: base64,\r\n            })\r\n        }\r\n    }\r\n    openPreviewImage = () => {\r\n        if (!this.state.previewImgURL) return;\r\n        this.setState({\r\n            isOpen: true,\r\n\r\n\r\n        })\r\n\r\n    }\r\n    buildTimeBooking = (dataTime) => {\r\n        let { language } = this.props;\r\n        if (dataTime && !_.isEmpty(dataTime)) {\r\n            let time = language === LANGUAGES.VI ? dataTime.timeTypeData.valueVi : dataTime.timeTypeData.valueEn;\r\n            // let price = language === LANGUAGES.VI ? dataTime.priceTypeDataPatient.valueVi : dataTime.priceTypeDataPatient.valueEn;\r\n            let date = language === LANGUAGES.VI ?\r\n                moment.unix(+dataTime.date / 1000).format('dddd -DD/MM/YYYY') :\r\n                moment.unix(+dataTime.date / 1000).locale('en').format('ddd- MM/DD/YYYY');\r\n            let birthdays = language === LANGUAGES.VI ?\r\n                moment.unix(+dataTime.birthdays / 1000).format('dddd -DD/MM/YYYY') :\r\n                moment.unix(+dataTime.birthdays / 1000).locale('en').format('ddd- MM/DD/YYYY');\r\n         \r\n       \r\n            return `${time} - ${date} `;\r\n\r\n        }\r\n        return ''\r\n    }\r\n    buildDoctorName = (dataTime) => {\r\n        let {language} = this.props;\r\n        if(dataTime && !_.isEmpty(dataTime)){\r\n            let name = language === LANGUAGES.VI ?\r\n            `${dataTime.doctorData.lastName} ${dataTime.doctorData.firstName}`\r\n            :\r\n                `${dataTime.doctorData.firstName} ${dataTime.doctorData.lastName}`\r\n                return name;\r\n        }\r\n        return '';\r\n    }\r\n    buildDataInputSelect = (inputData, type) => {\r\n        console.log(\"check input data\", inputData)\r\n        //inputData đã được lấy từ componentDidMount(), cụ thể là this.props; \r\n        let result = [];\r\n        let { language } = this.props;\r\n        if (inputData && inputData.length > 0) {\r\n           \r\n            if (type === 'PRICE') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    let labelEn = `${item.valueEn} USD`;\r\n                    let labelVi = `${item.valueVi}`;\r\n                    object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                    object.value = item.keyMap;\r\n                    result.push(object);\r\n                })\r\n            }\r\n           \r\n\r\n        }\r\n        return result;\r\n    }\r\n\r\n   \r\n    // handleChangeSelect = (selectedOption) => {\r\n    //     this.setState({\r\n    //         selectedGender: selectedOption\r\n    //     });\r\n    //  if (this.props.history) {\r\n    // console.log('baophuc2k check doctor', doctor);\r\n    // this.props.history.push(`/detail-doctor/${doctor.id}`);\r\n    // }\r\n    // }\r\n    handleSubmit() {\r\n\r\n\r\n        //VALIDATE\r\n        var errors = [];\r\n        if (this.state.fullName === \"\") {\r\n            toast.error(\"Invalid full name input\");\r\n            errors.push(\"fullName\");\r\n        }\r\n        if (this.state.reasons === \"\") {\r\n            toast.error(\"Invalid reasons input\");\r\n            errors.push(\"reasons\");\r\n        }\r\n    \r\n        if (this.state.phoneNumber === \"\" || this.state.phoneNumber.length > 11) {\r\n            toast.error(\"Invalid phone number input\");\r\n            errors.push(\"phoneNumber\");\r\n        }\r\n        if (this.state.address === \"\") {\r\n            toast.error(\"Invalid address input\");\r\n            errors.push(\"address\");\r\n        }\r\n        if (this.state.plantName === \"\") {\r\n            toast.error(\"Invalid plantName input\");\r\n            errors.push(\"plantName\");\r\n        }\r\n        if (this.state.specialtyName === \"\") {\r\n            toast.error(\"Invalid specialtyName input\");\r\n            errors.push(\"specialtyName\");\r\n        }\r\n        if (this.state.image === \"\") {\r\n            toast.error(\"Invalid image input\");\r\n            errors.push(\"image\");\r\n        }\r\n\r\n        //email\r\n        const expression = /\\S+@\\S+\\.\\S+/;\r\n        var validEmail = expression.test(String(this.state.email).toLowerCase());\r\n\r\n        if (!validEmail) {\r\n            toast.error(\"Invalid email\");\r\n            errors.push(\"email\");\r\n        }\r\n\r\n        this.setState({\r\n            errors: errors\r\n        });\r\n\r\n        for (let i = 0; i < errors.length; i++) {\r\n            if (i > 0) {\r\n                toast.error(\"Error! Please enter valid \")\r\n                break;\r\n            }\r\n        }\r\n        return errors.length;\r\n    }\r\n    handleConfirmBooking = async () => {\r\n        let errors = [];\r\n\r\n        errors.length = this.handleSubmit();\r\n        if (errors.length > 0) return;\r\n        //date là truyền timestamp lên db \r\n        //timeString truyền human date lên nodemailer\r\n        let date = new Date(this.state.birthday).getTime();\r\n        // let birthdays = new Date(this.state.birthdays).getTime();\r\n        let timeString = this.buildTimeBooking(this.props.dataTime);\r\n   let doctorName = this.buildDoctorName(this.props.dataTime);\r\n\r\n        let res = await postPatientBookAppointment({\r\n            fullName: this.state.fullName,\r\n            phoneNumber: this.state.phoneNumber,\r\n            email: this.state.email,\r\n            address: this.state.address,\r\n            reasons: this.state.reasons,\r\n            date: this.props.dataTime.date,\r\n            birthday: date,\r\n            // birthdays: birthdays,\r\n            plantName: this.state.plantName,\r\n            specialtyName: this.state.specialtyName,\r\n            // selectedGender: this.state.selectedGender.value,\r\n            doctorId: this.state.doctorId,\r\n            timeType: this.state.timeType,\r\n            priceId: this.state.priceId,\r\n            image: this.state.image,\r\n            language: this.props.language,\r\n            timeString: timeString,\r\n          doctorName: doctorName\r\n        })\r\n        if (res && res.errCode === 0) {\r\n            toast.success(\"Booking a new appointment succeed!\")\r\n            this.props.closeBookingClose();\r\n            console.log('check res', res);\r\n        } else {\r\n            toast.error(\"Booking a new appointment failed!\")\r\n            console.log('check res', res);\r\n        }\r\n    }\r\n    render() {\r\n        let {language}= this.props;\r\n        let { isOpenModal, closeBookingClose, dataTime } = this.props;\r\n     \r\n        let priceId = '';\r\n        console.log('data Price', dataTime);\r\n        let doctorId = '';\r\n       \r\n        if (dataTime && !_.isEmpty(dataTime)) {\r\n            doctorId = dataTime.doctorId;\r\n            priceId = dataTime.priceId;\r\n        }\r\n      \r\n       \r\n        return (\r\n            <>\r\n\r\n                <Modal\r\n                    isOpen={isOpenModal}\r\n                    className={'booking-modal-container'}\r\n                    size=\"lg\"\r\n                    style={{ maxWidth: '100vw', width: '100%' }}>\r\n                    <div className=\"booking-modal-content\" >\r\n                        <div className=\"booking-modal-header\">\r\n                            <span className=\"left\"><FormattedMessage id=\"patient.booking-modal.title\" /></span>\r\n                            <span className=\"right\"\r\n                                onClick={closeBookingClose}>\r\n                                <i className=\"fa-solid fa-xmark\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"booking-modal-body\">\r\n                            <div className=\"doctor-infor\">\r\n                                <ProfileDoctor\r\n                                    doctorId={doctorId}\r\n                                    isShowDescriptionDoctor={false}\r\n                                    dataTime={dataTime}\r\n                                    isShowLinkDetail={false}\r\n                                    isShowPrice={true}\r\n                                    />\r\n                            </div>\r\n                           \r\n                            <div className=\"row\">\r\n                                <div className=\"col-6 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.fullName\" /></label>\r\n                                    <input className=\"form-control\"\r\n                                        onChange={(event) => this.handleOnChangeInput(event, 'fullName')} />\r\n                                </div>\r\n                                <div className=\"col-6 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.phoneNumber\" /></label>\r\n                                    <input type=\"number\" maxLength=\"11\" className=\"form-control\"\r\n                                        onChange={(event) => this.handleOnChangeInput(event, 'phoneNumber')} />\r\n                                </div>\r\n                                <div className=\"col-6 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.email\" /></label>\r\n                                    <input className=\"form-control\"\r\n                                        onChange={(event) => this.handleOnChangeInput(event, 'email')} />\r\n                                </div>\r\n                                <div className=\"col-6 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.address\" /></label>\r\n                                    <input className=\"form-control\"\r\n                                        onChange={(event) => this.handleOnChangeInput(event, 'address')} />\r\n                                </div>\r\n                                <div className=\"col-12 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.reason\" /></label>\r\n                                    <input className=\"form-control\"\r\n                                        onChange={(event) => this.handleOnChangeInput(event, 'reasons')} />\r\n                                </div>\r\n                                <div className=\"col-12 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.avatar\" /></label>\r\n                                    <div className=\"preview-img-container\">\r\n                                        <input className=\"form-control\" id=\"previewImg\" type=\"file\" hidden\r\n                                            onChange={(event) => this.handleOnChangeImage(event)}\r\n                                        />\r\n                                        <label className=\"label-upload\" htmlFor=\"previewImg\"><FormattedMessage id=\"patient.booking-modal.upload\" /><i className=\"fa-solid fa-upload\"></i></label>\r\n\r\n                                        <div className=\"preview-image\" style={{ backgroundImage: `url(${this.state.previewImgURL})` }}\r\n                                            onClick={() => this.openPreviewImage()}\r\n                                        >\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                               \r\n                                {/* <div className=\"col-6 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.gender\" /></label>\r\n                                        <Select\r\n                                        value={this.state.selectedGender}\r\n                                        onChange={this.handleChangeSelect}\r\n                                        options={this.state.genders}/>\r\n                                    </div> */}\r\n                                <div className=\"col-6 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.plantName\" /></label>\r\n                                    <input className=\"form-control\"\r\n                                        onChange={(event) => this.handleOnChangeInput(event, 'plantName')} />\r\n                                </div>\r\n                                <div className=\"col-6 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.specialtyName\" /></label>\r\n                                    <input className=\"form-control\"\r\n                                        onChange={(event) => this.handleOnChangeInput(event, 'specialtyName')} />\r\n                                </div>\r\n                              \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"booking-modal-footer\">\r\n                          \r\n                            <div className=\"note\"> <FormattedMessage id=\"patient.booking-modal.note\" /></div>\r\n                            <button className=\"btn-booking-confirm\"\r\n                                onClick={() => this.handleConfirmBooking()}>\r\n                                <FormattedMessage id=\"patient.booking-modal.booking\" />\r\n                            </button>\r\n                            <button className=\"btn-booking-cancel\"\r\n                                onClick={closeBookingClose}>\r\n                                <FormattedMessage id=\"patient.booking-modal.btnCancel\" />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                </Modal>\r\n                {this.state.isOpen === true &&\r\n                    <Lightbox\r\n                        mainSrc={this.state.previewImgURL}\r\n                        onCloseRequest={() => this.setState({ isOpen: false })} />}\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n       \r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n      \r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BookingModal);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\ProfileDoctor.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\Input\\index.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\Input\\InputSuggest.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\VerifyEmail.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\auth\\Register.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Specialty\\ManageSpecialty.js",["458","459","460","461","462"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { LANGUAGES, CRUD_ACTIONS, CommonUtils } from '../../../utils';\r\nimport './ManageSpecialty.scss';\r\nimport TableManageSpecialty from '../TableManageSpecialty';\r\nimport * as actions from '../../../store/actions';\r\nimport Lightbox from 'react-image-lightbox';\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\nimport 'react-image-lightbox/style.css'; // This only needs to be imported once in your app\r\nconst mdParser = new MarkdownIt();\r\nclass ManageSpecialty extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            descriptionMarkdown: '',\r\n            descriptionHTML: '',\r\n\r\n            specialtyArr: [],\r\n\r\n            isOpen: false,\r\n            previewImgURL: '',\r\n            name: '',\r\n            specialty: '',\r\n            avatar: '',\r\n            action: '',\r\n            specialtyEditId: '',\r\n\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n\r\n        this.props.getSpecialtyStart();\r\n\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.specialtyRedux !== this.props.specialtyRedux) {\r\n            let arrSpecialties = this.props.specialtyRedux;\r\n            this.setState({\r\n                specialtyArr: arrSpecialties,\r\n                specialty: arrSpecialties && arrSpecialties.length > 0 ? arrSpecialties[0].keyMap : '',\r\n            })\r\n        }\r\n        if (prevProps.listSpecialties !== this.props.listSpecialties) {\r\n            let arrSpecialties = this.props.specialtyRedux;\r\n            this.setState({\r\n                name: '',\r\n                specialty: arrSpecialties && arrSpecialties.length > 0 ? arrSpecialties[0].keyMap : '',\r\n                avatar: '',\r\n                action: CRUD_ACTIONS.CREATE,\r\n                previewImgURL: '',\r\n                descriptionMarkdown: '',\r\n                descriptionHTML: ''\r\n            })\r\n        }\r\n    }\r\n    handleOnChangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            let objectUrl = URL.createObjectURL(file);\r\n            this.setState({\r\n                previewImgURL: objectUrl,\r\n                avatar: base64,\r\n            })\r\n        }\r\n    }\r\n    openPreviewImage = () => {\r\n        if (!this.state.previewImgURL) return;\r\n        this.setState({\r\n            isOpen: true\r\n        })\r\n    }\r\n    handleSaveSpecialty = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === false) return;\r\n        let { action } = this.state;\r\n        if (action === CRUD_ACTIONS.CREATE) {\r\n            this.props.createNewSpecialty({\r\n                name: this.state.name,\r\n                avatar: this.state.avatar,\r\n                descriptionHTML: this.state.descriptionHTML,\r\n                descriptionMarkdown: this.state.descriptionMarkdown\r\n            })\r\n        }\r\n        if (action === CRUD_ACTIONS.EDIT) {\r\n            let isValid = this.checkValidateInput();\r\n            if (isValid === false) return;\r\n            this.props.editSpecialtyRedux({\r\n                id: this.state.specialtyEditId,\r\n                name: this.state.name,\r\n                avatar: this.state.avatar,\r\n                descriptionHTML: this.state.descriptionHTML,\r\n                descriptionMarkdown: this.state.descriptionMarkdown\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrCheck = ['name', 'descriptionHTML', 'descriptionMarkdown']\r\n        for (let i = 0; i < arrCheck.length; i++) {\r\n            if (!this.state[arrCheck[i]]) {\r\n                isValid = false;\r\n                alert('This input is required: ' + arrCheck[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    }\r\n    onChangeInput = (event, id) => {\r\n        let copyState = { ...this.state }\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState,\r\n        })\r\n    }\r\n\r\n    handleEditSpecialtyFromParent = (specialty) => {\r\n        let imageBase64 = '';\r\n        if (specialty.image) {\r\n            imageBase64 = new Buffer(specialty.image, 'base64').toString('binary');\r\n            //Buffer cung cấp cách xử lý dữ liệu dạng nhị phân, \r\n            //câu lệnh trên xử lý dữ liệu BLOB (được mã hóa là base64) sang dữ liệu binary \r\n        }\r\n        this.setState({\r\n            name: specialty.name,\r\n\r\n            avatar: '',\r\n            previewImgURL: imageBase64,\r\n            action: CRUD_ACTIONS.EDIT,\r\n            specialtyEditId: specialty.id,\r\n            descriptionHTML: specialty.descriptionHTML,\r\n            descriptionMarkdown: specialty.descriptionMarkdown\r\n        })\r\n    }\r\n    handleEditorChange = ({ html, text }) => {\r\n        this.setState({\r\n            descriptionMarkdown: text,\r\n            descriptionHTML: html,\r\n        })\r\n    }\r\n    render() {\r\n\r\n\r\n        let language = this.props.language;\r\n        let { name, avatar, descriptionHTML, descriptionMarkdown } = this.state;\r\n        //đây là cách viết của ES7\r\n        return (\r\n\r\n            <div className=\"user-redux-container\" >\r\n                <div className=\"title\">\r\n                    <FormattedMessage id=\"menu.admin.manage-specialty\" />\r\n                </div>\r\n                <div className=\"user-redux-body\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                {''}\r\n                            </div>\r\n                            <div className=\"col-md-3 mb-3\">\r\n                                <label htmlFor=\"validationServerUsername\"> <FormattedMessage id=\"menu.admin.specialty-name\" /></label>\r\n                                <div className=\"input-group\">\r\n                                    <input type=\"text\" className=\"form-control\" id=\"validationServerUsername\" placeholder=\"...\" aria-describedby=\"inputGroupPrepend3\" required\r\n                                        value={name}\r\n                                        onChange={(event) => { this.onChangeInput(event, 'name') }}\r\n                                    // disabled={this.state.action === CRUD_ACTIONS.EDIT ? true : false} \r\n                                    />\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n\r\n\r\n\r\n                        </div>\r\n                        <div className=\"row\">\r\n\r\n                            <div className=\"col-md-6 mb-3\">\r\n                                <label htmlFor=\"validationServer02\"> <FormattedMessage id=\"create-user.image\" /></label>\r\n                                <div className=\"preview-img-container\">\r\n                                    <input id=\"previewImg\" type=\"file\" hidden\r\n                                        onChange={(event) => this.handleOnChangeImage(event)} />\r\n                                    <label className=\"label-upload\" htmlFor=\"previewImg\">Upload<i className=\"fa-solid fa-upload\"></i></label>\r\n                                    <div className=\"preview-image\" style={{ backgroundImage: `url(${this.state.previewImgURL})` }}\r\n                                        onClick={() => this.openPreviewImage()}\r\n                                    >\r\n\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n\r\n\r\n                        <div className=\"form-group\">\r\n                            <div className=\"form-check\">\r\n                                <input className=\"form-check-input is-invalid\" type=\"checkbox\" value=\"\" id=\"invalidCheck3\" required />\r\n                                <label className=\"form-check-label\" htmlFor=\"invalidCheck3\">\r\n                                    <FormattedMessage id=\"create-user.agree\" />\r\n                                </label>\r\n                                <div className=\"invalid-feedback\">\r\n                                    <FormattedMessage id=\"create-user.confirm\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"container-fluid manage-doctor-editor\">\r\n                            <MdEditor style={{ height: '300px' }} renderHTML={text => mdParser.render(text)}\r\n                                onChange={this.handleEditorChange}\r\n                                value={this.state.descriptionMarkdown} />\r\n                        </div>\r\n                        <div className=\"col-12 my-3\">\r\n                            <button className={this.state.action === CRUD_ACTIONS.EDIT ? \"btn btn-warning\" : \"btn btn-primary\"} type=\"submit\"\r\n                                onClick={() => this.handleSaveSpecialty()}>\r\n                                {this.state.action === CRUD_ACTIONS.EDIT ?\r\n                                    <FormattedMessage id=\"manage-user.edit\"></FormattedMessage>\r\n                                    : <FormattedMessage id=\"manage-user.save\"></FormattedMessage>}\r\n                                {/* <FormattedMessage id=\"create-user.submit\"/> */}\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"col-12 mb-5\">\r\n                            <TableManageSpecialty\r\n                                handleEditSpecialtyFromParentKey={this.handleEditSpecialtyFromParent}\r\n                                action={this.state.action} />\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                {this.state.isOpen === true &&\r\n                    <Lightbox\r\n                        mainSrc={this.state.previewImgURL}\r\n                        onCloseRequest={() => this.setState({ isOpen: false })} />}\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        listSpecialties: state.admin.specialties\r\n    };\r\n};\r\n//những cái biến state ở trên hàm mapStateToProps được khai báo trùng với các biến ở trên file này, không cần khai báo ở file\r\n//khác và có thể sử dụng ở file khác, vế trái là ta tự khai báo\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getSpecialtyStart: () => dispatch(actions.fetchAllSpecialtyStart()),\r\n        createNewSpecialty: (data) => dispatch(actions.createNewSpecialty(data)),\r\n        editSpecialtyRedux: (data) => dispatch(actions.editSpecialty(data))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageSpecialty);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Specialty\\DetailSpecialty.js",["463","464","465"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './DetailSpecialty.scss';\r\nimport HomeHeader from '../../HomePage/HomeHeader';\r\nimport DoctorSchedule from '../Doctor/DoctorSchedule';\r\nimport DoctorExtraInfor from '../Doctor/DoctorExtraInfor';\r\nimport ProfileDoctor from '../Doctor/ProfileDoctor';\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\nimport {getAllCodeService, getAllDetailSpecialtyById} from '../../../services/userService';\r\nimport _ from 'lodash';\r\nimport {LANGUAGES} from '../../../utils';\r\nclass DetailSpecialty extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arrDoctorId: [],\r\n            dataDetailSpecialty: {},\r\n            listProvince: []\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if(this.props.match && this.props.match.params && this.props.match.params.id){\r\n            let id = this.props.match.params.id;\r\n            let res = await getAllDetailSpecialtyById({\r\n                id: id,\r\n                location: 'ALL'\r\n            });\r\n            //doctorSpecialty, res.data... lấy từ nodeJS, resProvince đc lấy từ redux.\r\n            let resProvince = await getAllCodeService('PROVINCE');\r\n            if(res && res.errCode === 0 && resProvince && resProvince.errCode === 0){\r\n                let data = res.data;\r\n                let arrDoctorId = [];\r\n                if(data && !_.isEmpty(data)){\r\n                    let arr = data.doctorSpecialty;\r\n                    if(arr && arr.length > 0){\r\n                        arr.map(item => {\r\n                            arrDoctorId.push(item.doctorId)\r\n                        })\r\n                    }\r\n                }\r\n                let dataProvince = resProvince.data;\r\n                if(dataProvince && dataProvince.length > 0){\r\n                    //unshift() adds new items to the beginning of an array:\r\n                    //ở đây thêm 1 dãy giá trị mặc định khi chưa select ở class DetailSpecialty\r\n                    dataProvince.unshift({\r\n                        createdAt: null,\r\n                        keyMap: \"ALL\",\r\n                        type: \"PROVINCE\",\r\n                        valueEn: \"ALL\",\r\n                        valueVi: \"Toàn quốc\",\r\n                    })\r\n                }\r\n                this.setState({\r\n                    dataDetailSpecialty: res.data,\r\n                    arrDoctorId: arrDoctorId,\r\n                    listProvince: dataProvince ? dataProvince : []\r\n                })\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n    }\r\nhandleOnChangeSelect = async (event)=> {\r\n    if(this.props.match && this.props.match.params && this.props.match.params.id){\r\n        let id = this.props.match.params.id;\r\n        let location = event.target.value;\r\n\r\n        let res = await getAllDetailSpecialtyById({\r\n            id: id,\r\n            location: location\r\n        });\r\n        if(res && res.errCode === 0){\r\n            let data = res.data;\r\n            let arrDoctorId = [];\r\n            if(data && !_.isEmpty(res.data)){\r\n                let arr = data.doctorSpecialty;\r\n                if(arr && arr.length > 0){\r\n                    arr.map(item =>{\r\n                        arrDoctorId.push(item.doctorId)\r\n                    })\r\n                }\r\n            }\r\n            this.setState({\r\n                dataDetailSpecialty: res.data,\r\n                arrDoctorId: arrDoctorId\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n    render() {\r\n        let { arrDoctorId, dataDetailSpecialty, listProvince } = this.state;\r\n        console.log('chuyen nganh check state', this.state)\r\n        let {language} = this.props;\r\n        return (\r\n            <div className=\"detail-specialty-container\">\r\n                <HomeHeader />\r\n                <div className=\"detail-specialty-body\">\r\n                    <div className=\"description-specialty\">\r\n                        {dataDetailSpecialty && !_.isEmpty(dataDetailSpecialty)\r\n                        &&<div dangerouslySetInnerHTML={{ __html: dataDetailSpecialty.descriptionHTML}}>\r\n                            </div>\r\n                            }\r\n                    </div>\r\n                    <div className=\"search-sp-doctor\">\r\n                        <select onChange={(event)=> this.handleOnChangeSelect(event)}>\r\n                            {listProvince && listProvince.length > 0 && \r\n                            listProvince.map((item, index)=>{\r\n                                return(\r\n                                    <option key={index} value={item.keyMap}>\r\n                                        {language === LANGUAGES.VI ? item.valueVi : item.valueEn}\r\n                                    </option>\r\n                                )\r\n                            })}\r\n                        </select>\r\n                    </div>\r\n                    {arrDoctorId && arrDoctorId.length>0 &&\r\n                    arrDoctorId.map((item, index)=> {\r\n                        return(\r\n                            <div className=\"each-doctor\" key={index}>\r\n                                <div className=\"dt-content-left\">\r\n                                    <div className=\"profile-doctor\">\r\n                                        <ProfileDoctor\r\n                                        doctorId={item}\r\n                                        isShowDescriptionDoctor={true}\r\n                                        isShowLinkDetail={true}\r\n                                        isShowPrice={false}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"dt-content-right\">\r\n                                    <div className=\"doctor-schedule\">\r\n                                        <DoctorSchedule\r\n                                        doctorIdFromParent={item}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"doctor-extra-infor\">\r\n                                        <DoctorExtraInfor\r\n                                        doctorIdFromParent={item}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailSpecialty);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Clinic\\ManageClinic.js",["466","467","468","469","470"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { LANGUAGES, CRUD_ACTIONS, CommonUtils } from '../../../utils';\r\nimport './ManageClinic.scss';\r\nimport TableManageClinic from '../TableManageClinic';\r\nimport * as actions from '../../../store/actions';\r\nimport Lightbox from 'react-image-lightbox';\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\nimport 'react-image-lightbox/style.css'; // This only needs to be imported once in your app\r\nconst mdParser = new MarkdownIt();\r\nclass ManageClinic extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            descriptionMarkdown: '',\r\n            descriptionHTML: '',\r\n\r\n            clinicArr: [],\r\n\r\n            isOpen: false,\r\n            previewImgURL: '',\r\n            name: '',\r\n            address: '',\r\n            clinic: '',\r\n            avatar: '',\r\n            action: '',\r\n            clinicEditId: '',\r\n\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n\r\n        this.props.getClinicStart();\r\n\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        //hành động hiển thị dãy clinic(đc cập nhật liên tục sau khi đc tạo vs redux)\r\n        if (prevProps.clinicRedux !== this.props.clinicRedux) {\r\n            let arrClinics = this.props.clinicRedux;\r\n            this.setState({\r\n                clinicArr: arrClinics,\r\n                clinic: arrClinics && arrClinics.length > 0 ? arrClinics[0].keyMap : '',\r\n            })\r\n        }\r\n        //hành động create clinic vs redux \r\n        if (prevProps.listClinics !== this.props.listClinics) {\r\n            let arrClinics = this.props.clinicRedux;\r\n            this.setState({\r\n                name: '',\r\n                address: '',\r\n                clinic: arrClinics && arrClinics.length > 0 ? arrClinics[0].keyMap : '',\r\n                avatar: '',\r\n                action: CRUD_ACTIONS.CREATE,\r\n                previewImgURL: '',\r\n                descriptionMarkdown: '',\r\n                descriptionHTML: ''\r\n            })\r\n        }\r\n    }\r\n    handleOnChangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            let objectUrl = URL.createObjectURL(file);\r\n            this.setState({\r\n                previewImgURL: objectUrl,\r\n                avatar: base64,\r\n            })\r\n        }\r\n    }\r\n    openPreviewImage = () => {\r\n        if (!this.state.previewImgURL) return;\r\n        this.setState({\r\n            isOpen: true\r\n        })\r\n    }\r\n    //\r\n    handleSaveClinic = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === false) return;\r\n        let { action } = this.state;\r\n        if (action === CRUD_ACTIONS.CREATE) {\r\n            this.props.createNewClinic({\r\n                name: this.state.name,\r\n                avatar: this.state.avatar,\r\n                descriptionHTML: this.state.descriptionHTML,\r\n                descriptionMarkdown: this.state.descriptionMarkdown,\r\n                address: this.state.address\r\n            })\r\n        }\r\n        if (action === CRUD_ACTIONS.EDIT) {\r\n            let isValid = this.checkValidateInput();\r\n            if (isValid === false) return;\r\n            this.props.editClinicRedux({\r\n                id: this.state.clinicEditId,\r\n                name: this.state.name,\r\n                address: this.state.address,\r\n                avatar: this.state.avatar,\r\n                descriptionHTML: this.state.descriptionHTML,\r\n                descriptionMarkdown: this.state.descriptionMarkdown\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrCheck = ['name', 'address', 'descriptionHTML', 'descriptionMarkdown']\r\n        for (let i = 0; i < arrCheck.length; i++) {\r\n            if (!this.state[arrCheck[i]]) {\r\n                isValid = false;\r\n                alert('This input is required: ' + arrCheck[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    }\r\n    onChangeInput = (event, id) => {\r\n        let copyState = { ...this.state }\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState,\r\n        })\r\n    }\r\n\r\n    handleEditClinicFromParent = (clinic) => {\r\n        let imageBase64 = '';\r\n        if (clinic.image) {\r\n            imageBase64 = new Buffer(clinic.image, 'base64').toString('binary');\r\n            //Buffer cung cấp cách xử lý dữ liệu dạng nhị phân, \r\n            //câu lệnh trên xử lý dữ liệu BLOB (được mã hóa là base64) sang dữ liệu binary \r\n        }\r\n        this.setState({\r\n            name: clinic.name,\r\n            address: clinic.address,\r\n            avatar: '',\r\n            previewImgURL: imageBase64,\r\n            action: CRUD_ACTIONS.EDIT,\r\n            clinicEditId: clinic.id,\r\n            descriptionHTML: clinic.descriptionHTML,\r\n            descriptionMarkdown: clinic.descriptionMarkdown\r\n        })\r\n    }\r\n    handleEditorChange = ({ html, text }) => {\r\n        this.setState({\r\n            descriptionMarkdown: text,\r\n            descriptionHTML: html,\r\n        })\r\n    }\r\n    render() {\r\n        console.log('check state', this.state)\r\n\r\n        let language = this.props.language;\r\n        let { name, address\r\n            , avatar, descriptionHTML, descriptionMarkdown } = this.state;\r\n        //đây là cách viết của ES7\r\n        return (\r\n\r\n            <div className=\"user-redux-container\" >\r\n                <div className=\"title\">\r\n                    <FormattedMessage id=\"menu.admin.manage-clinic\" />\r\n                </div>\r\n                <div className=\"user-redux-body\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                {''}\r\n                            </div>\r\n                            <div className=\"col-md-3 mb-3\">\r\n                                <label htmlFor=\"validationServerUsername\"> <FormattedMessage id=\"menu.admin.clinic-name\" /></label>\r\n                                <div className=\"input-group\">\r\n                                    <input type=\"text\" className=\"form-control\" id=\"validationServerUsername\" placeholder=\"...\" aria-describedby=\"inputGroupPrepend3\" required\r\n                                        value={name}\r\n                                        onChange={(event) => { this.onChangeInput(event, 'name') }}\r\n                                    // disabled={this.state.action === CRUD_ACTIONS.EDIT ? true : false}\r\n                                    />\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n\r\n\r\n\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-6 mb-3\">\r\n                                <label htmlFor=\"validationServer03\"> <FormattedMessage id=\"create-user.address\" /></label>\r\n                                <input type=\"text\" className=\"form-control \" id=\"validationServer03\" placeholder=\"...\" required\r\n                                    value={address}\r\n                                    onChange={(event) => { this.onChangeInput(event, 'address') }} />\r\n\r\n                            </div>\r\n\r\n                            <div className=\"col-md-3 mb-3\">\r\n                                <label htmlFor=\"validationServer02\"> <FormattedMessage id=\"create-user.image\" /></label>\r\n                                <div className=\"preview-img-container\">\r\n                                    <input id=\"previewImg\" type=\"file\" hidden\r\n                                        onChange={(event) => this.handleOnChangeImage(event)} />\r\n                                    <label className=\"label-upload\" htmlFor=\"previewImg\">Upload<i className=\"fa-solid fa-upload\"></i></label>\r\n                                    <div className=\"preview-image\" style={{ backgroundImage: `url(${this.state.previewImgURL})` }}\r\n                                        onClick={() => this.openPreviewImage()}\r\n                                    >\r\n\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n\r\n\r\n                        <div className=\"form-group\">\r\n                            <div className=\"form-check\">\r\n                                <input className=\"form-check-input is-invalid\" type=\"checkbox\" value=\"\" id=\"invalidCheck3\" required />\r\n                                <label className=\"form-check-label\" htmlFor=\"invalidCheck3\">\r\n                                    <FormattedMessage id=\"create-user.agree\" />\r\n                                </label>\r\n                                <div className=\"invalid-feedback\">\r\n                                    <FormattedMessage id=\"create-user.confirm\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"container-fluid manage-doctor-editor\">\r\n                            <MdEditor style={{ height: '300px' }} renderHTML={text => mdParser.render(text)}\r\n                                onChange={this.handleEditorChange}\r\n                                value={this.state.descriptionMarkdown} />\r\n                        </div>\r\n                        <div className=\"col-12 my-3\">\r\n                            <button className={this.state.action === CRUD_ACTIONS.EDIT ? \"btn btn-warning\" : \"btn btn-primary\"} type=\"submit\"\r\n                                onClick={() => this.handleSaveClinic()}>\r\n                                {this.state.action === CRUD_ACTIONS.EDIT ?\r\n                                    <FormattedMessage id=\"manage-user.edit\"></FormattedMessage>\r\n                                    : <FormattedMessage id=\"manage-user.save\"></FormattedMessage>}\r\n                                {/* <FormattedMessage id=\"create-user.submit\"/> */}\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"col-12 mb-5\">\r\n                            <TableManageClinic\r\n                                handleEditClinicFromParentKey={this.handleEditClinicFromParent}\r\n                                action={this.state.action} />\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                {this.state.isOpen === true &&\r\n                    <Lightbox\r\n                        mainSrc={this.state.previewImgURL}\r\n                        onCloseRequest={() => this.setState({ isOpen: false })} />}\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        listClinics: state.admin.clinics\r\n    };\r\n};\r\n//những cái biến state ở trên hàm mapStateToProps được khai báo trùng với các biến ở trên file này, không cần khai báo ở file\r\n//khác và có thể sử dụng ở file khác, vế trái là ta tự khai báo\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getClinicStart: () => dispatch(actions.fetchAllClinicStart()),\r\n        createNewClinic: (data) => dispatch(actions.createNewClinic(data)),\r\n        editClinicRedux: (data) => dispatch(actions.editClinic(data))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageClinic);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Clinic\\DetailClinic.js",["471","472","473","474"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './DetailClinic.scss';\r\nimport HomeHeader from '../../HomePage/HomeHeader';\r\nimport DoctorSchedule from '../Doctor/DoctorSchedule';\r\nimport DoctorExtraInfor from '../Doctor/DoctorExtraInfor';\r\nimport ProfileDoctor from '../Doctor/ProfileDoctor';\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\nimport {  getAllDetailClinicById } from '../../../services/userService';\r\nimport _ from 'lodash';\r\nimport { LANGUAGES } from '../../../utils';\r\nclass DetailClinic extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arrDoctorId: [],\r\n            dataDetailClinic: {}\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            let id = this.props.match.params.id;\r\n            let res = await getAllDetailClinicById({\r\n                id: id\r\n            });\r\n           \r\n            if (res && res.errCode === 0) {\r\n                let data = res.data;\r\n                let arrDoctorId = [];\r\n                if (data && !_.isEmpty(res.data)) {\r\n                    let arr = data.doctorClinic;\r\n                    if (arr && arr.length > 0) {\r\n                        arr.map(item => {\r\n                            arrDoctorId.push(item.doctorId)\r\n                        })\r\n                    }\r\n                }\r\n                \r\n                this.setState({\r\n                    dataDetailClinic: res.data,\r\n                    arrDoctorId: arrDoctorId,\r\n                  \r\n                })\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n    }\r\n  \r\n\r\n    render() {\r\n        let { arrDoctorId, dataDetailClinic } = this.state;\r\n        console.log('chuyen nganh check state', this.state)\r\n        let { language } = this.props;\r\n        return (\r\n            <div className=\"detail-clinic-container\">\r\n                <HomeHeader />\r\n                <div className=\"detail-clinic-body\">\r\n                    <div className=\"description-clinic\">\r\n                        {dataDetailClinic && !_.isEmpty(dataDetailClinic)\r\n                       \r\n                            &&\r\n                             <>\r\n                             <div>{dataDetailClinic.name}</div>\r\n                            <div dangerouslySetInnerHTML={{ __html: dataDetailClinic.descriptionHTML }}>\r\n                            </div>\r\n                            </> \r\n                        }\r\n                    </div>\r\n                 \r\n                    {arrDoctorId && arrDoctorId.length > 0 &&\r\n                        arrDoctorId.map((item, index) => {\r\n                            return (\r\n                                <div className=\"each-doctor\" key={index}>\r\n                                    <div className=\"dt-content-left\">\r\n                                        <div className=\"profile-doctor\">\r\n                                            <ProfileDoctor\r\n                                                doctorId={item}\r\n                                                isShowDescriptionDoctor={true}\r\n                                                isShowLinkDetail={true}\r\n                                                isShowPrice={false}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"dt-content-right\">\r\n                                        <div className=\"doctor-schedule\">\r\n                                            <DoctorSchedule\r\n                                                doctorIdFromParent={item}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"doctor-extra-infor\">\r\n                                            <DoctorExtraInfor\r\n                                                doctorIdFromParent={item}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailClinic);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\ManagePatient.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\RemedyModal.js",["475","476"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './RemedyModal.scss';\r\nimport { Modal, Button, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nimport { CommonUtils } from \"../../../utils\";\r\n\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\n\r\nclass RemedyModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            imgBase64: '',\r\n            phoneNumber: ''\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email,\r\n                 phoneNumber: this.props.dataModal.phoneNumber\r\n            })\r\n        }\r\n\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.dataModal !== this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email,\r\n                 phoneNumber: this.props.dataModal.phoneNumber\r\n            })\r\n        }\r\n\r\n    }\r\n    handleOnChangeEmail = (event) => {\r\n        this.setState({\r\n            email: event.target.value\r\n        })\r\n    }\r\n    handleOnChangePhoneNumber = (event) => {\r\n        this.setState({\r\n            phoneNumber: event.target.value\r\n        })\r\n    }\r\n    handleOnChangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            this.setState({\r\n                imgBase64: base64\r\n            })\r\n        }\r\n      \r\n    }\r\n    handleSendRemedy = () => {\r\n        this.props.sendRemedy(this.state)\r\n    }\r\n\r\n\r\n    render() {\r\n        let { isOpenModal, closeRemedyModal, dataModal, sendRemedy} = this.props\r\n        return (\r\n           <Modal\r\n           isOpen={isOpenModal}\r\n           className={'booking-modal-container'}\r\n                size=\"lg\"\r\n                style={{ maxWidth: '100vw', width: '100%' }}>\r\n            <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\"><FormattedMessage id=\"patient.booking-modal.info-booking\" /></h5>\r\n                <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={closeRemedyModal}>\r\n                    <span aria-hidden=\"true\">x</span>\r\n                </button>\r\n            </div>\r\n            <ModalBody>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-8 form-group\">\r\n                            <label><FormattedMessage id=\"patient.booking-modal.email\" /></label>\r\n                            <input className=\"form-control\" type=\"email\" value={this.state.email}\r\n                            onChange={(event) => this.handleOnChangeEmail(event)}\r\n                                disabled\r\n                            />\r\n                            <label><FormattedMessage id=\"patient.booking-modal.phoneNumber\" /></label>\r\n                            <input className=\"form-control\" type=\"text\" value={this.state.phoneNumber}\r\n                                onChange={(event) => this.handleOnChangePhoneNumber(event)}\r\n                                disabled\r\n                            />\r\n\r\n                        </div>\r\n                        <div className=\"col-8 form-group\">\r\n                            <label>Chọn file đơn thuốc</label>\r\n                            <input className=\"form-control-file\" type=\"file\" \r\n                                onChange={(event) => this.handleOnChangeImage(event)}\r\n                            />\r\n                        </div>\r\n\r\n                    </div>\r\n                    \r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button color=\"primary\" onClick={() => this.handleSendRemedy()}>Send</Button>\r\n                <Button color=\"secondary\" onClick={closeRemedyModal}>Cancel</Button>\r\n            </ModalFooter>\r\n           \r\n\r\n           </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RemedyModal);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\Patient.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Patient\\Manage_Patient.js",["477"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './ManagePatient.scss';\r\nimport DatePicker from '../../../components/Input/DatePicker';\r\nimport moment from 'moment';\r\nimport { getAllBookingForPatient, postCancelPatientRemedy } from '../../../services/userService';\r\nimport { LANGUAGES, CommonUtils } from '../../../utils';\r\nimport RemedyPatientModal from '../Doctor/RemedyPatientModal';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport LoadingOverLay from \"react-loading-overlay\";\r\n\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css';\r\nimport CancelPatientModal from './CancelPatientModal';\r\nimport TableManageBooking from './TableManageBooking';\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\n\r\n\r\nclass Manage_Patient extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentDate: moment(new Date()).startOf('day').valueOf(),\r\n            dataPatient: [],\r\n            isOpenRemedyModal: false,\r\n            dataModal: {},\r\n            isShowLoading: false,\r\n            isOpen: false,\r\n            previewImgURL: '',\r\n            avatar: '',\r\n            bookingArr: [],\r\n            booking: '',\r\n            action: '',\r\n            isOpenCancelModal: false,\r\n          \r\n            // bookingsPatientRedux: [],\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        // this.props.fetchBookingPatientRedux();\r\n        this.getDataPatient()\r\n\r\n    }\r\n    getDataPatient = async () => {\r\n        let { user } = this.props;\r\n        let { currentDate } = this.state;\r\n        let formatedDate = new Date(currentDate).getTime();\r\n        let res = await getAllBookingForPatient({\r\n            patientId: user.id,\r\n            date: formatedDate\r\n        })\r\n        if (res && res.errCode === 0) {\r\n            this.setState({\r\n                dataPatient: res.data\r\n            })\r\n        }\r\n    }\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        // if (prevProps.listPatientBookings !== this.props.listPatientBookings) {\r\n        //     this.setState({\r\n        //         bookingsPatientRedux: this.props.listPatientBookings,\r\n        //     })\r\n        // }\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n    }\r\n    // handleDeletePatientBooking = (booking) => {\r\n    //     this.props.deleteBookingPatientRedux(booking.id);\r\n    //     console.log('booking id: ' + booking.id);\r\n    // }\r\n    handleBtnCancel = (item) => {\r\n        let data = {\r\n            doctorId: item.doctorId,\r\n            patientId: item.patientId,\r\n            email: item.patientData.email,\r\n            timeType: item.timeType,\r\n            patientName: item.patientData.firstName,\r\n            plantName: item.plantName,\r\n            reasons: item.reasons,\r\n            avatar: item.image,\r\n            \r\n        }\r\n        this.setState({\r\n            isOpenCancelModal: true,\r\n            dataModal: data,\r\n            avatar: ''\r\n        })\r\n\r\n    }\r\n    handleOnChangeDatePicker = (date) => {\r\n        this.setState({\r\n            currentDate: date[0]\r\n        },\r\n            async () => {\r\n\r\n                await this.getDataPatient()\r\n            })\r\n    }\r\n    handleBtnConfirm = (item) => {\r\n        let data = {\r\n            doctorId: item.doctorId,\r\n            patientId: item.patientId,\r\n            email: item.patientData.email,\r\n            timeType: item.timeType,\r\n            patientName: item.patientData.firstName,\r\n            plantName: item.plantName,\r\n            reasons: item.reasons,\r\n            avatar: item.image,\r\n            statusId: item.statusId,\r\n            doctorName: `${item.doctorNameData.lastName} ${item.doctorNameData.firstName}`\r\n        }\r\n        this.setState({\r\n            isOpenRemedyModal: true,\r\n            dataModal: data,\r\n            avatar: ''\r\n        })\r\n\r\n    }\r\n    closeRemedyModal = () => {\r\n        this.setState({\r\n            isOpenRemedyModal: false,\r\n            dataModal: {}\r\n        })\r\n\r\n    }\r\n    closeCancelPatientModal = () => {\r\n        this.setState({\r\n            isOpenCancelModal: false,\r\n            dataModal: {}\r\n        })\r\n\r\n    }\r\n    cancelRemedy = async (dataChild) => {\r\n        let { dataModal } = this.state;\r\n        this.setState({\r\n            isShowLoading: true\r\n        })\r\n        let res = await postCancelPatientRemedy({\r\n            email: dataChild.email,\r\n            doctorId: dataModal.doctorId,\r\n            patientId: dataModal.patientId,\r\n            timeType: dataModal.timeType,\r\n            language: this.props.language,\r\n            patientName: dataModal.patientName,\r\n        })\r\n        if (res && res.errCode === 0) {\r\n            this.setState({\r\n                isShowLoading: false\r\n            })\r\n            toast.success('Send Cancel succeeds');\r\n            this.closeCancelModal();\r\n            await this.getDataPatient();\r\n        } else {\r\n            this.setState({\r\n                isShowLoading: false\r\n            })\r\n            toast.error('Something went wrong...');\r\n            console.log('error remedy is:', res)\r\n        }\r\n    }\r\n    // sendRemedy = async (dataChild) => {\r\n    //     let {dataModal} = this.state;\r\n    //     this.setState({\r\n    //         isShowLoading: true\r\n    //     })\r\n    //     let res = await postSendRemedy({\r\n    //         email: dataChild.email,\r\n    //         imgBase64: dataChild.imgBase64,\r\n    //         doctorId: dataModal.doctorId,\r\n    //         patientId: dataModal.patientId,\r\n    //         timeType: dataModal.timeType,\r\n    //         language: this.props.language,\r\n    //         patientName: dataModal.patientName,\r\n    //     })\r\n    //     if(res && res.errCode === 0) {\r\n    //         this.setState({\r\n    //             isShowLoading: false\r\n    //         })\r\n    //         toast.success('Send Remedy succeeds');\r\n    //         this.closeRemedyModal();\r\n    //         await this.getDataPatient();\r\n    //     }else{\r\n    //         this.setState({\r\n    //             isShowLoading: false\r\n    //         })\r\n    //         toast.error('Something went wrong...');\r\n    //         console.log('error remdey is:', res)\r\n    //     }\r\n    // }\r\n    handleOnChangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            let objectUrl = URL.createObjectURL(file);\r\n            this.setState({\r\n                previewImgURL: objectUrl,\r\n                avatar: base64,\r\n            })\r\n        }\r\n    }\r\n    openPreviewImage = () => {\r\n        if (!this.state.previewImgURL) return;\r\n        this.setState({\r\n            isOpen: true\r\n        })\r\n    }\r\n    handleEditUserFromParent = (item) => {\r\n        let imageBase64 = '';\r\n        if (item.image) {\r\n            imageBase64 = new Buffer(item.image, 'base64').toString('binary');\r\n            //Buffer cung cấp cách xử lý dữ liệu dạng nhị phân, \r\n            //câu lệnh trên xử lý dữ liệu BLOB (được mã hóa là base64) sang dữ liệu binary \r\n        }\r\n        this.setState({\r\n\r\n            avatar: '',\r\n            previewImgURL: imageBase64,\r\n\r\n        })\r\n    }\r\n    render() {\r\n        let { language } = this.props;\r\n        let { dataPatient, isOpenRemedyModal, dataModal, avatar, isOpenCancelModal } = this.state;\r\n       \r\n        return (\r\n            <>\r\n                <LoadingOverLay active={this.state.isShowLoading}\r\n                    spinner\r\n                    text='Loading...'>\r\n                    <div className=\"manage-patient-container\">\r\n                        <div className=\"m-p-title\"><FormattedMessage id=\"patient.booking-modal.manage-booking\" /></div>\r\n                        <div className=\"manage-patient-body row\">\r\n                            <div className=\"col-4 form-group\">\r\n                                <label><FormattedMessage id=\"patient.booking-modal.time\" /></label>\r\n                                <DatePicker\r\n                                    onChange={this.handleOnChangeDatePicker}\r\n                                    className=\"form-control\"\r\n                                    value={this.state.currentDate} />\r\n                            </div>\r\n\r\n                            <div className=\"col-12 table-manage-patient\">\r\n                                <table style={{ width: '100%' }}>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.numerical-order\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.doctorName\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.email\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.time\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.fullName\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.phoneNumber\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.address\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.plantName\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.reason\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.avatar\" /></th>\r\n                                            <th>Actions</th>\r\n\r\n\r\n                                        </tr>\r\n                                        {dataPatient && dataPatient.length > 0 ?\r\n                                            dataPatient.map((item, index) => {\r\n                                                let time = language === LANGUAGES.VI ?\r\n                                                    item.timeTypeDataPatient.valueVi : item.timeTypeDataPatient.valueEn;\r\n                                                return (\r\n                                                    <tr key={index}>\r\n                                                        <td>{index + 1}</td>\r\n                                                        <td>{`${item.doctorNameData.lastName} ${item.doctorNameData.firstName}`}</td>\r\n                                                        <td>{item.patientData.email}</td>\r\n                                                        <td>{time}</td>\r\n                                                        <td>{item.patientData.firstName}</td>\r\n                                                        <td>{item.phoneNumber}</td>\r\n                                                        <td>{item.patientData.address}</td>\r\n                                                        <td>{item.plantName}</td>\r\n                                                        <td>{item.reasons}</td>\r\n                                                        <td>   <div className=\"preview-img-container\">\r\n                                                            <input id=\"previewImg\" type=\"file\" hidden\r\n                                                                onChange={(event) => this.handleOnChangeImage(event)} />\r\n                                                            <div className=\"preview-image\" style={{ backgroundImage: `url(${this.state.previewImgURL})` }}\r\n                                                                onClick={() => this.openPreviewImage()}\r\n                                                            >\r\n\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            <button className=\"mp-btn-confirm\"\r\n                                                                onClick={() => this.handleBtnConfirm(item)}><FormattedMessage id=\"patient.booking-modal.btnConfirm\" /></button>\r\n                                                            <button className=\"mp-btn-confirm\" onClick={() => this.handleEditUserFromParent(item)}><FormattedMessage id=\"patient.booking-modal.view-image\" /></button>\r\n                                                            <button className=\"mp-btn-confirm\"\r\n                                                                onClick={() => this.handleBtnCancel(item)}>Hủy lịch</button>\r\n                                                            {/* <button className=\"btn-delete\" onClick={() => this.handleDeletePatientBooking(item)}><i className=\"fa-solid fa-trash\"></i></button> */}\r\n                                                        </td>\r\n\r\n                                                    </tr>\r\n                                                )\r\n                                            })\r\n                                            : <tr>\r\n                                                <td colSpan=\"6\" style={{ textAlign: \"center\" }}>\r\n                                                    no data\r\n                                                </td>\r\n                                            </tr>}\r\n                                    </tbody>\r\n\r\n\r\n\r\n                                </table>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className=\"contact\">Muốn trở thành đối tác của chúng tôi? Hãy liên hệ 0981xxxxxx ngay! </div>\r\n                       \r\n                    </div>\r\n                    <RemedyPatientModal\r\n                        isOpenModal={isOpenRemedyModal}\r\n                        dataModal={dataModal}\r\n                        closeRemedyModal={this.closeRemedyModal}\r\n                    />\r\n                    <CancelPatientModal\r\n                        isOpenCancel={isOpenCancelModal}\r\n                        dataModal={dataModal}\r\n                        closeCancelPatientModal={this.closeCancelPatientModal}\r\n                        cancelRemedy={this.cancelRemedy} />\r\n                    {this.state.isOpen === true &&\r\n                        <Lightbox\r\n                            mainSrc={this.state.previewImgURL}\r\n                            onCloseRequest={() => this.setState({ isOpen: false })} />}\r\n                </LoadingOverLay>\r\n                <div className=\"col-12 mb-5\">\r\n                    <TableManageBooking\r\n                        handleEditUserFromParentKey={this.handleEditUserFromParent}\r\n                        action={this.state.action} />\r\n                </div>\r\n\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        user: state.user.userInfo,\r\n        // listPatientBookings: state.admin.patientBookings\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        // fetchBookingPatientRedux: () => dispatch(actions.fetchAllBookingPatientStart()),\r\n        // deleteBookingPatientRedux: (id) => dispatch(actions.deleteBookingPatientService(id)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Manage_Patient);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\RemedyPatientModal.js",["478"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './RemedyModal.scss';\r\nimport { Modal, Button, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { CommonUtils } from \"../../../utils\";\r\nimport { withRouter } from 'react-router';\r\nclass RemedyPatientModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            imgBase64: '',\r\n            statusId: '',\r\n          doctorId: ''\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email,\r\n                statusId: this.props.dataModal.statusId,\r\n                doctorId: this.props.dataModal.doctorId,\r\n              \r\n            })\r\n        }\r\n\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.dataModal !== this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email,\r\n                statusId: this.props.dataModal.statusId,\r\n                doctorId: this.props.dataModal.doctorId,\r\n            })\r\n        }\r\n\r\n    }\r\n    handleViewDetailDoctor = (doctorId) => {\r\n        if (this.props.history) {\r\n          \r\n            this.props.history.push(`/detail-doctor/${doctorId}`);\r\n        }\r\n\r\n    }\r\n    handleOnChangeEmail = (event) => {\r\n        this.setState({\r\n            email: event.target.value,\r\n            fullName: event.target.value\r\n        })\r\n    }\r\n  \r\n    handleOnChangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            this.setState({\r\n                imgBase64: base64\r\n            })\r\n        }\r\n\r\n    }\r\n    handleSendRemedy = () => {\r\n        this.props.sendRemedy(this.state)\r\n    }\r\n\r\n    handleOnChangeStatus = (event) => {\r\n        this.setState({\r\n            statusId: event.target.value\r\n        })\r\n    }\r\n    handleOnChangeDoctorId = (event) => {\r\n        this.setState({\r\n            doctorId: event.target.value\r\n        })\r\n    }\r\n    render() {\r\n        let { isOpenModal, closeRemedyModal, dataModal, sendRemedy } = this.props\r\n        console.log('check dataModal', dataModal)\r\n        return (\r\n            <Modal\r\n                isOpen={isOpenModal}\r\n                className={'booking-modal-container'}\r\n                size=\"lg\"\r\n                style={{ maxWidth: '100vw', width: '100%' }}>\r\n                <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\"><FormattedMessage id=\"patient.booking-modal.info-booking\" /></h5>\r\n                    <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={closeRemedyModal}>\r\n                        <span aria-hidden=\"true\">x</span>\r\n                    </button>\r\n                </div>\r\n                <ModalBody>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-8 form-group\">\r\n                            <label><FormattedMessage id=\"patient.booking-modal.email\" /></label>\r\n                            <input className=\"form-control\" type=\"email\" value={this.state.email}\r\n                                onChange={(event) => this.handleOnChangeEmail(event)}\r\n                                disabled\r\n                            />\r\n                          \r\n                        </div>\r\n                        <div className=\"col-4 form-group\">\r\n                            <label><FormattedMessage id=\"patient.booking-modal.status\" /></label>\r\n                            <input className=\"form-control\" type=\"text\" value={this.state.statusId}\r\n                                onChange={(event) => this.handleOnChangeStatus(event)}\r\n                                disabled\r\n                            />\r\n                        </div>\r\n                        {/* <div className=\"col-4 form-group\">\r\n                            <label>DoctorId</label>\r\n                            <input className=\"form-control\" type=\"text\" value={this.state.doctorId}\r\n                                onChange={(event) => this.handleOnChangeDoctorId(event)}\r\n                                disabled\r\n                            />\r\n                        </div> */}\r\n\r\n\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <div><FormattedMessage id=\"patient.booking-modal.info-status\" /></div>\r\n                    <Button color=\"primary\" onClick={() => this.handleViewDetailDoctor(this.state.doctorId)}><FormattedMessage id=\"patient.booking-modal.viewdoctor\" /></Button>\r\n                    <Button color=\"secondary\" onClick={closeRemedyModal}>Cancel</Button>\r\n                </ModalFooter>\r\n\r\n\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RemedyPatientModal));\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Admin\\ManagePatients.js",["479"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './ManagePatient.scss';\r\nimport DatePicker from '../../../components/Input/DatePicker';\r\nimport moment from 'moment';\r\nimport { getAllBookingForAdmin } from '../../../services/userService';\r\nimport { LANGUAGES, CommonUtils, CRUD_ACTIONS } from '../../../utils';\r\nimport RemedyAdminModal from '../Doctor/RemedyAdminModal';\r\n\r\nimport LoadingOverLay from \"react-loading-overlay\";\r\n\r\nimport * as actions from \"../../../store/actions\";\r\nimport TableManagePatients from './TableManagePatients';\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css'; // This only needs to be imported once in your app\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\n\r\n\r\nclass ManagePatients extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentDate: moment(new Date()).startOf('day').valueOf(),\r\n            dataPatient: [],\r\n            isOpenRemedyModal: false,\r\n            dataModal: {},\r\n            isShowLoading: false,\r\n            isOpen: false,\r\n            previewImgURL: '',\r\n            avatar: '',\r\n            bookingArr: [],\r\n            booking: '',\r\n            action: ''\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        this.props.getBookingAdminStart();\r\n        this.getDataPatient();\r\n\r\n\r\n\r\n    }\r\n    getDataPatient = async () => {\r\n        let { currentDate } = this.state;\r\n        let formatedDate = new Date(currentDate).getTime();\r\n        let res = await getAllBookingForAdmin({\r\n\r\n            date: formatedDate\r\n        })\r\n        if (res && res.errCode === 0) {\r\n            this.setState({\r\n                dataPatient: res.data\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n        if (prevProps.bookingRedux !== this.props.bookingRedux) {\r\n            let arrBookings = this.props.bookingRedux;\r\n            this.setState({\r\n                bookingArr: arrBookings,\r\n                booking: arrBookings && arrBookings.length > 0 ? arrBookings[0].keyMap : '',\r\n            })\r\n        }\r\n        if (prevProps.listBookings !== this.props.listBookings) {\r\n            let arrBookings = this.props.bookingRedux;\r\n            this.setState({\r\n                email: '',\r\n                plantName: '',\r\n                firstName: '',\r\n                reasons: '',\r\n                address: '',\r\n                action: CRUD_ACTIONS.DELETE,\r\n                booking: arrBookings && arrBookings.length > 0 ? arrBookings[0].keyMap : ''\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    handleOnChangeDatePicker = (date) => {\r\n        this.setState({\r\n            currentDate: date[0]\r\n        },\r\n            async () => {\r\n\r\n                await this.getDataPatient()\r\n            })\r\n    }\r\n    handleBtnConfirm = (item) => {\r\n        let data = {\r\n            doctorId: item.doctorId,\r\n            patientId: item.patientId,\r\n            email: item.patientData.email,\r\n            timeType: item.timeType,\r\n            patientName: item.patientData.firstName,\r\n            plantName: item.plantName,\r\n            reasons: item.reasons,\r\n            avatar: item.image,\r\n            statusId: item.statusId,\r\n            doctorName: `${item.doctorNameData.lastName} ${item.doctorNameData.firstName}`\r\n        }\r\n        this.setState({\r\n            isOpenRemedyModal: true,\r\n            dataModal: data,\r\n            avatar: ''\r\n        })\r\n\r\n    }\r\n    closeRemedyModal = () => {\r\n        this.setState({\r\n            isOpenRemedyModal: false,\r\n            dataModal: {}\r\n        })\r\n\r\n    }\r\n    // sendRemedy = async (dataChild) => {\r\n    //     let { dataModal } = this.state;\r\n    //     this.setState({\r\n    //         isShowLoading: true\r\n    //     })\r\n    //     let res = await postSendRemedy({\r\n    //         email: dataChild.email,\r\n    //         imgBase64: dataChild.imgBase64,\r\n    //         doctorId: dataModal.doctorId,\r\n    //         patientId: dataModal.patientId,\r\n    //         timeType: dataModal.timeType,\r\n    //         language: this.props.language,\r\n    //         patientName: dataModal.patientName,\r\n    //     })\r\n    //     if (res && res.errCode === 0) {\r\n    //         this.setState({\r\n    //             isShowLoading: false\r\n    //         })\r\n    //         toast.success('Send Remedy succeeds');\r\n    //         this.closeRemedyModal();\r\n    //         await this.getDataPatient();\r\n    //     } else {\r\n    //         this.setState({\r\n    //             isShowLoading: false\r\n    //         })\r\n    //         toast.error('Something went wrong...');\r\n    //         console.log('error remdey is:', res)\r\n    //     }\r\n    // }\r\n    handleOnChangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            let objectUrl = URL.createObjectURL(file);\r\n            this.setState({\r\n                previewImgURL: objectUrl,\r\n                avatar: base64,\r\n            })\r\n        }\r\n    }\r\n    openPreviewImage = () => {\r\n        if (!this.state.previewImgURL) return;\r\n        this.setState({\r\n            isOpen: true\r\n        })\r\n    }\r\n    handleEditUserFromParent = (item) => {\r\n        let imageBase64 = '';\r\n        if (item.image) {\r\n            imageBase64 = new Buffer(item.image, 'base64').toString('binary');\r\n            //Buffer cung cấp cách xử lý dữ liệu dạng nhị phân, \r\n            //câu lệnh trên xử lý dữ liệu BLOB (được mã hóa là base64) sang dữ liệu binary \r\n        }\r\n        this.setState({\r\n\r\n            avatar: '',\r\n            previewImgURL: imageBase64,\r\n\r\n        })\r\n    }\r\n    render() {\r\n        let { language } = this.props;\r\n        let { dataPatient, isOpenRemedyModal, dataModal, avatar } = this.state;\r\n        console.log('checl lang: ' + language)\r\n        return (\r\n            <>\r\n\r\n                <LoadingOverLay active={this.state.isShowLoading}\r\n                    spinner\r\n                    text='Loading...'>\r\n                    <div className=\"manage-patient-container\">\r\n                        <div className=\"title text-center\">MANAGE BOOKING</div>\r\n\r\n                        <div className=\"manage-patient-body row\">\r\n                            <div className=\"col-4 form-group\">\r\n                                <label><FormattedMessage id=\"patient.booking-modal.time\" /></label>\r\n                                <DatePicker\r\n                                    onChange={this.handleOnChangeDatePicker}\r\n                                    className=\"form-control\"\r\n                                    value={this.state.currentDate} />\r\n                            </div>\r\n\r\n                            <div className=\"col-12 table-manage-patient\">\r\n                                <table style={{ width: '100%' }}>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.numerical-order\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.doctorName\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.email\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.time\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.fullName\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.phoneNumber\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.address\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.plantName\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.reason\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.avatar\" /></th>\r\n                                            <th>Actions</th>\r\n\r\n\r\n                                        </tr>\r\n                                        {dataPatient && dataPatient.length > 0 ?\r\n                                            dataPatient.map((item, index) => {\r\n                                                let time = language === LANGUAGES.VI ?\r\n                                                    item.timeTypeDataPatient.valueVi : item.timeTypeDataPatient.valueEn;\r\n                                                return (\r\n                                                    <tr key={index}>\r\n                                                        <td>{index + 1}</td>\r\n                                                        <td>{`${item.doctorNameData.lastName} ${item.doctorNameData.firstName}`}</td>\r\n                                                        <td>{item.patientData.email}</td>\r\n                                                        <td>{time}</td>\r\n                                                        <td>{item.patientData.firstName}</td>\r\n                                                        <td>{item.phoneNumber}</td>\r\n                                                        <td>{item.patientData.address}</td>\r\n                                                        <td>{item.plantName}</td>\r\n                                                        <td>{item.reasons}</td>\r\n                                                        <td>   <div className=\"preview-img-container\">\r\n                                                            <input id=\"previewImg\" type=\"file\" hidden\r\n                                                                onChange={(event) => this.handleOnChangeImage(event)} />\r\n                                                            <div className=\"preview-image\" style={{ backgroundImage: `url(${this.state.previewImgURL})` }}\r\n                                                                onClick={() => this.openPreviewImage()}\r\n                                                            >\r\n\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            <button className=\"mp-btn-confirm\"\r\n                                                                onClick={() => this.handleBtnConfirm(item)}><FormattedMessage id=\"patient.booking-modal.confirm\" /></button>\r\n                                                            <button onClick={() => this.handleEditUserFromParent(item)}><FormattedMessage id=\"patient.booking-modal.check\" /></button>\r\n\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                )\r\n                                            })\r\n                                            : <tr>\r\n                                                <td colSpan=\"6\" style={{ textAlign: \"center\" }}>\r\n                                                    no data\r\n                                                </td>\r\n                                            </tr>}\r\n                                    </tbody>\r\n\r\n\r\n\r\n                                </table>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <RemedyAdminModal\r\n                        isOpenModal={isOpenRemedyModal}\r\n                        dataModal={dataModal}\r\n                        closeRemedyModal={this.closeRemedyModal}\r\n                        />\r\n                    {this.state.isOpen === true &&\r\n                        <Lightbox\r\n                            mainSrc={this.state.previewImgURL}\r\n                            onCloseRequest={() => this.setState({ isOpen: false })} />}\r\n\r\n                </LoadingOverLay>\r\n\r\n                <div className=\"col-12 mb-5\">\r\n                    <TableManagePatients\r\n                        handleEditUserFromParentKey={this.handleEditUserFromParent}\r\n                        action={this.state.action} />\r\n                </div>\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        user: state.user.userInfo,\r\n        listBookings: state.admin.bookings\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getBookingAdminStart: () => dispatch(actions.fetchAllBookingAdminStart()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManagePatients);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\RemedyAdminModal.js",["480"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './RemedyModal.scss';\r\nimport { Modal, Button, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { withRouter } from 'react-router';\r\nimport { CommonUtils } from \"../../../utils\";\r\n\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\n\r\nclass RemedyAdminModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            imgBase64: '',\r\n            statusId: '',\r\n            doctorId: ''\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email,\r\n                statusId: this.props.dataModal.statusId,\r\n                doctorId: this.props.dataModal.doctorId,\r\n\r\n            })\r\n        }\r\n\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.dataModal !== this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email,\r\n                statusId: this.props.dataModal.statusId,\r\n                doctorId: this.props.dataModal.doctorId,\r\n            })\r\n        }\r\n\r\n    }\r\n    handleViewDetailDoctor = (doctorId) => {\r\n        if (this.props.history) {\r\n\r\n            this.props.history.push(`/detail-doctor/${doctorId}`);\r\n        }\r\n\r\n    }\r\n    handleOnChangeEmail = (event) => {\r\n        this.setState({\r\n            email: event.target.value\r\n        })\r\n    }\r\n    handleOnChangeStatus = (event) => {\r\n        this.setState({\r\n            statusId: event.target.value\r\n        })\r\n    }\r\n    handleOnChangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            this.setState({\r\n                imgBase64: base64\r\n            })\r\n        }\r\n\r\n    }\r\n  \r\n    handleOnChangeDoctorId = (event) => {\r\n        this.setState({\r\n            doctorId: event.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { isOpenModal, closeRemedyModal, dataModal } = this.props\r\n        return (\r\n            <Modal\r\n                isOpen={isOpenModal}\r\n                className={'booking-modal-container'}\r\n                size=\"lg\"\r\n                style={{ maxWidth: '100vw', width: '100%' }}>\r\n                <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\"><FormattedMessage id=\"patient.booking-modal.info-booking\" /></h5>\r\n                    <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={closeRemedyModal}>\r\n                        <span aria-hidden=\"true\">x</span>\r\n                    </button>\r\n                </div>\r\n                <ModalBody>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-8 form-group\">\r\n                            <label><FormattedMessage id=\"patient.booking-modal.email\" /></label>\r\n                            <input className=\"form-control\" type=\"email\" value={this.state.email}\r\n                                onChange={(event) => this.handleOnChangeEmail(event)}\r\n                                disabled\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-4 form-group\">\r\n                            <label><FormattedMessage id=\"patient.booking-modal.status\" /></label>\r\n                            <input className=\"form-control\" type=\"text\" value={this.state.statusId}\r\n                                onChange={(event) => this.handleOnChangeStatus(event)}\r\n                                disabled\r\n                            />\r\n                        </div>\r\n                       \r\n\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" onClick={() => this.handleViewDetailDoctor(this.state.doctorId)}><FormattedMessage id=\"patient.booking-modal.viewdoctor\" /></Button>\r\n                    <Button color=\"secondary\" onClick={closeRemedyModal}>Cancel</Button>\r\n                </ModalFooter>\r\n\r\n\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RemedyAdminModal));\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\Admin.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\TableManageClinic.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\TableManageSpecialty.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Handbook\\ManageHandbook.js",["481","482","483","484","485"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { LANGUAGES, CRUD_ACTIONS, CommonUtils } from '../../../utils';\r\nimport './ManageHandbook.scss';\r\nimport TableManageHandbook from '../TableManageHandbook';\r\nimport * as actions from '../../../store/actions';\r\nimport Lightbox from 'react-image-lightbox';\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\nimport 'react-image-lightbox/style.css'; // This only needs to be imported once in your app\r\nconst mdParser = new MarkdownIt();\r\nclass ManageHandbook extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            descriptionMarkdown: '',\r\n            descriptionHTML: '',\r\n\r\n            handbookArr: [],\r\n\r\n            isOpen: false,\r\n            previewImgURL: '',\r\n            name: '',\r\n            handbook: '',\r\n            avatar: '',\r\n            action: '',\r\n            handbookEditId: '',\r\n\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n\r\n        this.props.getHandbookStart();\r\n\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.handbookRedux !== this.props.handbookRedux) {\r\n            let arrHandbooks = this.props.handbookRedux;\r\n            this.setState({\r\n                handbookArr: arrHandbooks,\r\n                handbook: arrHandbooks && arrHandbooks.length > 0 ? arrHandbooks[0].keyMap : '',\r\n            })\r\n        }\r\n        if (prevProps.listHandbooks !== this.props.listHandbooks) {\r\n            let arrHandbooks = this.props.handbookRedux;\r\n            this.setState({\r\n                name: '',\r\n                handbook: arrHandbooks && arrHandbooks.length > 0 ? arrHandbooks[0].keyMap : '',\r\n                avatar: '',\r\n                action: CRUD_ACTIONS.CREATE,\r\n                previewImgURL: '',\r\n                descriptionMarkdown: '',\r\n                descriptionHTML: ''\r\n            })\r\n        }\r\n    }\r\n    handleOnChangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            let objectUrl = URL.createObjectURL(file);\r\n            this.setState({\r\n                previewImgURL: objectUrl,\r\n                avatar: base64,\r\n            })\r\n        }\r\n    }\r\n    openPreviewImage = () => {\r\n        if (!this.state.previewImgURL) return;\r\n        this.setState({\r\n            isOpen: true\r\n        })\r\n    }\r\n    handleSaveHandbook = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === false) return;\r\n        let { action } = this.state;\r\n        if (action === CRUD_ACTIONS.CREATE) {\r\n            this.props.createNewHandbook({\r\n                name: this.state.name,\r\n                avatar: this.state.avatar,\r\n                descriptionHTML: this.state.descriptionHTML,\r\n                descriptionMarkdown: this.state.descriptionMarkdown\r\n            })\r\n        }\r\n        if (action === CRUD_ACTIONS.EDIT) {\r\n            let isValid = this.checkValidateInput();\r\n            if (isValid === false) return;\r\n            this.props.editHandbookRedux({\r\n                id: this.state.handbookEditId,\r\n                name: this.state.name,\r\n                avatar: this.state.avatar,\r\n                descriptionHTML: this.state.descriptionHTML,\r\n                descriptionMarkdown: this.state.descriptionMarkdown\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrCheck = ['name', 'descriptionHTML', 'descriptionMarkdown']\r\n        for (let i = 0; i < arrCheck.length; i++) {\r\n            if (!this.state[arrCheck[i]]) {\r\n                isValid = false;\r\n                alert('This input is required: ' + arrCheck[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    }\r\n    onChangeInput = (event, id) => {\r\n        let copyState = { ...this.state }\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState,\r\n        })\r\n    }\r\n\r\n    handleEditHandbookFromParent = (handbook) => {\r\n        let imageBase64 = '';\r\n        if (handbook.image) {\r\n            imageBase64 = new Buffer(handbook.image, 'base64').toString('binary');\r\n            //Buffer cung cấp cách xử lý dữ liệu dạng nhị phân, \r\n            //câu lệnh trên xử lý dữ liệu BLOB (được mã hóa là base64) sang dữ liệu binary \r\n        }\r\n        this.setState({\r\n            name: handbook.name,\r\n\r\n            avatar: '',\r\n            previewImgURL: imageBase64,\r\n            action: CRUD_ACTIONS.EDIT,\r\n            handbookEditId: handbook.id,\r\n            descriptionHTML: handbook.descriptionHTML,\r\n            descriptionMarkdown: handbook.descriptionMarkdown\r\n        })\r\n    }\r\n    handleEditorChange = ({ html, text }) => {\r\n        this.setState({\r\n            descriptionMarkdown: text,\r\n            descriptionHTML: html,\r\n        })\r\n    }\r\n    render() {\r\n\r\n\r\n        let language = this.props.language;\r\n        let { name, avatar, descriptionHTML, descriptionMarkdown } = this.state;\r\n        //đây là cách viết của ES7\r\n        return (\r\n\r\n            <div className=\"user-redux-container\" >\r\n                <div className=\"title\">\r\n                    <FormattedMessage id=\"menu.admin.manage-handbook\" />\r\n                </div>\r\n                <div className=\"user-redux-body\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                {''}\r\n                            </div>\r\n                            <div className=\"col-md-3 mb-3\">\r\n                                <label htmlFor=\"validationServerUsername\"><FormattedMessage id=\"menu.admin.common-diseases\" /></label>\r\n                                <div className=\"input-group\">\r\n                                    <input type=\"text\" className=\"form-control\" id=\"validationServerUsername\" placeholder=\"...\" aria-describedby=\"inputGroupPrepend3\" required\r\n                                        value={name}\r\n                                        onChange={(event) => { this.onChangeInput(event, 'name') }}\r\n                                    // disabled={this.state.action === CRUD_ACTIONS.EDIT ? true : false} \r\n                                    />\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n\r\n\r\n\r\n                        </div>\r\n                        <div className=\"row\">\r\n\r\n                            <div className=\"col-md-6 mb-3\">\r\n                                <label htmlFor=\"validationServer02\"> <FormattedMessage id=\"create-user.image\" /></label>\r\n                                <div className=\"preview-img-container\">\r\n                                    <input id=\"previewImg\" type=\"file\" hidden\r\n                                        onChange={(event) => this.handleOnChangeImage(event)} />\r\n                                    <label className=\"label-upload\" htmlFor=\"previewImg\">Upload<i className=\"fa-solid fa-upload\"></i></label>\r\n                                    <div className=\"preview-image\" style={{ backgroundImage: `url(${this.state.previewImgURL})` }}\r\n                                        onClick={() => this.openPreviewImage()}\r\n                                    >\r\n\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n\r\n\r\n                        <div className=\"form-group\">\r\n                            <div className=\"form-check\">\r\n                                <input className=\"form-check-input is-invalid\" type=\"checkbox\" value=\"\" id=\"invalidCheck3\" required />\r\n                                <label className=\"form-check-label\" htmlFor=\"invalidCheck3\">\r\n                                    <FormattedMessage id=\"create-user.agree\" />\r\n                                </label>\r\n                                <div className=\"invalid-feedback\">\r\n                                    <FormattedMessage id=\"create-user.confirm\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"container-fluid manage-doctor-editor\">\r\n                            <MdEditor style={{ height: '300px' }} renderHTML={text => mdParser.render(text)}\r\n                                onChange={this.handleEditorChange}\r\n                                value={this.state.descriptionMarkdown} />\r\n                        </div>\r\n                        <div className=\"col-12 my-3\">\r\n                            <button className={this.state.action === CRUD_ACTIONS.EDIT ? \"btn btn-warning\" : \"btn btn-primary\"} type=\"submit\"\r\n                                onClick={() => this.handleSaveHandbook()}>\r\n                                {this.state.action === CRUD_ACTIONS.EDIT ?\r\n                                    <FormattedMessage id=\"manage-user.edit\"></FormattedMessage>\r\n                                    : <FormattedMessage id=\"manage-user.save\"></FormattedMessage>}\r\n                                {/* <FormattedMessage id=\"create-user.submit\"/> */}\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"col-12 mb-5\">\r\n                            <TableManageHandbook\r\n                                handleEditHandbookFromParentKey={this.handleEditHandbookFromParent}\r\n                                action={this.state.action} />\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                {this.state.isOpen === true &&\r\n                    <Lightbox\r\n                        mainSrc={this.state.previewImgURL}\r\n                        onCloseRequest={() => this.setState({ isOpen: false })} />}\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        listHandbooks: state.admin.handbooks\r\n    };\r\n};\r\n//những cái biến state ở trên hàm mapStateToProps được khai báo trùng với các biến ở trên file này, không cần khai báo ở file\r\n//khác và có thể sử dụng ở file khác, vế trái là ta tự khai báo\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getHandbookStart: () => dispatch(actions.fetchAllHandbookStart()),\r\n        createNewHandbook: (data) => dispatch(actions.createNewHandbook(data)),\r\n        editHandbookRedux: (data) => dispatch(actions.editHandbook(data))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageHandbook);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\TableManageHandbook.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Handbook\\DetailHandbook.js",["486","487","488"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './DetailHandbook.scss';\r\nimport HomeHeader from '../../HomePage/HomeHeader';\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\nimport { getAllDetailHandbookById} from '../../../services/userService';\r\nimport _ from 'lodash';\r\nimport {LANGUAGES} from '../../../utils';\r\nclass DetailHandbook extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n           \r\n            dataDetailHandbook: {}\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            let id = this.props.match.params.id;\r\n\r\n            let res = await getAllDetailHandbookById({\r\n                id: id\r\n            });\r\n            if (res && res.errCode === 0) {\r\n                let data = res.data;\r\n\r\n                if (data && !_.isEmpty(res.data)) {\r\n                    this.setState({\r\n                        dataDetailHandbook: res.data,\r\n\r\n                    })\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n    }\r\n    render() {\r\n        let {  dataDetailHandbook } = this.state;\r\n        console.log('handbook check state', this.state)\r\n        let {language} = this.props;\r\n        return (\r\n            <div className=\"detail-specialty-container\">\r\n                <HomeHeader />\r\n                <div className=\"detail-specialty-body\">\r\n                    <div className=\"description-specialty\">\r\n                        {dataDetailHandbook && !_.isEmpty(dataDetailHandbook)\r\n                        &&<div dangerouslySetInnerHTML={{ __html: dataDetailHandbook.descriptionHTML}}>\r\n                            </div>\r\n                            }\r\n                    </div>\r\n                  \r\n                 \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailHandbook);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Admin\\TableManagePatients.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\CancelModal.js",["489","490"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './CancelModal.scss';\r\nimport { Modal, Button, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\n\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\n\r\nclass CancelModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n          \r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email\r\n            })\r\n        }\r\n\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.dataModal !== this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email\r\n            })\r\n        }\r\n\r\n    }\r\n    handleOnChangeEmail = (event) => {\r\n        this.setState({\r\n            email: event.target.value\r\n        })\r\n    }\r\n \r\n    handleCancelRemedy = () => {\r\n        this.props.cancelRemedy(this.state)\r\n    }\r\n\r\n\r\n    render() {\r\n        let { isOpenCancel, closeCancelModal, dataModal, cancelRemedy } = this.props\r\n        return (\r\n            <Modal\r\n                isOpen={isOpenCancel}\r\n                className={'booking-modal-container'}\r\n                size=\"lg\"\r\n                style={{ maxWidth: '100vw', width: '100%' }}>\r\n                <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\"><FormattedMessage id=\"patient.booking-modal.cancel-booking\" /></h5>\r\n                    <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={closeCancelModal}>\r\n                        <span aria-hidden=\"true\">x</span>\r\n                    </button>\r\n                </div>\r\n                <ModalBody>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-8 form-group\">\r\n                            <label><FormattedMessage id=\"patient.booking-modal.email\" /></label>\r\n                            <input className=\"form-control\" type=\"email\" value={this.state.email}\r\n                                onChange={(event) => this.handleOnChangeEmail(event)}\r\n                                disabled\r\n                            />\r\n                        </div>\r\n                        \r\n\r\n                    </div>\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" onClick={() => this.handleCancelRemedy()}><FormattedMessage id=\"patient.booking-modal.send\" /></Button>\r\n                    <Button color=\"secondary\" onClick={closeCancelModal}>Cancel</Button>\r\n                </ModalFooter>\r\n\r\n\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CancelModal);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Patient\\CancelPatientModal.js",["491","492"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './CancelPatientModal.scss';\r\nimport { Modal, Button, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\n\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\n\r\nclass CancelPatientModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email\r\n            })\r\n        }\r\n\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.dataModal !== this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email\r\n            })\r\n        }\r\n\r\n    }\r\n    handleOnChangeEmail = (event) => {\r\n        this.setState({\r\n            email: event.target.value\r\n        })\r\n    }\r\n\r\n    handleCancelRemedy = () => {\r\n        this.props.cancelRemedy(this.state)\r\n    }\r\n\r\n\r\n    render() {\r\n        let { isOpenCancel, closeCancelPatientModal, dataModal, cancelRemedy } = this.props\r\n        return (\r\n            <Modal\r\n                isOpen={isOpenCancel}\r\n                className={'booking-modal-container'}\r\n                size=\"lg\"\r\n                style={{ maxWidth: '100vw', width: '100%' }}>\r\n                <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\"><FormattedMessage id=\"patient.booking-modal.cancel-booking\" /></h5>\r\n                    <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={closeCancelPatientModal}>\r\n                        <span aria-hidden=\"true\">x</span>\r\n                    </button>\r\n                </div>\r\n                <ModalBody>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-8 form-group\">\r\n                            <label><FormattedMessage id=\"patient.booking-modal.email\" /></label>\r\n                            <input className=\"form-control\" type=\"email\" value={this.state.email}\r\n                                onChange={(event) => this.handleOnChangeEmail(event)}\r\n                                disabled\r\n                            />\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" onClick={() => this.handleCancelRemedy()}><FormattedMessage id=\"patient.booking-modal.send\" /></Button>\r\n                    <Button color=\"secondary\" onClick={closeCancelPatientModal}>Cancel</Button>\r\n                </ModalFooter>\r\n\r\n\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CancelPatientModal);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\TableManageBookings.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Patient\\TableManageBooking.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\DoctorManageSchedule.js",["493","494","495"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './ManageSchedule.scss';\r\n\r\nimport * as actions from \"../../../store/actions\";\r\nimport {  LANGUAGES } from '../../../utils';\r\nimport DatePicker from '../../../components/Input/DatePicker';\r\nimport moment from 'moment';\r\nimport { toast } from \"react-toastify\";\r\nimport _ from 'lodash';\r\nimport { saveBulkScheduleDoctor } from '../../../services/userService';\r\nclass DoctorManageSchedule extends Component {\r\n    // PROPS stands for properties and is being used for passing data from one component to another.\r\n    // But the important part here is that data with props are being passed in a uni-directional flow. ( one way from parent to child)\r\n\r\n    //để lưu giá trị của 1 biến components, ta dùng state\r\n    //Component là một block code độc lập để phân chia các UI (giao diện người dùng) thành các phân nhỏ riêng lẻ để dễ dàng quản lý và tái sử dụng.\r\n    constructor(props) {\r\n        super(props);\r\n      \r\n        this.state = {\r\n            \r\n            currentDate: '',\r\n            rangeTime: [],\r\n            minDate: moment().calendar(),\r\n            \r\n            \r\n            \r\n           \r\n        }\r\n    }\r\n   async componentDidMount() {\r\n       let { userInfo } = this.props;\r\n \r\n        this.props.fetchAllScheduleTimes();\r\n    }\r\n    \r\n\r\n  async  componentDidUpdate(prevProps, prevState, snapshot) {\r\n       \r\n        //Là để check xem khi API đã trả về dữ liệu rồi thì làm gì...\r\n        if (prevProps.allScheduleTime !== this.props.allScheduleTime) {\r\n            let data = this.props.allScheduleTime;\r\n            if (data && data.length > 0) {\r\n                data = data.map(item => ({ ...item, isSelected: false }))\r\n            }\r\n            this.setState({\r\n                rangeTime: data\r\n            })\r\n        }\r\n    }\r\n    buildDataInputSelect = (inputData) => {\r\n        //chúng ta có thể đặt là inputData hoặc gì cũng ok, vì nó phụ thuộc vào props ở bên dưới\r\n        let result = [];\r\n        let { language,userInfo } = this.props;\r\n        if (inputData && inputData.length > 0) {\r\n\r\n            inputData.map((item, index) => {\r\n                let object = {};\r\n                let labelEn = `${item.lastName} ${item.firstName}`;\r\n                let labelVi = `${item.firstName} ${item.lastName}`;\r\n                object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                object.value = userInfo.id;\r\n                result.push(object)\r\n            })\r\n\r\n        }\r\n        return result;\r\n\r\n    }\r\n    handleOnChangeDatePicker = (date) => {\r\n        this.setState({\r\n            currentDate: date[0]\r\n            //thư viện date này sẽ trả về 1 array nhiều phần tử\r\n            // nếu ta bấm liên tục nhiều lần, vì vậy date[0] là để lấy giá trị ngày đầu tiên trong array\r\n        })\r\n    }\r\n    handleClickBtnTime = (time) => {\r\n        let { rangeTime } = this.state;\r\n        if (rangeTime && rangeTime.length > 0) {\r\n            rangeTime = rangeTime.map(item => {\r\n                if (item.id === time.id) item.isSelected = !item.isSelected;\r\n                return item;\r\n            })\r\n            this.setState({\r\n                rangeTime: rangeTime\r\n            })\r\n        }\r\n    }\r\n    handleSaveSchedule = async () => {\r\n        let { rangeTime, currentDate } = this.state;\r\n        let {userInfo} = this.props;\r\n        let result = [];\r\n        if (!currentDate) {\r\n            toast.error(\"Invalid date!\");\r\n\r\n        }\r\n        if (userInfo && _.isEmpty(userInfo)) {\r\n            toast.error(\"Invalid selected doctor! \");\r\n            console.log('check doctor: ', this.state)\r\n            return;\r\n        }\r\n\r\n        let formatedDate = new Date(currentDate).getTime();\r\n\r\n        if (rangeTime && rangeTime.length > 0) {\r\n            let selectedTime = rangeTime.filter(item => item.isSelected === true);\r\n            if (selectedTime && selectedTime.length > 0) {\r\n                selectedTime.map((schedule, index) => {\r\n                    // chúng ta thay schedule bằng cái gì cũng được, react tự hiểu đấy là 1 phần tử của arr đó\r\n                    let object = {};\r\n                    object.doctorId = userInfo.id;\r\n                    object.date = formatedDate;\r\n                    object.timeType = schedule.keyMap;\r\n                    result.push(object);\r\n                })\r\n            } else {\r\n                toast.error(\"Invalid selected time! \");\r\n                return;\r\n            }\r\n        }\r\n        let res = await saveBulkScheduleDoctor({\r\n            arrSchedule: result,\r\n            doctorId: userInfo.id,\r\n            formatedDate: formatedDate\r\n        })\r\n        if (res && res.errCode === 0) {\r\n            toast.success(\"Save Infor succeed!\");\r\n        } else {\r\n            toast.error(\"error saveBulkScheduleDoctor \");\r\n            console.log('error saveBulkScheduleDoctor >>> res: ', res)\r\n        }\r\n        console.log('bao phuc check result: ', result);\r\n        console.log('check res: saveBulkScheduleDoctor : ', res);\r\n    }\r\n    render() {\r\n        let { rangeTime } = this.state;\r\n        let { language, userInfo } = this.props;\r\n        console.log(\"check doctor:\", userInfo)\r\n        let today = new Date(new Date().setDate(new Date().getDate()));\r\n        //khi muốn render ra 1 thứ gì đó trong react, chúng ta phải có hàm return, và trong đó bắt buộc là 1 khối\r\n\r\n\r\n        return (\r\n            <div className=\"manage-schedule-container\">\r\n                <div className=\"m-s-title\">\r\n                    <FormattedMessage id=\"manage-schedule.title\"></FormattedMessage> : {userInfo && userInfo.firstName && userInfo.lastName ? ' ' + userInfo.firstName + ' ' + userInfo.lastName : ' '}\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                       \r\n                            \r\n\r\n                        \r\n                        <div className=\"col-6 form-group\">\r\n                            <label>\r\n                                <FormattedMessage id=\"manage-schedule.choose-date\" /> </label>\r\n                            <DatePicker\r\n                                value={this.state.currentDate}\r\n                                className=\"form-control\"\r\n                                onChange={this.handleOnChangeDatePicker}\r\n                                minDate={today}\r\n                            //minDate là để lấy ngày hiện tại\r\n                            />\r\n\r\n                        </div>\r\n                        <div className=\"col-12 pick-hour-container\">\r\n                            {rangeTime && rangeTime.length > 0 &&\r\n                                rangeTime.map((item, index) => {\r\n                                    return (\r\n                                        <button className={item.isSelected === true ?\r\n                                            \"btn btn-schedule active\" : \"btn btn-schedule\"}\r\n                                            key={index} onClick={() => this.handleClickBtnTime(item)}>\r\n                                            {language === LANGUAGES.VI ? item.valueVi : item.valueEn}\r\n                                        </button>\r\n                                    )\r\n                                })}\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                            <button className=\"btn btn-primary btn-save-schedule\"\r\n                                onClick={() => this.handleSaveSchedule()}>\r\n                                <FormattedMessage id=\"manage-schedule.save\" />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        userInfo: state.user.userInfo,\r\n        allScheduleTime: state.admin.allScheduleTime,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n       \r\n        fetchAllScheduleTimes: () => dispatch(actions.fetchAllScheduleTimes())\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DoctorManageSchedule);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\ManageSchedule.js",["496","497","498","499","500","501"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './ManageSchedule.scss';\r\nimport Select from 'react-select';\r\nimport * as actions from \"../../../store/actions\";\r\nimport {  LANGUAGES, CRUD_ACTIONS } from '../../../utils';\r\nimport DatePicker from '../../../components/Input/DatePicker';\r\nimport moment from 'moment';\r\nimport { toast } from \"react-toastify\";\r\nimport _ from 'lodash';\r\nimport { saveBulkScheduleDoctor,getDetailInforDoctor } from '../../../services/userService';\r\nclass ManageSchedule extends Component {\r\n    // PROPS stands for properties and is being used for passing data from one component to another.\r\n    // But the important part here is that data with props are being passed in a uni-directional flow. ( one way from parent to child)\r\n\r\n    //để lưu giá trị của 1 biến components, ta dùng state\r\n    //Component là một block code độc lập để phân chia các UI (giao diện người dùng) thành các phân nhỏ riêng lẻ để dễ dàng quản lý và tái sử dụng.\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            listDoctors: [],\r\n            selectedDoctor: {},\r\n            currentDate: '',\r\n            rangeTime: [],\r\n            minDate: moment().calendar(),\r\n            listPrice: [],\r\n            selectedPrice:{},\r\n            hasOldData: false,\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.props.fetchAllDoctors();\r\n        this.props.fetchAllScheduleTimes();\r\n        // this.props.fetchAllPrice();\r\n        this.props.getAllRequiredDoctorInfor();\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.allDoctors !== this.props.allDoctors) {\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors, 'USERS')\r\n            this.setState({\r\n                listDoctors: dataSelect\r\n            })\r\n        }\r\n        //Là để check xem khi API đã trả về dữ liệu rồi thì làm gì...\r\n        if (prevProps.allScheduleTime !== this.props.allScheduleTime) {\r\n            let data = this.props.allScheduleTime;\r\n            if (data && data.length > 0) {\r\n                data = data.map(item => ({ ...item, isSelected: false }))\r\n            }\r\n            this.setState({\r\n                rangeTime: data\r\n            })\r\n        }\r\n        if (prevProps.allRequiredDoctorInfor !== this.props.allRequiredDoctorInfor) {\r\n            let { resPrice} = this.props.allRequiredDoctorInfor;\r\n            let dataSelectPrice = this.buildDataInputSelect(resPrice, 'PRICE');\r\n           \r\n            console.log('bao phuc check data new: ', dataSelectPrice);\r\n            this.setState({\r\n                listPrice: dataSelectPrice\r\n              \r\n            })\r\n        }\r\n        if (prevProps.language !== this.props.language) {\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors, 'USERS');\r\n            let { resPrice} = this.props.allRequiredDoctorInfor;\r\n            let dataSelectPrice = this.buildDataInputSelect(resPrice, 'PRICE');\r\n           \r\n            this.setState({\r\n                listDoctors: dataSelect,\r\n                listPrice: dataSelectPrice,\r\n\r\n            })\r\n\r\n        }\r\n    }\r\n    buildDataInputSelect = (inputData, type) => {\r\n        console.log(\"check input data\", inputData)\r\n        //inputData đã được lấy từ componentDidMount(), cụ thể là this.props; \r\n        let result = [];\r\n        let { language } = this.props;\r\n        if (inputData && inputData.length > 0) {\r\n            if (type === 'USERS') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    let labelEn = `${item.lastName} ${item.firstName} `;\r\n                    let labelVi = `${item.firstName} ${item.lastName}`;\r\n                    object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                    object.value = item.id;\r\n                    result.push(object);\r\n                })\r\n            }\r\n            if (type === 'PRICE') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    let labelEn = `${item.valueEn} USD`;\r\n                    let labelVi = `${item.valueVi}`;\r\n                    object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                    object.value = item.keyMap;\r\n                    result.push(object);\r\n                })\r\n            }\r\n           \r\n        }\r\n        return result;\r\n    }\r\n    handleChangeSelectDoctorInfor = async (selectedDoctor, name) => {\r\n        let stateName = name.name;\r\n        let stateCopy = { ...this.state };\r\n        stateCopy[stateName] = selectedDoctor;\r\n        this.setState({\r\n            ...stateCopy\r\n        })\r\n    }\r\n    handleChangeSelect = async (selectedDoctor) => {\r\n        this.setState({ selectedDoctor }, () =>\r\n            console.log(`Doctor selected:`, this.state.selectedDoctor)\r\n        );\r\n        let {  listPrice } = this.state;\r\n        let res = await getDetailInforDoctor(selectedDoctor.value);\r\n        if (res && res.errCode === 0 && res.data && res.data.Markdown) {\r\n           \r\n            let \r\n                priceId = '', selectedPrice = '';\r\n            if (res.data.Doctor_Infor) {\r\n              \r\n                priceId = res.data.Doctor_Infor.priceId;\r\n               \r\n               \r\n                selectedPrice = listPrice.find(item => {\r\n                    return item && item.value === priceId\r\n                })\r\n              \r\n            }\r\n            this.setState({\r\n              \r\n                hasOldData: true,\r\n               \r\n                selectedPrice: selectedPrice,\r\n              \r\n            })\r\n            //để lấy thông tin từ bảng markdown rồi in ra màn hình, ta có thể gọi api như trên, rồi dùng hàm setState\r\n        } else {\r\n            this.setState({\r\n               \r\n                hasOldData: false,\r\n              \r\n                selectedPrice: '',\r\n               \r\n            })\r\n        }\r\n\r\n    };\r\n    handleOnChangeDatePicker = (date) => {\r\n        this.setState({\r\n            currentDate: date[0]\r\n            //thư viện date này sẽ trả về 1 array nhiều phần tử\r\n            // nếu ta bấm liên tục nhiều lần, vì vậy date[0] là để lấy giá trị ngày đầu tiên trong array\r\n        })\r\n    }\r\n    handleClickBtnTime = (time) => {\r\n        let { rangeTime } = this.state;\r\n        if (rangeTime && rangeTime.length > 0) {\r\n            rangeTime = rangeTime.map(item => {\r\n                if (item.id === time.id) item.isSelected = !item.isSelected;\r\n                return item;\r\n            })\r\n            this.setState({\r\n                rangeTime: rangeTime\r\n            })\r\n        }\r\n    }\r\n    handleSaveSchedule =  () => {\r\n        let { rangeTime, selectedDoctor, currentDate, selectedPrice} = this.state;\r\n        let result = [];\r\n        if (!currentDate) {\r\n            toast.error(\"Invalid date!\");\r\n\r\n        }\r\n        if (selectedDoctor && _.isEmpty(selectedDoctor)) {\r\n            toast.error(\"Invalid selected doctor! \");\r\n            console.log('check doctor: ', this.state)\r\n            return;\r\n        }\r\n        if (selectedPrice && _.isEmpty(selectedPrice)) {\r\n            toast.error(\"Invalid selected price! \");\r\n            console.log('check price: ', this.state)\r\n            return;\r\n        }\r\n        let formatedDate = new Date(currentDate).getTime();\r\n\r\n        if (rangeTime && rangeTime.length > 0) {\r\n            let selectedTime = rangeTime.filter(item => item.isSelected === true);\r\n            if (selectedTime && selectedTime.length > 0) {\r\n                selectedTime.map((schedule, index) => {\r\n                    // chúng ta thay schedule bằng cái gì cũng được, react tự hiểu đấy là 1 phần tử của arr đó\r\n                    let object = {};\r\n                    object.doctorId = selectedDoctor.value;\r\n                    object.date = formatedDate;\r\n                    object.timeType = schedule.keyMap;\r\n                    object.priceId = selectedPrice.value;\r\n                    result.push(object);\r\n                })\r\n            } else {\r\n                toast.error(\"Invalid selected time! \");\r\n                return;\r\n            }\r\n        }\r\n        let res = this.props.saveScheduleDoctor({\r\n            arrSchedule: result,\r\n            doctorId: selectedDoctor.value,\r\n            formatedDate: formatedDate,\r\n           selectedPrice: selectedPrice.value\r\n        })\r\n        if (res && res.errCode === 0) {\r\n            toast.success(\"Save Schedule succeed!\");\r\n        } else {\r\n          \r\n            console.log('error saveScheduleDoctor >>> res: ', res)\r\n        }\r\n        console.log('bao phuc check result: ', result);\r\n        console.log('check res: saveScheduleDoctor : ', res);\r\n    }\r\n   \r\n    render() {\r\n        let { rangeTime, hasOldData } = this.state;\r\n        let { language } = this.props;\r\n        let today = new Date(new Date().setDate(new Date().getDate()));\r\n        //khi muốn render ra 1 thứ gì đó trong react, chúng ta phải có hàm return, và trong đó bắt buộc là 1 khối\r\n\r\n\r\n        return (\r\n            <div className=\"manage-schedule-container\">\r\n                <div className=\"m-s-title\">\r\n                    <FormattedMessage id=\"manage-schedule.title\"></FormattedMessage>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 form-group\">\r\n                            <label>\r\n                                <FormattedMessage id=\"manage-schedule.choose-doctor\" /> </label>\r\n                            <Select\r\n                                value={this.state.selectedDoctor}\r\n                                onChange={this.handleChangeSelect}\r\n                                options={this.state.listDoctors}\r\n                            />\r\n\r\n                        </div>\r\n                        <div className=\"col-6 form-group\">\r\n                            <label>\r\n                                <FormattedMessage id=\"manage-schedule.choose-date\" /> </label>\r\n                            <DatePicker\r\n                                value={this.state.currentDate}\r\n                                className=\"form-control\"\r\n                                onChange={this.handleOnChangeDatePicker}\r\n                                minDate={today}\r\n                            //minDate là để lấy ngày hiện tại\r\n                            />\r\n\r\n                        </div>\r\n                        <div className=\"col-12 pick-hour-container\">\r\n                            {rangeTime && rangeTime.length > 0 &&\r\n                                rangeTime.map((item, index) => {\r\n                                    return (\r\n                                        <button className={item.isSelected === true ?\r\n                                            \"btn btn-schedule active\" : \"btn btn-schedule\"}\r\n                                            key={index} onClick={() => this.handleClickBtnTime(item)}>\r\n                                            {language === LANGUAGES.VI ? item.valueVi : item.valueEn}\r\n                                        </button>\r\n                                    )\r\n                                })}\r\n                        </div>\r\n                        <div className=\"col-4 form-group\">\r\n                            <label><FormattedMessage id=\"admin.manage-doctor.price\" /></label>\r\n                            <Select\r\n                                value={this.state.selectedPrice}\r\n                                onChange={this.handleChangeSelectDoctorInfor}\r\n                                options={this.state.listPrice}\r\n                                placeholder={<FormattedMessage id=\"admin.manage-doctor.price\" />}\r\n                                name=\"selectedPrice\"\r\n                                isDisabled={true}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                            <button className=\"btn btn-primary btn-save-schedule\"\r\n                                onClick={() => this.handleSaveSchedule()}>\r\n                                <FormattedMessage id=\"manage-schedule.save\" />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        allDoctors: state.admin.allDoctors,\r\n        allScheduleTime: state.admin.allScheduleTime,\r\n        allPrice: state.admin.price,\r\n        allRequiredDoctorInfor: state.admin.allRequiredDoctorInfor,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchAllDoctors: () => dispatch(actions.fetchAllDoctors()),\r\n        fetchAllScheduleTimes: () => dispatch(actions.fetchAllScheduleTimes()),\r\n        saveScheduleDoctor: (data) => dispatch(actions.saveScheduleDoctor(data)),\r\n        getAllRequiredDoctorInfor: () => dispatch(actions.getRequiredDoctorInfor()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageSchedule);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\BookingManager.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\BookingManager\\Manage_Booking.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\BookingManager\\TableManagePaidBooking.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\BookingManager\\CancelBookingModal.js",["502","503"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './CancelBookingModal.scss';\r\nimport { Modal, Button, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\n\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\n\r\nclass CancelBookingModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email\r\n            })\r\n        }\r\n\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.dataModal !== this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email\r\n            })\r\n        }\r\n\r\n    }\r\n    handleOnChangeEmail = (event) => {\r\n        this.setState({\r\n            email: event.target.value\r\n        })\r\n    }\r\n\r\n    handleCancelRemedy = () => {\r\n        this.props.cancelBooking(this.state)\r\n    }\r\n\r\n\r\n    render() {\r\n        let { isOpenBooking, closeBookingModal, dataModal, cancelBooking } = this.props\r\n        return (\r\n            <Modal\r\n                isOpen={isOpenBooking}\r\n                className={'booking-modal-container'}\r\n                size=\"lg\"\r\n                style={{ maxWidth: '100vw', width: '100%' }}>\r\n                <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\"><FormattedMessage id=\"patient.booking-modal.cancel-booking\" /></h5>\r\n                    <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={closeBookingModal}>\r\n                        <span aria-hidden=\"true\">x</span>\r\n                    </button>\r\n                </div>\r\n                <ModalBody>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-8 form-group\">\r\n                            <label><FormattedMessage id=\"patient.booking-modal.email\" /></label>\r\n                            <input className=\"form-control\" type=\"email\" value={this.state.email}\r\n                                onChange={(event) => this.handleOnChangeEmail(event)}\r\n                                disabled\r\n                            />\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" onClick={() => this.handleCancelRemedy()}><FormattedMessage id=\"patient.booking-modal.send\" /></Button>\r\n                    <Button color=\"secondary\" onClick={closeBookingModal}>Cancel</Button>\r\n                </ModalFooter>\r\n\r\n\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CancelBookingModal);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\BookingManager\\RemedyModal.js",["504","505","506"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\n// import './RemedyModal.scss';\r\nimport { Modal, Button, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { withRouter } from 'react-router';\r\nimport { CommonUtils, LANGUAGES } from \"../../../utils\";\r\nimport './stylepdf.scss';\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\nimport { getAllBookingForAdminBooking} from '../../../services/userService';\r\nclass RemedyModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            view: 'pdf',\r\n            phoneNumber: '',\r\n            patientName: '',\r\n            address: '',\r\n            plantName: '',\r\n            timeType: '',\r\n            reasons: '',\r\n            imgBase64: '',\r\n            doctorName: '',\r\n            price: '', \r\n            dataPatient: []\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email,\r\n                phoneNumber: this.props.dataModal.phoneNumber,\r\n                patientName: this.props.dataModal.patientName,\r\n                address: this.props.dataModal.address,\r\n                plantName: this.props.dataModal.plantName,\r\n              \r\n                reasons: this.props.dataModal.reasons,\r\n                price: this.props.dataModal.price,\r\n                doctorName: this.props.dataModal.doctorName\r\n            })\r\n        }\r\n        if (this.props.dataPatient) {\r\n            this.setState({\r\n               timeType: this.props.dataPatient.timeType\r\n            })\r\n        }\r\n    }\r\n \r\n   \r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.dataModal !== this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email,\r\n                phoneNumber: this.props.dataModal.phoneNumber,\r\n                patientName: this.props.dataModal.patientName,\r\n                address: this.props.dataModal.address,\r\n                plantName: this.props.dataModal.plantName,\r\n                // timeType: this.props.dataModal.timeType,\r\n                reasons: this.props.dataModal.reasons,\r\n                price: this.props.dataModal.price,\r\n                doctorName: this.props.dataModal.doctorName\r\n            })\r\n        }\r\n        if (prevProps.dataPatient !== this.props.dataPatient) {\r\n            this.setState({\r\n              \r\n                timeType: this.props.dataPatient.timeType,\r\n              \r\n            })\r\n        }\r\n\r\n    }\r\n    switchView = () => {\r\n        this.setState({ view: this.state.view === 'pdf' ? 'print' : 'pdf' });\r\n    }\r\n\r\n\r\n    handleOnChangeEmail = (event) => {\r\n        this.setState({\r\n            email: event.target.value\r\n        })\r\n    }\r\n    handleOnChangePhoneNumber = (event) => {\r\n        this.setState({\r\n            phoneNumber: event.target.value\r\n        })\r\n    }\r\n    handleOnChangeFirstName = (event) => {\r\n        this.setState({\r\n            patientName: event.target.value\r\n        })\r\n    }\r\n    handleOnChangeAddress = (event) => {\r\n        this.setState({\r\n            address: event.target.value\r\n        })\r\n    }\r\n    handleOnChangeTime = (event) => {\r\n        this.setState({\r\n            timeType: event.target.value\r\n        })\r\n    }\r\n    handleOnChangePlantName = (event) => {\r\n        this.setState({\r\n            plantName: event.target.value\r\n        })\r\n    }\r\n    handleOnChangeReason = (event) => {\r\n        this.setState({\r\n            reasons: event.target.value\r\n        })\r\n    }\r\n    handleOnChangePrice = (event) => {\r\n        this.setState({\r\n            price: event.target.value\r\n        })\r\n    }\r\n    handleOnChangeDoctorName = (event) => {\r\n        this.setState({\r\n           doctorName: event.target.value\r\n        })\r\n    }\r\n    handleOnChangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            this.setState({\r\n                imgBase64: base64\r\n            })\r\n        }\r\n      \r\n    }\r\n    handleSendSchedule = () => {\r\n        this.props.sendSchedule(this.state)\r\n    }\r\n\r\n \r\n    render() {\r\n        let { isOpenModal, closeRemedyModal, dataModal, sendRemedy, language, dataPatient} = this.props;\r\n        // let time = language === LANGUAGES.VI ?\r\n        //    this.props.dataModal.timeType.valueVi :this.props.dataModal.timeType.valueEn;\r\n        \r\n        return (\r\n           <Modal\r\n           isOpen={isOpenModal}\r\n                size=\"lg\" style={{ maxWidth: '100vw', width: '100%' }}\r\n              \r\n           >\r\n                <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\"><FormattedMessage id=\"patient.booking-modal.info-booking\" /></h5>\r\n                    {/* <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={closeRemedyModal}>\r\n                        <span aria-hidden=\"true\">x</span>\r\n                    </button> */}\r\n                </div>\r\n            <ModalBody\r\n            >\r\n                    <div className={'modal-custom' + this.state.view }>\r\n                       \r\n                        <div id=\"buttons\">\r\n\r\n                            <button\r\n                                onClick={this.switchView}\r\n                                className={\r\n                                    'switch-view ' + (this.state.view === 'pdf' ? 'pdf' : 'print')\r\n                                }\r\n                            >\r\n                                Switch View\r\n                            </button>\r\n                            <button onClick={window.print} className=\"print-page\">\r\n                                Print\r\n                            </button>\r\n                        </div>\r\n                       \r\n                    </div>\r\n                   \r\n                            <label><FormattedMessage id=\"patient.booking-modal.email\" /></label>\r\n                            <input className=\"form-control\" type=\"email\" value={this.state.email}\r\n                            onChange={(event) => this.handleOnChangeEmail(event)}\r\n                                disabled\r\n                            />\r\n                            <label><FormattedMessage id=\"patient.booking-modal.phoneNumber\" /></label>\r\n                            <input className=\"form-control\" type=\"text\" value={this.state.phoneNumber}\r\n                                onChange={(event) => this.handleOnChangePhoneNumber(event)}\r\n                                disabled\r\n                            />\r\n                            <label><FormattedMessage id=\"patient.booking-modal.address\" /></label>\r\n                            <input className=\"form-control\" type=\"text\" value={this.state.address}\r\n                                onChange={(event) => this.handleOnChangeAddress(event)}\r\n                                disabled\r\n                            />\r\n                            <label><FormattedMessage id=\"patient.booking-modal.fullName\" /></label>\r\n                            <input className=\"form-control\" type=\"text\" value={this.state.patientName}\r\n                                onChange={(event) => this.handleOnChangeFirstName(event)}\r\n                                disabled\r\n                            />\r\n                            <label><FormattedMessage id=\"patient.booking-modal.plantName\" /></label>\r\n                            <input className=\"form-control\" type=\"text\" value={this.state.plantName}\r\n                                onChange={(event) => this.handleOnChangePlantName(event)}\r\n                                disabled\r\n                            />\r\n                  \r\n                            <label><FormattedMessage id=\"patient.booking-modal.time\" /></label>\r\n                    {dataPatient && dataPatient.length > 0 ?\r\n                        dataPatient.map((item, index) => {\r\n                            let time = language === LANGUAGES.VI ?\r\n                                item.timeTypeDataPatient.valueVi : item.timeTypeDataPatient.valueEn;\r\n                            return (\r\n                                \r\n                                    \r\n                                <input className=\"form-control\" type=\"text\" value={time}\r\n                                    onChange={(event) => this.handleOnChangePlantName(event)}\r\n                                    disabled\r\n                                />\r\n                                 \r\n                              \r\n                            )\r\n                        })\r\n                        : <div>no data</div>}\r\n                            {/* <input className=\"form-control\" type=\"text\" value={this.state.timeType} \r\n                                onChange={(event) => this.handleOnChangeTime(event)}\r\n                                disabled\r\n                            /> */}\r\n                            <label><FormattedMessage id=\"patient.booking-modal.reason\" /></label>\r\n                            <input className=\"form-control\" type=\"text\" value={this.state.reasons}\r\n                                onChange={(event) => this.handleOnChangeReason(event)}\r\n                                disabled\r\n                            />\r\n                    <label>PRICE:</label>\r\n                    <input className=\"form-control\" type=\"text\" value={this.state.price}\r\n                        onChange={(event) => this.handleOnChangePrice(event)}\r\n                        disabled\r\n                    />\r\n                    <label>Doctor's Name:</label>\r\n                    <input className=\"form-control\" type=\"text\" value={this.state.doctorName}\r\n                        onChange={(event) => this.handleOnChangeDoctorName(event)}\r\n                        disabled\r\n                    />\r\n                            <div class=\"left\">BỆNH NHÂN KÍ</div>\r\n                    <div class=\"right\">XÁC NHẬN CỦA BỆNH VIỆN</div>\r\n                      \r\n                    \r\n            </ModalBody>\r\n            <ModalFooter>\r\n                    <Button color=\"primary\" onClick={() => this.handleSendSchedule()}>OK</Button>\r\n                   \r\n                <Button color=\"secondary\" onClick={closeRemedyModal}>Cancel</Button>\r\n            </ModalFooter>\r\n           </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RemedyModal));\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\ScheduleTable.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\DoneTable.js",["507","508","509"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './ManagePatient.scss';\r\nimport DatePicker from '../../../components/Input/DatePicker';\r\nimport moment from 'moment';\r\nimport { getAllDoneBookingForDoctor } from '../../../services/userService';\r\nimport { LANGUAGES, CommonUtils } from '../../../utils';\r\nimport { toast } from 'react-toastify';\r\nimport LoadingOverLay from \"react-loading-overlay\";\r\n\r\nimport 'react-image-lightbox/style.css'; // This only needs to be imported once in your app\r\nimport Lightbox from 'react-image-lightbox';\r\n\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\n\r\n\r\nclass DoneTable extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentDate: moment(new Date()).startOf('day').valueOf(),\r\n            dataPatient: [],\r\n            isOpenRemedyModal: false,\r\n            isOpenBookingModal: false,\r\n            dataModal: {},\r\n            isShowLoading: false,\r\n            isOpen: false,\r\n            previewImgURL: '',\r\n            avatar: '',\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n\r\n        this.getDataPatient()\r\n\r\n    }\r\n\r\n\r\n    // if(data) {\r\n    //     let img = ({ data }) => <img src={`data:image/jpeg;base64,${data}`} />\r\n    // }\r\n\r\n    getDataPatient = async () => {\r\n        let { user } = this.props;\r\n        let status = 'S6'\r\n        let { currentDate } = this.state;\r\n        let formatedDate = new Date(currentDate).getTime();\r\n        let res = await getAllDoneBookingForDoctor({\r\n            statusId: status,\r\n            date: formatedDate,\r\n            doctorId: user.id\r\n        })\r\n        if (res && res.errCode === 0) {\r\n            this.setState({\r\n                dataPatient: res.data\r\n            })\r\n        }\r\n    }\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n    }\r\n\r\n\r\n    handleOnChangeDatePicker = (date) => {\r\n        this.setState({\r\n            currentDate: date[0]\r\n        },\r\n            async () => {\r\n\r\n                await this.getDataPatient()\r\n            })\r\n    }\r\n    //nút bấm xác nhận mở ra modal gửi thông tin khám bệnh\r\n    handleBtnConfirm = (item) => {\r\n        let data = {\r\n            doctorId: item.doctorId,\r\n            patientId: item.patientId,\r\n            email: item.patientData.email,\r\n            timeType: item.timeType,\r\n            patientName: item.patientData.firstName,\r\n            plantName: item.plantName,\r\n            reasons: item.reasons,\r\n            avatar: item.image,\r\n            phoneNumber: item.phoneNumber\r\n        }\r\n        this.setState({\r\n            isOpenRemedyModal: true,\r\n            dataModal: data,\r\n            avatar: ''\r\n        })\r\n\r\n    }\r\n    // handleBtnCancel = (item) => {\r\n    //     let data = {\r\n    //         doctorId: item.doctorId,\r\n    //         patientId: item.patientId,\r\n    //         email: item.patientData.email,\r\n    //         timeType: item.timeType,\r\n    //         patientName: item.patientData.firstName,\r\n    //         plantName: item.plantName,\r\n    //         reasons: item.reasons,\r\n    //         avatar: item.image,\r\n    //         phoneNumber: item.phoneNumber\r\n    //     }\r\n    //     this.setState({\r\n    //         isOpenBookingModal: true,\r\n    //         dataModal: data,\r\n    //         avatar: ''\r\n    //     })\r\n\r\n    // }\r\n    closeRemedyModal = () => {\r\n        this.setState({\r\n            isOpenRemedyModal: false,\r\n            dataModal: {}\r\n        })\r\n\r\n    }\r\n    closeBookingModal = () => {\r\n        this.setState({\r\n            isOpenBookingModal: false,\r\n            dataModal: {}\r\n        })\r\n\r\n    }\r\n    \r\n    // cancelBooking = async (dataChild) => {\r\n    //     let { dataModal } = this.state;\r\n    //     this.setState({\r\n    //         isShowLoading: true\r\n    //     })\r\n    //     let res = await postCancelBooking({\r\n    //         email: dataChild.email,\r\n    //         doctorId: dataModal.doctorId,\r\n    //         patientId: dataModal.patientId,\r\n    //         timeType: dataModal.timeType,\r\n    //         language: this.props.language,\r\n    //         patientName: dataModal.patientName,\r\n    //     })\r\n    //     if (res && res.errCode === 0) {\r\n    //         this.setState({\r\n    //             isShowLoading: false\r\n    //         })\r\n    //         toast.success('Send Cancel succeeds');\r\n    //         this.closeBookingModal();\r\n    //         await this.getDataPatient();\r\n    //     } else {\r\n    //         this.setState({\r\n    //             isShowLoading: false\r\n    //         })\r\n    //         toast.error('Something went wrong...');\r\n    //         console.log('error remdey is:', res)\r\n    //     }\r\n    // }\r\n    handleOnChangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            let objectUrl = URL.createObjectURL(file);\r\n            this.setState({\r\n                previewImgURL: objectUrl,\r\n                avatar: base64,\r\n            })\r\n        }\r\n    }\r\n    openPreviewImage = () => {\r\n        if (!this.state.previewImgURL) return;\r\n        this.setState({\r\n            isOpen: true\r\n        })\r\n    }\r\n    handleEditUserFromParent = (item) => {\r\n        let imageBase64 = '';\r\n        if (item.image) {\r\n            imageBase64 = new Buffer(item.image, 'base64').toString('binary');\r\n            //Buffer cung cấp cách xử lý dữ liệu dạng nhị phân, \r\n            //câu lệnh trên xử lý dữ liệu BLOB (được mã hóa là base64) sang dữ liệu binary \r\n        }\r\n        this.setState({\r\n\r\n            avatar: '',\r\n            previewImgURL: imageBase64,\r\n\r\n        })\r\n    }\r\n    render() {\r\n        let { language } = this.props;\r\n        let { dataPatient, dataModal, isOpenBookingModal } = this.state;\r\n        console.log('dataPatient:', dataPatient);\r\n        return (\r\n            <>\r\n                <LoadingOverLay active={this.state.isShowLoading}\r\n                    spinner\r\n                    text='Loading...'>\r\n                    <div className=\"manage-patient-container\">\r\n                        <div className=\"m-p-title\">LỊCH HẸN ĐÃ KHÁM</div>\r\n                        <div className=\"manage-patient-body row\">\r\n                            <div className=\"col-4 form-group\">\r\n                                <label><FormattedMessage id=\"patient.booking-modal.time\" /></label>\r\n                                <DatePicker\r\n                                    onChange={this.handleOnChangeDatePicker}\r\n                                    className=\"form-control\"\r\n                                    value={this.state.currentDate} />\r\n                            </div>\r\n\r\n                            <div className=\"col-12 table-manage-patient\">\r\n                                <table style={{ width: '100%' }}>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.numerical-order\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.time\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.fullName\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.phoneNumber\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.address\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.plantName\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.reason\" /></th>\r\n                                            <th><FormattedMessage id=\"patient.booking-modal.avatar\" /></th>\r\n                                            <th>Actions</th>\r\n                                        </tr>\r\n                                        {dataPatient && dataPatient.length > 0 ?\r\n                                            dataPatient.map((item, index) => {\r\n                                                let time = language === LANGUAGES.VI ?\r\n                                                    item.timeTypeDataPatient.valueVi : item.timeTypeDataPatient.valueEn;\r\n                                                return (\r\n                                                    <tr key={index}>\r\n                                                        <td>{index + 1}</td>\r\n                                                        <td>{time}</td>\r\n                                                        <td>{item.patientData.firstName}</td>\r\n                                                        <td>{item.phoneNumber}</td>\r\n                                                        <td>{item.patientData.address}</td>\r\n                                                        <td>{item.plantName}</td>\r\n                                                        <td>{item.reasons}</td>\r\n                                                        <td>   <div className=\"preview-img-container\">\r\n                                                            <input id=\"previewImg\" type=\"file\" hidden\r\n                                                                onChange={(event) => this.handleOnChangeImage(event)} />\r\n                                                            <div className=\"preview-image\" style={{ backgroundImage: `url(${this.state.previewImgURL})` }}\r\n                                                                onClick={() => this.openPreviewImage()}\r\n                                                            >\r\n\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        </td>\r\n                                                        <td>\r\n\r\n                                                            <button className=\"mp-btn-confirm\" onClick={() => this.handleEditUserFromParent(item)}><FormattedMessage id=\"patient.booking-modal.check\" /></button>\r\n                                                           \r\n                                                        </td>\r\n                                                    </tr>\r\n                                                )\r\n                                            })\r\n                                            : <tr>\r\n                                                <td colSpan=\"6\" style={{ textAlign: \"center\" }}>\r\n                                                    no data\r\n                                                </td>\r\n                                            </tr>}\r\n                                    </tbody>\r\n\r\n\r\n\r\n                                </table>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    {this.state.isOpen === true &&\r\n                        <Lightbox\r\n                            mainSrc={this.state.previewImgURL}\r\n                            onCloseRequest={() => this.setState({ isOpen: false })} />}\r\n\r\n                </LoadingOverLay>\r\n\r\n\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        user: state.user.userInfo,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DoneTable);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\ChangeStatusModal.js",["510","511"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './RemedyModal.scss';\r\nimport { Modal, Button, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nimport { CommonUtils } from \"../../../utils\";\r\n\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\n\r\nclass ChangeStatusModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            imgBase64: '',\r\n            phoneNumber: ''\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email,\r\n                phoneNumber: this.props.dataModal.phoneNumber\r\n            })\r\n        }\r\n\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.dataModal !== this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email,\r\n                phoneNumber: this.props.dataModal.phoneNumber\r\n            })\r\n        }\r\n\r\n    }\r\n    handleOnChangeEmail = (event) => {\r\n        this.setState({\r\n            email: event.target.value\r\n        })\r\n    }\r\n    handleOnChangePhoneNumber = (event) => {\r\n        this.setState({\r\n            phoneNumber: event.target.value\r\n        })\r\n    }\r\n    handleOnChangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            this.setState({\r\n                imgBase64: base64\r\n            })\r\n        }\r\n\r\n    }\r\n    handleSendChangeStatus = () => {\r\n        this.props.sendDone(this.state)\r\n    }\r\n\r\n\r\n    render() {\r\n        let { isOpenModal, closeRemedyModal, dataModal, sendRemedy } = this.props\r\n        return (\r\n            <Modal\r\n                isOpen={isOpenModal}\r\n                className={'booking-modal-container'}\r\n                size=\"lg\"\r\n                style={{ maxWidth: '100vw', width: '100%' }}>\r\n                <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\"><FormattedMessage id=\"patient.booking-modal.info-booking\" /></h5>\r\n                    <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={closeRemedyModal}>\r\n                        <span aria-hidden=\"true\">x</span>\r\n                    </button>\r\n                </div>\r\n                <ModalBody>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-8 form-group\">\r\n                            <label><FormattedMessage id=\"patient.booking-modal.email\" /></label>\r\n                            <input className=\"form-control\" type=\"email\" value={this.state.email}\r\n                                onChange={(event) => this.handleOnChangeEmail(event)}\r\n                                disabled\r\n                            />\r\n                            <label><FormattedMessage id=\"patient.booking-modal.phoneNumber\" /></label>\r\n                            <input className=\"form-control\" type=\"text\" value={this.state.phoneNumber}\r\n                                onChange={(event) => this.handleOnChangePhoneNumber(event)}\r\n                                disabled\r\n                            />\r\n\r\n                        </div>\r\n                       \r\n\r\n                    </div>\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" onClick={() => this.handleSendChangeStatus()}>Send</Button>\r\n                    <Button color=\"secondary\" onClick={closeRemedyModal}>Cancel</Button>\r\n                </ModalFooter>\r\n\r\n\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangeStatusModal);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\ReBookingModal.js",["512","513"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './RemedyModal.scss';\r\nimport { Modal, Button, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nimport { CommonUtils } from \"../../../utils\";\r\n\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\n\r\nclass ReBookingModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            imgBase64: '',\r\n            phoneNumber: ''\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email,\r\n                phoneNumber: this.props.dataModal.phoneNumber\r\n            })\r\n        }\r\n\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.dataModal !== this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email,\r\n                phoneNumber: this.props.dataModal.phoneNumber\r\n            })\r\n        }\r\n\r\n    }\r\n    handleOnChangeEmail = (event) => {\r\n        this.setState({\r\n            email: event.target.value\r\n        })\r\n    }\r\n    handleOnChangePhoneNumber = (event) => {\r\n        this.setState({\r\n            phoneNumber: event.target.value\r\n        })\r\n    }\r\n    handleOnChangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            this.setState({\r\n                imgBase64: base64\r\n            })\r\n        }\r\n\r\n    }\r\n    handleSendReBooking = () => {\r\n        this.props.sendReBooking(this.state)\r\n    }\r\n\r\n\r\n    render() {\r\n        let { isOpenReBookingModal, closeReBookingModal, dataModal, sendRemedy } = this.props\r\n        return (\r\n            <Modal\r\n                isOpen={isOpenReBookingModal}\r\n                className={'booking-modal-container'}\r\n                size=\"lg\"\r\n                style={{ maxWidth: '100vw', width: '100%' }}>\r\n                <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\"><FormattedMessage id=\"patient.booking-modal.info-booking\" /></h5>\r\n                    <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={closeReBookingModal}>\r\n                        <span aria-hidden=\"true\">x</span>\r\n                    </button>\r\n                </div>\r\n                <ModalBody>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-8 form-group\">\r\n                            <label><FormattedMessage id=\"patient.booking-modal.email\" /></label>\r\n                            <input className=\"form-control\" type=\"email\" value={this.state.email}\r\n                                onChange={(event) => this.handleOnChangeEmail(event)}\r\n                                disabled\r\n                            />\r\n                            <label><FormattedMessage id=\"patient.booking-modal.phoneNumber\" /></label>\r\n                            <input className=\"form-control\" type=\"text\" value={this.state.phoneNumber}\r\n                                onChange={(event) => this.handleOnChangePhoneNumber(event)}\r\n                                disabled\r\n                            />\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" onClick={() => this.handleSendReBooking()}>Send</Button>\r\n                    <Button color=\"secondary\" onClick={closeReBookingModal}>Cancel</Button>\r\n                </ModalFooter>\r\n\r\n\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReBookingModal);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\BookingManager\\utils.js",[],["514","515"],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\BookingManager\\SearchBooking.js",[],{"ruleId":"516","replacedBy":"517"},{"ruleId":"518","replacedBy":"519"},{"ruleId":"520","severity":1,"message":"521","line":56,"column":55,"nodeType":"522","messageId":"523","endLine":56,"endColumn":57},{"ruleId":"516","replacedBy":"524"},{"ruleId":"518","replacedBy":"525"},{"ruleId":"526","severity":1,"message":"527","line":28,"column":1,"nodeType":"528","endLine":33,"endColumn":3},{"ruleId":"520","severity":1,"message":"521","line":33,"column":64,"nodeType":"522","messageId":"523","endLine":33,"endColumn":66},{"ruleId":"520","severity":1,"message":"521","line":35,"column":61,"nodeType":"522","messageId":"523","endLine":35,"endColumn":63},{"ruleId":"516","replacedBy":"529"},{"ruleId":"518","replacedBy":"530"},{"ruleId":"531","severity":1,"message":"532","line":14,"column":17,"nodeType":"533","messageId":"534","endLine":14,"endColumn":21},{"ruleId":"526","severity":1,"message":"535","line":1,"column":1,"nodeType":"528","endLine":13,"endColumn":3},{"ruleId":"531","severity":1,"message":"536","line":2,"column":10,"nodeType":"533","messageId":"534","endLine":2,"endColumn":26},{"ruleId":"516","replacedBy":"537"},{"ruleId":"518","replacedBy":"538"},{"ruleId":"531","severity":1,"message":"536","line":2,"column":10,"nodeType":"533","messageId":"534","endLine":2,"endColumn":26},{"ruleId":"539","severity":1,"message":"540","line":40,"column":13,"nodeType":"541","messageId":"542","endLine":49,"endColumn":14},{"ruleId":"531","severity":1,"message":"543","line":51,"column":15,"nodeType":"533","messageId":"534","endLine":51,"endColumn":23},{"ruleId":"520","severity":1,"message":"521","line":61,"column":55,"nodeType":"522","messageId":"523","endLine":61,"endColumn":57},{"ruleId":"544","severity":1,"message":"545","line":102,"column":117,"nodeType":"546","endLine":102,"endColumn":193},{"ruleId":"516","replacedBy":"547"},{"ruleId":"518","replacedBy":"548"},{"ruleId":"544","severity":1,"message":"545","line":17,"column":33,"nodeType":"546","endLine":17,"endColumn":109},{"ruleId":"531","severity":1,"message":"549","line":254,"column":9,"nodeType":"533","messageId":"534","endLine":254,"endColumn":15},{"ruleId":"531","severity":1,"message":"550","line":8,"column":7,"nodeType":"533","messageId":"534","endLine":8,"endColumn":15},{"ruleId":"551","severity":1,"message":"552","line":66,"column":45,"nodeType":"553","messageId":"554","endLine":66,"endColumn":47},{"ruleId":"551","severity":1,"message":"552","line":76,"column":45,"nodeType":"553","messageId":"554","endLine":76,"endColumn":47},{"ruleId":"551","severity":1,"message":"552","line":86,"column":45,"nodeType":"553","messageId":"554","endLine":86,"endColumn":47},{"ruleId":"551","severity":1,"message":"552","line":96,"column":45,"nodeType":"553","messageId":"554","endLine":96,"endColumn":47},{"ruleId":"551","severity":1,"message":"552","line":104,"column":45,"nodeType":"553","messageId":"554","endLine":104,"endColumn":47},{"ruleId":"531","severity":1,"message":"555","line":9,"column":8,"nodeType":"533","messageId":"534","endLine":9,"endColumn":9},{"ruleId":"531","severity":1,"message":"556","line":35,"column":13,"nodeType":"533","messageId":"534","endLine":35,"endColumn":20},{"ruleId":"531","severity":1,"message":"557","line":136,"column":17,"nodeType":"533","messageId":"534","endLine":136,"endColumn":26},{"ruleId":"551","severity":1,"message":"552","line":165,"column":45,"nodeType":"553","messageId":"554","endLine":165,"endColumn":47},{"ruleId":"531","severity":1,"message":"558","line":288,"column":14,"nodeType":"533","messageId":"534","endLine":288,"endColumn":22},{"ruleId":"531","severity":1,"message":"556","line":297,"column":13,"nodeType":"533","messageId":"534","endLine":297,"endColumn":20},{"ruleId":"531","severity":1,"message":"559","line":4,"column":10,"nodeType":"533","messageId":"534","endLine":4,"endColumn":19},{"ruleId":"531","severity":1,"message":"558","line":153,"column":13,"nodeType":"533","messageId":"534","endLine":153,"endColumn":21},{"ruleId":"531","severity":1,"message":"549","line":154,"column":21,"nodeType":"533","messageId":"534","endLine":154,"endColumn":27},{"ruleId":"531","severity":1,"message":"560","line":154,"column":29,"nodeType":"533","messageId":"534","endLine":154,"endColumn":44},{"ruleId":"531","severity":1,"message":"561","line":154,"column":46,"nodeType":"533","messageId":"534","endLine":154,"endColumn":65},{"ruleId":"531","severity":1,"message":"536","line":2,"column":10,"nodeType":"533","messageId":"534","endLine":2,"endColumn":26},{"ruleId":"551","severity":1,"message":"552","line":42,"column":38,"nodeType":"553","messageId":"554","endLine":42,"endColumn":40},{"ruleId":"551","severity":1,"message":"552","line":89,"column":34,"nodeType":"553","messageId":"554","endLine":89,"endColumn":36},{"ruleId":"531","severity":1,"message":"559","line":4,"column":10,"nodeType":"533","messageId":"534","endLine":4,"endColumn":19},{"ruleId":"531","severity":1,"message":"558","line":160,"column":13,"nodeType":"533","messageId":"534","endLine":160,"endColumn":21},{"ruleId":"531","severity":1,"message":"549","line":162,"column":15,"nodeType":"533","messageId":"534","endLine":162,"endColumn":21},{"ruleId":"531","severity":1,"message":"560","line":162,"column":23,"nodeType":"533","messageId":"534","endLine":162,"endColumn":38},{"ruleId":"531","severity":1,"message":"561","line":162,"column":40,"nodeType":"533","messageId":"534","endLine":162,"endColumn":59},{"ruleId":"531","severity":1,"message":"536","line":2,"column":10,"nodeType":"533","messageId":"534","endLine":2,"endColumn":26},{"ruleId":"531","severity":1,"message":"559","line":12,"column":10,"nodeType":"533","messageId":"534","endLine":12,"endColumn":19},{"ruleId":"551","severity":1,"message":"552","line":39,"column":38,"nodeType":"553","messageId":"554","endLine":39,"endColumn":40},{"ruleId":"531","severity":1,"message":"558","line":65,"column":15,"nodeType":"533","messageId":"534","endLine":65,"endColumn":23},{"ruleId":"531","severity":1,"message":"562","line":69,"column":46,"nodeType":"533","messageId":"534","endLine":69,"endColumn":55},{"ruleId":"531","severity":1,"message":"563","line":69,"column":57,"nodeType":"533","messageId":"534","endLine":69,"endColumn":67},{"ruleId":"531","severity":1,"message":"549","line":231,"column":58,"nodeType":"533","messageId":"534","endLine":231,"endColumn":64},{"ruleId":"531","severity":1,"message":"563","line":83,"column":57,"nodeType":"533","messageId":"534","endLine":83,"endColumn":67},{"ruleId":"531","severity":1,"message":"549","line":187,"column":58,"nodeType":"533","messageId":"534","endLine":187,"endColumn":64},{"ruleId":"531","severity":1,"message":"562","line":82,"column":46,"nodeType":"533","messageId":"534","endLine":82,"endColumn":55},{"ruleId":"531","severity":1,"message":"559","line":4,"column":10,"nodeType":"533","messageId":"534","endLine":4,"endColumn":19},{"ruleId":"531","severity":1,"message":"558","line":153,"column":13,"nodeType":"533","messageId":"534","endLine":153,"endColumn":21},{"ruleId":"531","severity":1,"message":"549","line":154,"column":21,"nodeType":"533","messageId":"534","endLine":154,"endColumn":27},{"ruleId":"531","severity":1,"message":"560","line":154,"column":29,"nodeType":"533","messageId":"534","endLine":154,"endColumn":44},{"ruleId":"531","severity":1,"message":"561","line":154,"column":46,"nodeType":"533","messageId":"534","endLine":154,"endColumn":65},{"ruleId":"531","severity":1,"message":"536","line":2,"column":10,"nodeType":"533","messageId":"534","endLine":2,"endColumn":26},{"ruleId":"531","severity":1,"message":"559","line":9,"column":9,"nodeType":"533","messageId":"534","endLine":9,"endColumn":18},{"ruleId":"531","severity":1,"message":"558","line":53,"column":14,"nodeType":"533","messageId":"534","endLine":53,"endColumn":22},{"ruleId":"531","severity":1,"message":"562","line":50,"column":47,"nodeType":"533","messageId":"534","endLine":50,"endColumn":56},{"ruleId":"531","severity":1,"message":"564","line":50,"column":58,"nodeType":"533","messageId":"534","endLine":50,"endColumn":70},{"ruleId":"531","severity":1,"message":"562","line":50,"column":54,"nodeType":"533","messageId":"534","endLine":50,"endColumn":63},{"ruleId":"531","severity":1,"message":"564","line":50,"column":65,"nodeType":"533","messageId":"534","endLine":50,"endColumn":77},{"ruleId":"531","severity":1,"message":"543","line":34,"column":14,"nodeType":"533","messageId":"534","endLine":34,"endColumn":22},{"ruleId":"551","severity":1,"message":"552","line":59,"column":41,"nodeType":"553","messageId":"554","endLine":59,"endColumn":43},{"ruleId":"551","severity":1,"message":"552","line":110,"column":52,"nodeType":"553","messageId":"554","endLine":110,"endColumn":54},{"ruleId":"531","severity":1,"message":"565","line":7,"column":22,"nodeType":"533","messageId":"534","endLine":7,"endColumn":34},{"ruleId":"531","severity":1,"message":"566","line":12,"column":10,"nodeType":"533","messageId":"534","endLine":12,"endColumn":32},{"ruleId":"551","severity":1,"message":"552","line":85,"column":45,"nodeType":"553","messageId":"554","endLine":85,"endColumn":47},{"ruleId":"551","severity":1,"message":"552","line":95,"column":45,"nodeType":"553","messageId":"554","endLine":95,"endColumn":47},{"ruleId":"551","severity":1,"message":"552","line":196,"column":52,"nodeType":"553","messageId":"554","endLine":196,"endColumn":54},{"ruleId":"531","severity":1,"message":"567","line":227,"column":26,"nodeType":"533","messageId":"534","endLine":227,"endColumn":36},{"ruleId":"531","severity":1,"message":"562","line":50,"column":49,"nodeType":"533","messageId":"534","endLine":50,"endColumn":58},{"ruleId":"531","severity":1,"message":"568","line":50,"column":60,"nodeType":"533","messageId":"534","endLine":50,"endColumn":73},{"ruleId":"531","severity":1,"message":"569","line":10,"column":10,"nodeType":"533","messageId":"534","endLine":10,"endColumn":38},{"ruleId":"531","severity":1,"message":"562","line":145,"column":46,"nodeType":"533","messageId":"534","endLine":145,"endColumn":55},{"ruleId":"531","severity":1,"message":"563","line":145,"column":57,"nodeType":"533","messageId":"534","endLine":145,"endColumn":67},{"ruleId":"531","severity":1,"message":"570","line":9,"column":10,"nodeType":"533","messageId":"534","endLine":9,"endColumn":15},{"ruleId":"531","severity":1,"message":"562","line":197,"column":28,"nodeType":"533","messageId":"534","endLine":197,"endColumn":37},{"ruleId":"531","severity":1,"message":"571","line":197,"column":39,"nodeType":"533","messageId":"534","endLine":197,"endColumn":57},{"ruleId":"531","severity":1,"message":"562","line":69,"column":46,"nodeType":"533","messageId":"534","endLine":69,"endColumn":55},{"ruleId":"531","severity":1,"message":"563","line":69,"column":57,"nodeType":"533","messageId":"534","endLine":69,"endColumn":67},{"ruleId":"531","severity":1,"message":"562","line":69,"column":58,"nodeType":"533","messageId":"534","endLine":69,"endColumn":67},{"ruleId":"531","severity":1,"message":"563","line":69,"column":69,"nodeType":"533","messageId":"534","endLine":69,"endColumn":79},{"ruleId":"516","replacedBy":"572"},{"ruleId":"518","replacedBy":"573"},"no-native-reassign",["574"],"no-negated-in-lhs",["575"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["574"],["575"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["574"],["575"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","Assign object to a variable before exporting as module default","'FormattedMessage' is defined but never used.",["574"],["575"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'userInfo' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["574"],["575"],"'avatar' is assigned a value but never used.","'mdParser' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'_' is defined but never used.","'priceId' is assigned a value but never used.","'birthdays' is assigned a value but never used.","'language' is assigned a value but never used.","'LANGUAGES' is defined but never used.","'descriptionHTML' is assigned a value but never used.","'descriptionMarkdown' is assigned a value but never used.","'dataModal' is assigned a value but never used.","'sendRemedy' is assigned a value but never used.","'cancelRemedy' is assigned a value but never used.","'CRUD_ACTIONS' is defined but never used.","'saveBulkScheduleDoctor' is defined but never used.","'hasOldData' is assigned a value but never used.","'cancelBooking' is assigned a value but never used.","'getAllBookingForAdminBooking' is defined but never used.","'toast' is defined but never used.","'isOpenBookingModal' is assigned a value but never used.",["574"],["575"],"no-global-assign","no-unsafe-negation"]